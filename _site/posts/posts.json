[
  {
    "path": "posts/2021-11-29-30daymapchallenge-2021/",
    "title": "#30DayMapChallenge 2021",
    "description": "For the second time I participated in the 30DayMapChallenge for the thirty days of November 2021. I managed to create 24 out of the 30 maps, enjoyed a lot what people shared on Twitter and learned many new cool things. In this blogpost I want to share some thoughts and learnings.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2021-11-30",
    "categories": [
      "spatial"
    ],
    "contents": "\n\nContents\nBackground and my motivation\nPackages\nedgebundle\nroughsf\nggbump\nviridis\ncartogram\nbiscale\npatchwork\nshiny\n\nRandom thoughts\nI also learned about…\nThoughts for future challenges\n\nOther maps I liked (a lot)\nClosing words\n\nIf you don’t feel like reading and just want to see some maps take a look at my GitHub repository.\nBackground and my motivation\nThe #30DayMapChallenge is a challenge created by Topi Tjukanov. Every day for the month of November participants create maps for a given topic (e.g. Points, Green, Population, Elevation) and share their results mainly on Twitter (look for #30DayMapChallenge for a few hours full of beautiful maps).\nI started learning about maps last year and had a lot of spare time in November 2020 so I participated in the 30DayMapChallenge for the first time. I learned how to create maps with R and was very happy about this. Now, one year later, I did not have so much time, but still wanted to make at least a few maps to not lose practice. Also, I have seen very cool packages being used and shared via Twitter during the last year and wanted to try them out.\nThis year, due to the limited time I did not focus too much on discovering new data sources, but if you want to see what I found last year, check out this article.\nI created nearly all my maps with R (except for the South Americake on day 15). All my codes are also shared on my GitHub.\nPackages\nI explored many new packages and wanted to quickly share my excitement for them in this post. Thank you to the authors of the packages for created those and sharing tutorials on how to use them.\nedgebundle\nDuring the last year I have quite a few awesome applications of this package by David Schoch. So I wanted to try it out with import and export data (available in the tradestatistics package). I played around with the different edgebundling algorithms to see general flows of olive oil (and other goods).\n\nroughsf\nDuring the challenge David announced that he wrote roughsf, a package for creating maps which look like sketches. Of course, I wanted to give it a try and many others did so as well.\n\n\n\nggbump\nDavid Sjöberg’s package ggbump can be used for many visuals and I was always intrigued to look into an example where a map is linked to a sorted bar chart. I tried to replicate it with the Canary Islands. I felt that it is best to use for around 8 - 12 shapes. For so few it was a little unnecessary, and for too many it would be difficult to follow the lines.\n\n\n\nviridis\nThe viridis package contains great color palettes. It is easy use within ggplot with scale_color_viridis_c() for filling continuous variables and scale_color_viridis_d() for coloring discrete variable. But you can also access the hex color names by calling viridis::magma(10) to get ten equidistant colors of the magma color palette.\ncartogram\nThe cartogram package reshapes shapes based on other variables like population. Using it for Chile was a fun experience because it shows a little bit how many people live in Santiago compared to the rest of the country (it looks a little bit like a tumor that makes the rest of the country sick).\n\n\n\nbiscale\nThe biscale package and the idea behind the package were used in many contributions during the challenge. It is great, because it allows to color a map based on two variables and their intersections. I used this to show which areas of Germany are mainly used for cropland and for pasture land (or both, or nothing).\n\n\n\npatchwork\nThe package patchwork by Thomas Lin Pedersen is advertised as the composer of ggplots. It is one of my absolute favorite packages overall and I use it a lot. patchwork allows to show two maps side by side or also to inset one map into the other. I used this functionality (inset_element()) in many maps.\n\n\n\nFor this map I also used the geogrid package, about which I already wrote last year.\nshiny\nShiny is a package which helps with the creation of web applications from R. It is relatively easy to add interactivity to plots and maps to show specific features of selected regions. I played around with the functionality for the day “Interactivity” to show how precipitation has changed in three selected countries in Africa. The data is also available for all the countries - so this can be replicated easily.\n\nIf you would like to try out the interactive version of this contribution, it is available on shinyapps.io.\nRandom thoughts\nI also learned about…\nggsave: I finally made the switch from saving my maps manually to using ggsave! It had the nice side effect that my plots are saved in higher resolution and makes my whole workflow more reproducible.\nFlexible map titles: Instead of adding title, subtitle and caption in the pre-defined way for ggplot, I started using annotate to add the title to free spaces within the map.\nColors and fonts: Moreover I started focusing more on colors that work well together and looking for non-standard fonts. Both make a huge difference in how the map looks like in the end and I admire people who create visually appealing maps a lot.\nThoughts for future challenges\nAnnotations: One thing that I would like to focus more on in the future would be to work much more with annotations. ggplot has the annotate function and some of the maps I like most work with annotations to guide the reader to interesting places on the map.\nProjections: And I would also like to learn more about projections. So far I have been happy if I bring everything to a standard projection to merge data (even this sometimes took a lot of time and nerves), but I really liked some of the maps using fancier projections.\nMore restrictive rules: For the 30DayChartChallenge in April but also during this challenge I felt sometimes that the options for one topic are so many that I did not really find a good idea to start with. I saw that some participants focused on certain countries or even certain cities for all their maps (as long as possible), others used only one tool or one package. In the past I have seen that people use a fixed templates for the map, or to have one large datasource from which many of the maps can be created. Limiting the possibilities is sometimes a good way for not being overwhelmed. On the other hand, having all these possibilities is what makes this challenge so great, because people come up with really creative ideas.\nDon’t start from zero: Next time I would try a different approach for some days. Instead of starting from zero and going to a somewhat presentable map, I would start from a map that is already created and spend the same amount of time to make this map better / different. I noticed for the days 6, 7 and 8 that this approach led to good progress.\nOther maps I liked (a lot)\nI am not sure if it is a good idea to single out a few maps, because there were so many cool and creative contributions by so many people that it would fill a whole book to list everything I liked. But I would like to try it this year, because maybe some of the readers would like to follow some of the map makers which inspired / wowed me most. I only picked one map for everyone but on their Twitter accounts you will see so many other cool maps. It is worth it, I promise.\nLorena Abad https://twitter.com/loreabad6/status/1456709747290292231\n\n\n\nDavid Schoch https://twitter.com/schochastics/status/1455508236598132737\n\n\n\nGaëlle Sutton https://twitter.com/Gaelle_Sutton/status/1459060392378789888\n\n\n\nCédric Scherer https://twitter.com/CedScherer/status/1456750614289993731\n\n\n\nHelen McKenzie https://twitter.com/helenmakesmaps/status/1460981196008079366\n\n\n\nKate Berg https://twitter.com/pokateo_/status/1461771050912518163\nIlya Ilyankou https://twitter.com/ilyankou/status/1459431881280311301\n@leeolney https://twitter.com/leeolney3/status/1463334367464407050\n@dakvid https://twitter.com/dakvid/status/1462340751996514310\nFederica Gaspari https://twitter.com/fede_gaspari/status/1464632609489760265\nBenjamin Nowak https://twitter.com/BjnNowak/status/1463032063339253766\n@researchremora https://twitter.com/researchremora/status/1460076981501014019\nGeorgios Karamanis https://twitter.com/geokaramanis/status/1464326533233975297\nAmit Levinson https://twitter.com/Amit_Levinson/status/1461090077422063621\nClosing words\nIt was a great experience to participate once more in the #30DayMapChallenge. I feel happy for everything I learned and all the beautiful maps and ideas I saw from other participants. On the other hand I am also happy that I did not stress myself into making all 30 maps because there were days where time was very limited for me.\nA big thank you to Topi Tjukanov for starting this challenge three years ago, and for offering it this year as well. And a round of applause to all the creators of maps and participants - it was a joy following the hashtag on Twitter during the last 30 days.\n\n\n\n",
    "preview": "posts/2021-11-29-30daymapchallenge-2021/img/day10.png",
    "last_modified": "2021-11-30T08:14:16+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-12-family-trees-with-ggraph/",
    "title": "Family trees with ggraph",
    "description": "Networks can be useful when visualizing family trees. I explored the possibilities of doing this with the {ggraph} package for family information of Lemurs for #TidyTuesday. In this blogpost I describe step by step how to create the visuals.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2021-09-12",
    "categories": [
      "ggraph",
      "graphlayouts"
    ],
    "contents": "\n\nContents\nInspiration\nLoading packages and data\nBuild the network\nClosing comments\n\nInspiration\nI recently bought the beautiful book “Data Sketches” by Nadieh Bremer and Shirley Wu, and it has been a joy looking at their awesome projects. First of all, I really like the idea of having one project per month and having someone who pushes you and who “expects the output.” Maybe I would also need something similar for my blog. Currently, I am trying to participate in the weekly #TidyTuesday initiative, and in one of the past weeks, we were looking at lemur data. I planned to show the family tree for several lemur families as a network, inspired by what Nadieh Bremer did for the royal families. Take a moment to visit the stunning visuals she created.\nLoading packages and data\nFor creating the family trees we will need dplyr for data manipulation, ggraph and igraph for the networks and graphlayouts for the manual positioning of the monkeys. The data can be loaded from the TidyTuesday repository as seen below.\n\n\nlibrary(dplyr)\nlibrary(ggraph)\nlibrary(igraph)\nlibrary(graphlayouts)\n\nlemurs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-08-24/lemur_data.csv')\n\n\n\nThe data contains one row for each lemur. The taxon stands for the different lemur families, DMAD for example for the Aye-aye lemur family. If available, the data contains date of birth (dob), and the ID of mother and father.\n\ntaxon\ndlc_id\nsex\ndob\ndam_id\ndam_dob\nsire_id\nsire_dob\nlemur_name\nDMAD\n6771\nM\n2000-12-15\n6674\n1996-04-15\n6201\n1985-12-18\nArdrey-A\nDMAD\n6772\nM\n2001-01-07\n6454\n1988-11-30\n6202\n1986-12-19\nTolkein\nDMAD\n6786\nF\n2001-07-30\n6452\n1983-12-04\n6201\n1985-12-18\nLucrezia\nDMAD\n6787\nF\n2001-09-05\n6674\n1996-04-15\n6201\n1985-12-18\nSalem\nDMAD\n6788\nM\n2001-10-25\n6453\n1985-10-11\n6451\n1981-10-08\nOzony Avelo\nDMAD\n6820\nF\n2003-09-26\n6454\n1988-11-30\n6202\n1986-12-19\nSabrina\nDMAD\n6821\nF\n2003-10-14\n6453\n1985-10-11\n6451\n1981-10-08\nMedusa\nDMAD\n6842\nF\n2004-09-10\n6721\n1998-01-06\n6202\n1986-12-19\nMedea\nDMAD\n6851\nM\n2005-02-22\n6454\n1988-11-30\n6202\n1986-12-19\nHitchcock\n\n\n\n\nBuild the network\nFirst, we will build the edges. We want to have one connection from each father and each mother to their child.\n\n\nedges <- tree %>%\n  distinct(from = dam_id, to = dlc_id) %>%\n  rbind(tree %>% distinct(from = sire_id, to = dlc_id))\n\n\n\n\nfrom\nto\nWILD\n6454\n6452\n6480\n6453\n6514\n6261\n6515\n6454\n6561\n\nNext, we create the vertices. We want to have some information stored in the vertices, namely the name of the lemur, the birthday, and the sex. Every vertex which was mentioned in the edges (i.e. every child, father and mother) has to be present in the vertices data frame. Therefore we will concatenate the rows of children, fathers and mothers. The columns have to have the same names for each group for the concatenation to work.\n\n\nvertices <- tree %>%\n  distinct(name = dlc_id, lemur_name, dob, sex) %>%\n  rbind(tree %>% distinct(name = sire_id, lemur_name = NA, dob = sire_dob, sex = NA)) %>%\n  rbind(tree %>% distinct(name = dam_id, lemur_name = NA, dob = dam_dob, sex = NA))\n\n\n\nWe have to remove duplicate names. And instead of birthday, we will just keep the birth year.\n\n\nvertices <- vertices %>%\n  group_by(name) %>%\n  summarise(lemur_name = max(lemur_name, na.rm = TRUE),\n            dob = max(dob, na.rm = TRUE),\n            sex = max(sex, na.rm = TRUE)) %>%\n  mutate(year = as.numeric(format(dob, '%Y'))) %>%\n  select(-dob)\n\n\n\n\nname\nlemur_name\nsex\nyear\n6201\nNosferatu\nM\n1985\n6202\nPoe\nM\n1986\n6261\nSAMANTHA\nF\n1978\n6262\nANNABEL LEE\nF\n1988\n6451\nMephistopheles\nM\n1981\n\nNow, we can create the graph. simplify removes loops and multiple edges, as.undirected removes the direction of the connections, which is important for the backbone network we will introduce later.\n\n\ng <- graph_from_data_frame(edges, vertices = vertices) %>%\n  simplify() %>%\n  as.undirected()\n\n\n\nLet’s take a look at the network. We color the nodes by sex and add the name of the individual close to each node. We use check_overlap = TRUE to remove labels if they overlap with others.\n\n\nggraph(g) +\n  geom_edge_link0(edge_width = 0.1, alpha = 0.2)+\n  geom_node_point(aes(col = vertices$sex))+\n  geom_node_text(aes(label = vertices$lemur_name),\n                 size = 5, check_overlap = TRUE, nudge_y = -0.1)\n\n\n\n\nNow, we have a network where each child is connected to their parents. However, we are missing the temporal component. I first tried to put the year on one axis and a random value for each individual on the other axis, but it was a mess. This is when I found this blogpost by David Schoch. At the end of the post, David talks about backbone networks. The method described in this paper is used to disentangle networks with a lot of (weak) connections between all nodes. This is not our case, but it still came in handy to solve the problem I was trying to solve, namely to add a time component. Actually, David responded to the first version of this blog post and told me that there was even a better way for this usecase than using a backbone:\nThe layout_with_constrained_stress method from the {graphlayouts} package is giving us coordinates to plot our network manually. We will use the year of birth of each individual on the y-axis and get the corresponding x-axis value from the layout function.\n\n\nbb <- layout_with_constrained_stress(g, coord = vertices$year, fixdim = \"y\")\n  \nggraph(g, layout = \"manual\", x = bb[,1], y = bb[,2]) +\n  geom_edge_link0(edge_width = 0.1, alpha = 0.2)+\n  geom_node_point(aes(col = vertices$sex))+\n  geom_node_text(aes(label = vertices$lemur_name),\n                 size = 5, check_overlap = TRUE, nudge_y = -0.4)\n\n\n\n\nIn the end we can use themes and titles to make the plot prettier.\n\n\n\nThe next step is to put this procedure into a function to be able to repeat it easily for other families. If you want to see the whole code, take a look at my Github repository.\n\n\n\n\n\n\nClosing comments\nI am not sure if going the extra mile with the backbone network is necessary because we are not using the method’s power, just to get the xy-coordinates of the individuals. So if you read this and know that there is an easier way, send me a short message on Twitter or via mail (richard.vogg[at]web.de). Also, in case you want to comment on anything else, of course.\nIn the graphics, we lose all those animals with unknown birth dates. One could think of a way of estimating those to show a complete family tree.\nWhat I like most about the data and the original motivation to create these trees are all the creative names that the investigators came up with. If you look closely, you will see some overall topics given to many of the monkeys of one family (e.g. Egyptian gods, minerals, authors, fruits etc).\n\n\n\n",
    "preview": "posts/2021-09-12-family-trees-with-ggraph/img/plotDMAD.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-24-ggraph/",
    "title": "First steps with ggraph",
    "description": "The {ggraph} packages allows to visualize networks and hierarchical data in beautiful ways. In this post I would like to show in which format your data has to be so that ggraph does what you want it to do.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2021-05-24",
    "categories": [
      "ggraph",
      "widyr",
      "network",
      "treemap"
    ],
    "contents": "\n\nContents\nggraph\nPackages\nMini example\nReal-world examplesMaking a treemap\nCreating a network\n\nFinal remark\n\nggraph\nI recently tried out {ggraph} by Thomas Lin Pedersen and think it is a great tool to add to one’s data visualization toolbox. This package allows to create networks and all kinds of cool plots with hierarchical data.\n\n\n\nWhile I am quite familiar with ggplot (still have to google a lot, but I know what I have to do to get from data to a desired output), it took some time to understand the logic behind ggraph. The good news is: It is similar to ggplot, so the plot is created with a layer-like grammar which converts the raw data in one of these beautiful visualizations.\nMore information at the package’s website.\nPackages\nWe will need the following packages.\n\n\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(dplyr)\n\n\n\nMini example\nThe data for ggplot graphs is a dataframe or a tibble. For ggraph, we are working with networks and therefore need two components:\nVertices / Nodes\nEdges\nThe edges define the connections between the nodes. And if we do not pass along any information with the nodes, it is enough to define a dataframe with edges.\nLet’s take a look at a mini example:\n\n\nedges <- data.frame(\n  from = c(\"father\", \"father\", \"father\", \"mother\", \"mother\", \"mother\"),\n  to = c(\"me\", \"sister1\", \"sister2\", \"me\", \"sister1\", \"sister2\")\n)\n\n\n\nWe had to load the {igraph} package in the beginning as it contains the function which converts this to a graph.\n\n\ng <- graph_from_data_frame(edges)\n\n\n\nAnd this graph is used to visualize this small example:\n\n\nggraph(g) +\n  geom_edge_link() + \n  geom_node_text(aes(label = name))\n\n\n\n\nThis is a very small example. The next step would be to add information to the nodes. So far the nodes have been created from the edges by using the names appearing in the columns from and to (by the way: you can name them as you like and even add further columns - the first two columns will always indicate from which node to which node a line has to be drawn).\nWe can also do this manually:\n\n\nvertices <- data.frame(name = c(\"mother\", \"father\", \"me\", \"sister1\", \"sister2\"),\n                       letters = c(7, 4, 7, 4, 7))\n\n\n\n\n\ng <- graph_from_data_frame(edges, vertices = vertices)\n\n\n\nggplot2 users will be happy to hear that dealing with sizes, colors etc. is the exact same logic, you just have to add scale_edge_... when you refer to edges.\n\n\nggraph(g) +\n  geom_edge_link() + \n  geom_node_text(aes(label = name, size = letters)) +\n  scale_size_continuous(range = c(2,4))\n\n\n\n\nEnough with the basics, let’s look at real data.\nReal-world examples\nThe data stems from the Global Health Data Exchange website and you can customize the data download. It is really worth a visit, and contains country-level data around the Burden of Diseases, broken down by sex, age-group and year (1990 - 2019).\nFor this example I downloaded a subset containing the percentage of different death causes per country in 2019.\n\n\n\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#qevtrzikfj .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#qevtrzikfj .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#qevtrzikfj .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#qevtrzikfj .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#qevtrzikfj .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qevtrzikfj .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#qevtrzikfj .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#qevtrzikfj .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#qevtrzikfj .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#qevtrzikfj .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#qevtrzikfj .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#qevtrzikfj .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#qevtrzikfj .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#qevtrzikfj .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#qevtrzikfj .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#qevtrzikfj .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#qevtrzikfj .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#qevtrzikfj .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qevtrzikfj .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#qevtrzikfj .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qevtrzikfj .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#qevtrzikfj .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#qevtrzikfj .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qevtrzikfj .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#qevtrzikfj .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#qevtrzikfj .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#qevtrzikfj .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#qevtrzikfj .gt_left {\n  text-align: left;\n}\n\n#qevtrzikfj .gt_center {\n  text-align: center;\n}\n\n#qevtrzikfj .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#qevtrzikfj .gt_font_normal {\n  font-weight: normal;\n}\n\n#qevtrzikfj .gt_font_bold {\n  font-weight: bold;\n}\n\n#qevtrzikfj .gt_font_italic {\n  font-style: italic;\n}\n\n#qevtrzikfj .gt_super {\n  font-size: 65%;\n}\n\n#qevtrzikfj .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nlocation\n      cause\n      val\n    Armenia\n      Encephalitis\n      0.000533832\n    Greece\n      Neonatal disorders\n      0.001085751\n    Chad\n      Non-Hodgkin lymphoma\n      0.001367366\n    Honduras\n      Other transport injuries\n      0.001786898\n    Indonesia\n      Maternal disorders\n      0.003084283\n    South Sudan\n      Diphtheria\n      0.000201279\n    Oman\n      Esophageal cancer\n      0.002769811\n    Slovenia\n      Stroke\n      0.098549024\n    Bolivia (Plurinational State of)\n      Bladder cancer\n      0.002728930\n    Switzerland\n      Bacterial skin diseases\n      0.001770625\n    \n\nThe dataset contains 133 death causes and which percentage of total deaths they had in 2019 in each one of 213 countries.\nMaking a treemap\nFirst, we will try to make a treemap to show each country’s profile. For this, we will need some hierarchy. It took some manual work for me to get the hierarchical data from the website (which groups together certain death causes into higher level families).\nThe file will be on the second sheet of the excel file in this blogpost’s repository.\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#sudjvyvqul .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#sudjvyvqul .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sudjvyvqul .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#sudjvyvqul .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#sudjvyvqul .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sudjvyvqul .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sudjvyvqul .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#sudjvyvqul .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#sudjvyvqul .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#sudjvyvqul .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#sudjvyvqul .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#sudjvyvqul .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#sudjvyvqul .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#sudjvyvqul .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#sudjvyvqul .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#sudjvyvqul .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#sudjvyvqul .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#sudjvyvqul .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sudjvyvqul .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#sudjvyvqul .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sudjvyvqul .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#sudjvyvqul .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#sudjvyvqul .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sudjvyvqul .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sudjvyvqul .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#sudjvyvqul .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sudjvyvqul .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#sudjvyvqul .gt_left {\n  text-align: left;\n}\n\n#sudjvyvqul .gt_center {\n  text-align: center;\n}\n\n#sudjvyvqul .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#sudjvyvqul .gt_font_normal {\n  font-weight: normal;\n}\n\n#sudjvyvqul .gt_font_bold {\n  font-weight: bold;\n}\n\n#sudjvyvqul .gt_font_italic {\n  font-style: italic;\n}\n\n#sudjvyvqul .gt_super {\n  font-size: 65%;\n}\n\n#sudjvyvqul .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nCause\n      CauseL2\n      CauseL3\n    Diarrheal diseases\n      Enteric infections\n      Communicable, maternal, neonatal, and nutritional diseases\n    Cysticercosis\n      Neglected tropical diseases and malaria\n      Communicable, maternal, neonatal, and nutritional diseases\n    Falls\n      Unintentional injuries\n      Injuries\n    Pneumoconiosis\n      Chronic respiratory diseases\n      Non-communicable diseases\n    Adverse effects of medical treatment\n      Unintentional injuries\n      Injuries\n    Self-harm\n      Self-harm and interpersonal violence\n      Injuries\n    \n\nWe will join the two datasets and filter out a country of interest.\n\n\ncountry <- \"Chile\"\n\ngraph_data <- df %>%\n  filter(location == country) %>%\n  inner_join(causes, by = c(\"cause\" = \"Cause\"))\n\n\n\nIn the introduction, we were dealing with networks, here we are dealing with hierarchical data, but the idea is the same: We will create edges between higher level and lower level features. In our case we have three levels and thus will create connections between Level 3 and Level 2 and then between Level 2 and Level 1.\nExactly as in our mini example, the edges data.frame will have two columns (from and to).\n\n\nedges <- graph_data %>%\n    distinct(from = CauseL3, to = CauseL2) %>%\n    rbind(graph_data %>% \n            distinct(from = CauseL2,\n                     to = cause))\n\n\n\nSimilarly, we will do for the vertices. In theory, the vertices would just require the names of all causes from the three levels. We cannot have vertices with a value of 0 (unless we would remove them from the edges), so I am setting those to a very small value.\nIn this code I am adding a few extra columns which will help to create a better visual:\nI am adding the parent names (from the higher levels) as I will need those for coloring later.\nAnd I will add a new column called level, so that not all the labels are displayed, but just the level 1 labels. This is stored in new_label at the end of the code.\nI removed all but the top 10 causes of death in a country, to make the plot less cluttered, but this can be easily changed in the last mutate.\n\n\nvertices <- graph_data %>%\n    select(name = cause, val = val, parent = CauseL2, parent2 = CauseL3) %>%\n    mutate(val = pmax(val, 0.000001), level = 1) %>%\n    rbind(graph_data %>% \n            distinct(name = CauseL2, parent = CauseL3, parent2 = NA) %>% \n            mutate(val = 0, level = 2)) %>%\n    rbind(graph_data %>% \n            distinct(name = CauseL3, parent = NA, parent2 = NA) %>% \n            mutate(val = 0, level = 3)) %>%\n    mutate(rank = rank(-val, ties.method = \"first\"),\n      new_label = ifelse(level==1 & rank <= 10, name, NA)) %>%\n    distinct(name, val, level, new_label, parent, parent2)\n\n\n\nLet’s have a look at the data of the vertices:\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#icymnhrtiu .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#icymnhrtiu .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#icymnhrtiu .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#icymnhrtiu .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#icymnhrtiu .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#icymnhrtiu .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#icymnhrtiu .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#icymnhrtiu .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#icymnhrtiu .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#icymnhrtiu .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#icymnhrtiu .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#icymnhrtiu .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#icymnhrtiu .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#icymnhrtiu .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#icymnhrtiu .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#icymnhrtiu .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#icymnhrtiu .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#icymnhrtiu .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#icymnhrtiu .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#icymnhrtiu .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#icymnhrtiu .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#icymnhrtiu .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#icymnhrtiu .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#icymnhrtiu .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#icymnhrtiu .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#icymnhrtiu .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#icymnhrtiu .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#icymnhrtiu .gt_left {\n  text-align: left;\n}\n\n#icymnhrtiu .gt_center {\n  text-align: center;\n}\n\n#icymnhrtiu .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#icymnhrtiu .gt_font_normal {\n  font-weight: normal;\n}\n\n#icymnhrtiu .gt_font_bold {\n  font-weight: bold;\n}\n\n#icymnhrtiu .gt_font_italic {\n  font-style: italic;\n}\n\n#icymnhrtiu .gt_super {\n  font-size: 65%;\n}\n\n#icymnhrtiu .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nname\n      val\n      parent\n      parent2\n      level\n      new_label\n    Chronic kidney disease\n      0.044547825\n      Diabetes and kidney diseases\n      Non-communicable diseases\n      1\n      Chronic kidney disease\n    Decubitus ulcer\n      0.002074525\n      Skin and subcutaneous diseases\n      Non-communicable diseases\n      1\n      NA\n    Cardiovascular diseases\n      0.000000000\n      Non-communicable diseases\n      NA\n      2\n      NA\n    Foreign body\n      0.001681691\n      Unintentional injuries\n      Injuries\n      1\n      NA\n    Cardiomyopathy and myocarditis\n      0.007762194\n      Cardiovascular diseases\n      Non-communicable diseases\n      1\n      NA\n    Falls\n      0.013177099\n      Unintentional injuries\n      Injuries\n      1\n      NA\n    \n\nGood! We are ready to take a look at our graph. Some of the causes have very long names, so I use str_wrap from {stringr} to cut them into several lines. You can also replace that part by new_label and all label will appear as they are.\n\n\ngraph <- graph_from_data_frame(edges, vertices = vertices)\n  \nggraph(graph, 'treemap', weight = val) + \n    geom_node_tile(aes(fill = parent2)) +\n    geom_node_text(aes(label = stringr::str_wrap(new_label,15), size = val)) +\n    guides(size = FALSE) +\n    labs(title = paste(\"Most frequent death causes in\", country)) +\n    theme(legend.position = \"bottom\")\n\n\n\n\nLet’s put all of the above in a function and call it get_country_profile. Then we can easily create profiles for several countries and compare them. You can unhide the code if you want to see the final function.\n\n\nget_country_profile <- function(country) {\n  \n  graph_data <- df %>%\n    inner_join(causes, by = c(\"cause\" = \"Cause\")) %>%\n    filter(location == country)\n  \n  edges <- graph_data %>%\n    distinct(from = CauseL3, to = CauseL2) %>%\n    rbind(graph_data %>% \n            distinct(from = CauseL2,\n                     to = cause))\n  \n  vertices <- graph_data %>%\n    select(name = cause, val = val, parent = CauseL2, parent2 = CauseL3) %>%\n    mutate(val = pmax(val, 0.000001), level = 4) %>%\n    rbind(graph_data %>% \n            distinct(name = CauseL2, parent = CauseL3, parent2 = NA) %>% \n            mutate(val = 0, level = 3)) %>%\n    rbind(graph_data %>% \n            distinct(name = CauseL3, parent = country, parent2 = NA) %>% \n            mutate(val = 0, level = 2)) %>%\n    mutate(rank = rank(-val, ties.method = \"first\"),\n      new_label = ifelse(level==4 & rank <= 3, name, NA)) %>%\n    distinct(name, val, level, new_label, parent, parent2)\n  \n  graph <- graph_from_data_frame(edges, vertices = vertices)\n  \n  ggraph(graph, 'treemap', weight = val) + \n    geom_node_tile(aes(fill = parent2)) +\n    #geom_node_text(aes(label = stringr::str_wrap(new_label,15), size = val)) +\n    guides(size = FALSE) +\n    harrypotter::scale_fill_hp_d(option = \"HarryPotter\") +\n    labs(title = country)\n\n}\n\n\np1 <- get_country_profile(\"Afghanistan\")\np2 <- get_country_profile(\"Germany\")\np3 <- get_country_profile(\"Chile\")\np4 <- get_country_profile(\"Nigeria\")\np5 <- get_country_profile(\"Japan\")\np6 <- get_country_profile(\"Yemen\")\np7 <- get_country_profile(\"New Zealand\")\np8 <- get_country_profile(\"United States of America\")\n\n\nlibrary(patchwork)\n\n\np1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + plot_spacer() +\n  plot_layout(guides = \"collect\") &\n  theme(legend.title = element_blank(),\n        legend.position = \"bottom\")\n\n\n\n\nCreating a network\nIf you feel that doing the manual step of creating the dataframes for edges and vertices is too much, you might be happy to hear that you can create great networks without doing that step manually.\nFor this we will additionally need the package {widyr}.\n\n\nlibrary(widyr)\n\n\n\nThis package allows for pairwise comparisons between countries.\n\n\nall_sim <- df %>%\n  pairwise_similarity(location, cause, val, upper = FALSE) %>%\n  filter(similarity > 0.95)\n\n\n\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#sipenmejpr .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#sipenmejpr .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sipenmejpr .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#sipenmejpr .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 4px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#sipenmejpr .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sipenmejpr .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sipenmejpr .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#sipenmejpr .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#sipenmejpr .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#sipenmejpr .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#sipenmejpr .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#sipenmejpr .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#sipenmejpr .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#sipenmejpr .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#sipenmejpr .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#sipenmejpr .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#sipenmejpr .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#sipenmejpr .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sipenmejpr .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#sipenmejpr .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sipenmejpr .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#sipenmejpr .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#sipenmejpr .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sipenmejpr .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sipenmejpr .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#sipenmejpr .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sipenmejpr .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#sipenmejpr .gt_left {\n  text-align: left;\n}\n\n#sipenmejpr .gt_center {\n  text-align: center;\n}\n\n#sipenmejpr .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#sipenmejpr .gt_font_normal {\n  font-weight: normal;\n}\n\n#sipenmejpr .gt_font_bold {\n  font-weight: bold;\n}\n\n#sipenmejpr .gt_font_italic {\n  font-style: italic;\n}\n\n#sipenmejpr .gt_super {\n  font-size: 65%;\n}\n\n#sipenmejpr .gt_footnote_marks {\n  font-style: italic;\n  font-size: 65%;\n}\nitem1\n      item2\n      similarity\n    Kenya\n      Zimbabwe\n      0.9597491\n    Czechia\n      High-middle SDI\n      0.9630934\n    Iran (Islamic Republic of)\n      Iraq\n      0.9664777\n    Tokelau\n      Saint Vincent and the Grenadines\n      0.9611687\n    France\n      Belgium\n      0.9760450\n    Botswana\n      Eswatini\n      0.9914667\n    Switzerland\n      Iceland\n      0.9816005\n    Vanuatu\n      Palestine\n      0.9575626\n    Kazakhstan\n      Turkmenistan\n      0.9623283\n    Kyrgyzstan\n      Libya\n      0.9519206\n    \n\n\n\nnet <- all_sim %>%\n  graph_from_data_frame()\n\n\n\n\n\nnet %>%\n  ggraph(layout=\"fr\") +\n  geom_edge_link(aes(edge_alpha = similarity)) +\n  #geom_node_point() +\n  geom_node_text(aes(label=name), size = 2, col = \"red\",\n                 check_overlap = TRUE)\n\n\n\n\nThis was just to show how quickly you can generate a plot using {widyr} and {ggraph}. This probably has too much information in it, but we can already see some interesting trends and connections between states which share different health issues.\nFinal remark\nI hope this post has sparked some curiosity in you to use the ggraph package. Although the data structure with edges and vertices is somewhat new, it is all about getting used to this format and soon you will create better and better visuals. And remember: You do not have to learn everything on the first day or with the first visual. Repeat and add small pieces of knowledge to your toolbox every time you come across interesting data.\nAgain, check out the website of the package for many more examples.\n\n\n\n",
    "preview": "posts/2021-05-24-ggraph/img/examples.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-04-30-30daychartchallenge/",
    "title": "What I learned: #30DayChartChallenge",
    "description": "During the whole month of April I participated in the #30DayChartChallenge, organized by Cédric Scherer and Dominic Royé. Looking for suitable data, pre-processing, choosing a type of visualization and finally trying to make it as beautiful as possible - for 30 days, every day. I learned so many new cool things and would like to share a few of them here.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2021-04-30",
    "categories": [
      "ggplot2",
      "ggstream",
      "corrmorant",
      "patchwork",
      "ggfx",
      "ggtext",
      "waffle",
      "harrypotter"
    ],
    "contents": "\n\nContents\nThe challenge\nData sourcesThe Big 5 personality test\nGlobal Health Data\nInternational soccer matches\nYour own data\nThe Fragile State Index\n\nPackagesggfx\nggstream\nggtext\ncorrmorant\npatchwork\n\nOther tipsPictogram\nFonts\nHarry Potter\nCommunity\n\n\nIf you don’t feel like reading today and would just like to see all my results in a gallery, please visit this GitHub repository.\nThe challenge\nThe idea of the challenge is to create one plot every day. There were five topics and a subtopic for every day. Ideally each chart should be touching the topic and the subtopic, but the rules are not too strict - it is mainly about learning and producing charts.\n\nI would like to structure my learning into three categories:\nWhich new data sources did I get to know?\nWhich packages did I find most useful?\nWhat else did I learn?\nData sources\nThe only few frustrating moments were almost all related to datasets. Sometimes I did not have a great inspiration or a dataset at hand, so I spent a lot of time browsing through Kaggle and looking on Google for interesting datasets, while I felt that I was using the time I should actually spend on the visualization.\nIt helped that I had already worked with data in the past (TidyTuesdays, Kaggle). And just as Alex Cookson said in his great rstudio::global(2021) talk The Power of Great Datasets, you will be much more motivated if you have data that is interesting to you. So I looked on Kaggle and Google for things that I find interesting. I experienced that looking for data before knowing the topic can be easier, because in this case all that matters is if the dataset seems interesting. When you see the topic for the day, you can then decide whether your new dataset fits or not.\nHere are some of my favorite datasets I used during the challenge:\nThe Big 5 personality test\nThis is a giant dataset from Kaggle (datasource: Open Psychometrics) of over 1 million answer sets of the famous Big 5 personality test. Participants have to rate how much they agree to the following 50 affirmations:\n\n\n\nYou also get country data and response times for each question, so there is a lot to discover and many stories to be told. You can download the dataset here. If you want to get started and skip the process of data cleaning a little bit, get the questions and code from this repository.\nGlobal Health Data\nI discovered this data relatively late in the challenge and will definitely explore it further in the nearer future. It is about death causes in different countries with a lot (really a lot!) of detail. You can also see historical data for many of the last years. And it is completely customizable: You can select which aggregation level you wish and will get a link to download the desired data. (Be aware: If you select All countries, you will get All countries aggregated, so to get the data for all countries, you actually have to select all of them individually. Same with all causes, all genders etc.).\nYou can get your own data for non-commercial use here.\n\nInternational soccer matches\nA dataset containing all official international soccer matches and results between 1872 and 2021. If you like soccer, this one is definitely worth taking a look at. It will bring back some memories.\nYou can find it here on Kaggle.\nYour own data\nFor me, working with my own data is the best. I used carbon dioxide measurements I did when I was at high school to show the strong influence of vegetation and photosynthesis on the CO2 concentration over the course of a day. This data feels so heartwarming because I remember how I got up at 3 am just to make a measurement, so each data point actually means something to me.\n\nSimilarly, I downloaded the recycling data from an app I was using in Chile which tracked how many plastic bottles and metal cans I recycled over the course of little more than a year.\nAnd also a Twitter analysis feels more interesting when it is your own data you are looking at.\nThe Fragile State Index\nThe Fragile State Index is one of my currently favorite datasets. I already explored it in this blogpost but there is so much more to discover that I used it in three visualizations.\n\nPackages\nggfx\nOn March 31, one day before the challenge started, Thomas Lin Pedersen announced a new package: ggfx. It allows to apply filters (like glow, blur or shadows) to any part of your ggplot or to the whole plot.\nI counted that I used this package in every second submission! Two nice effects:\nwith_inner_glow() makes round shapes look 3-dimensional. Apply this to a round flag, and it looks almost like a button.\n\n\n\nwith_outer_glow() makes lines look straight. In my opinion, it make a huge difference if you use the standard ggplot2 lines or apply a filter to it.\n\n\nlibrary(ggfx)\n\ndf1 <- tibble(x = 1:10, y = rnorm(10))\n\nggplot(df1, aes(x, y, group = 1)) + \n  geom_line()\n\nggplot(df1, aes(x, y, group = 1))  + \n  with_outer_glow(geom_line())\n\n\n\n\nggstream\nDavid Sjoberg is the author of many amazing ggplot extension packages and they were widely used by many participants during the chart challenge. I used ggstream and it makes beautiful data visualization extremely easy!\n\nAlso, check his latest package ggsankey for making sankey charts with ggplot.\nggtext\nClaus Wilke’s ggtext package also helped enormously with making plots better and easier to understand. It contains many cool text-related features, but the one I used most was to color the title or the subtitle of the plot. This helps to replace a legend or tell the story more efficiently.\n\n\nlibrary(ggtext)\n\nggplot(data = example, aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"The last word will be colored <span style='color:red;'>red<\/span>\") +\n  theme(plot.title = element_markdown())\n\n\n\ncorrmorant\nWhen visualizing correlations between several variables it is good to have an overview. Roman Link created corrmorant which help with creating customized corrplots/pairplots in ggplot logic and style.\n\n\n\npatchwork\nThis package by Thomas Lin Pedersen is awesome when it comes to assembling plots. Whether you want to put them side by side or on top of each other, you can achieve they layout you want with very easy syntax.\nIf the layout is getting somewhat more complex, it also has this beautiful option of describing it with letters (of course, you have to create the plots first, but assembling them is as easy as this with patchwork):\n\n\nlayout <- \"\nACCCD\nBCCCD\nBCCCD\nBEEEF\n\"\n\nguide_area() + map + tiles + months + years + plot_spacer() + \n         plot_layout(design = layout, guides = \"collect\")\n\n\n\nAnd this is the result of above’s code (after adding title and other annotations):\n\nOther tips\nPictogram\nPictograms can be a great way to show proportions, given that there are so many emojis to almost any topic. Using the waffle package, this is quite easy. However, I faced some difficulties to get the fonts set up correctly and also saw that others tweeted about this. In case that you would like to play around with pictograms and want to get set up, step by step, follow this tutorial for using icons in waffle.\n\n\n\nFonts\nFor a very long time I have wondered, how people make great visualizations with non-standard ggplot fonts. While doing Tidy Tuesdays in the past I have already learned how to use a font from Google Fonts - for example with this blog, but during this challenge I used this knowledge a lot more.\nOnce you have the packages installed, it is basically just going to Google Fonts, selecting a font you like (for this example “Indie Flower” - the font I used in the Harry Potter magical spells example above) and then adding these two lines to your code.\n\n\nsysfonts::font_add_google(name = \"Indie Flower\", \"Indie\")\nshowtext::showtext_auto()\n\n\n\nAnd later you call specify in your ggplot theme that you want this font to be used, either one by one for plot.title, legend.text etc. or for all texts:\n\n\nggplot(data = example, aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Example title\") +\n  theme(text = element_text(family = \"Indie\"))\n\n\n\nNice and easy and opens so many new options to make visualizations look better.\nHarry Potter\nThere are two packages with the same name on GitHub, I used them both and found both very helpful.\nBeautiful Harry Potter Color Palettes\nAll texts from the Harry Potter books.\nCommunity\nSo far, I have only talked about learning by doing. But during the challenge I also learned many tricks by looking at other participants’ submissions and codes. The creativity and visualization capabilities of the others for each one of these topics was outstanding and looking for #30DayChartChallenge on Twitter will be worth a visit.\nA big thank you to Cédric Scherer and Dominic Royé for organizing this challenge and to congratulations to all participants!\n\n\n\n",
    "preview": "posts/2021-04-30-30daychartchallenge/img/ggstream.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-27-fuzzy-matching-packages/",
    "title": "Fuzzy matching packages",
    "description": "Which packages help us with fuzzy matching? We are going to explore stringdist, tidystringdist, fuzzyjoin, inexact, refinr, fuzzywuzzyR, and lingmatch.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2021-03-24",
    "categories": [
      "text data",
      "fuzzy matching",
      "stringdist"
    ],
    "contents": "\n\nContents\nIntro\nThe data\nstringdist\ntidystringdist\nfuzzyjoin\ninexact\nrefinr\nfuzzywuzzyR\nlingmatch\nConclusion\n\nIntro\nBefore starting to write a package which helps with fuzzy matching I wanted to do a small research and explore the packages which are already out there.\nI am loading {dplyr} as it is always helpful when working with data.\n\n\nlibrary(dplyr)\n\n\n\nThe data\nIt is very hard to come up with a realistic example which is perfect for all types of fuzzy matching algorithms. I will do a Harry Potter example and modify it along the way.\nAssume that we want to find all occurrences of Harry Potter and Voldemort. As a human it is easy to see them directly, but the computer would have some problems with these examples, due to different types of spelling and typos.\n\n\ninput <- c(\"harry j potter\", \"harrypotter\", \"Voldemort\", \n           \"Harry POTTER\", \"Harrry Potter\", \"Ron Weasley\")\n\ncompare <- c(\"Harry Potter\", \"Voldemort\")\n\n\n\nstringdist\nThe {stringdist} package by Mark van der Loo is super useful for comparing strings. And as comparison of strings is the core of the fuzzy string matching process {stringdist} is maybe the most important package to look at.\nThe package contains a function with the same name stringdist which calculates the distance between input and compare string. The most known method to calculate string distances is probably the Levenshtein distance which checks how many letters would have to be inserted, deleted or replaced to get from the input the the compare string.\nHere, we see the distance of all input strings to the first compare string “Harry Potter”. We get six values, because our input contained six strings.\n\n\nlibrary(stringdist)\n\nstringdist(input, compare[1], method = 'lv')\n\n\n[1]  4  3 10  5  1 11\n\nYou can also use the string comparison method of your choice, e.g. Jaro-Winkler. To see the whole list of available methods use the help function.\n\n\n#help(`stringdist-metrics`)\n\nstringdist(input, compare[1], \n           method = \"jw\", p = 0.1)\n\n\n[1] 0.15079365 0.14393939 0.58333333 0.16666667 0.01538462 0.65909091\n\nWe observe that the values are rather low if strings are similar, and higher if they are different.\nSo far, we have only compared the input with one of the strings (namely “Harry Potter” the first one of the compare strings).\nIf we would like to test all possible combinations, we can use stringdistmatrix.\n\n\nstringdistmatrix(input, compare, \n                 method = \"cosine\", useNames = TRUE)\n\n\n               Harry Potter Voldemort\nharry j potter   0.13277262 0.5076340\nharrypotter      0.12791840 0.4466284\nVoldemort        0.46064011 0.0000000\nHarry POTTER     0.38508131 0.8492443\nHarrry Potter    0.01023759 0.4777670\nRon Weasley      0.62789580 0.5818790\n\ntidystringdist\nIf you are a fan of tidy data, you might want to have a look at Colin Fay’s {tidystringdist} which was built on top of {stringdist}. The tidy_comb function creates a dataframe with all comparisons and then tidy_stringdist calculates the distance measures.\n\n\nlibrary(tidystringdist)\n\ntidy_comb(input, compare)\n\n\n# A tibble: 6 x 2\n  V1           V2            \n* <chr>        <chr>         \n1 Harry Potter harry j potter\n2 Voldemort    harrypotter   \n3 Harry Potter Voldemort     \n4 Voldemort    Harry POTTER  \n5 Harry Potter Harrry Potter \n6 Voldemort    Ron Weasley   \n\n\n\ntidy_comb(input, compare) %>%\n  tidy_stringdist(method = c(\"jw\", \"lv\", \"cosine\"))\n\n\n# A tibble: 6 x 5\n  V1           V2                 jw    lv cosine\n* <chr>        <chr>           <dbl> <dbl>  <dbl>\n1 Harry Potter harry j potter 0.151      4 0.133 \n2 Voldemort    harrypotter    0.576      9 0.447 \n3 Harry Potter Voldemort      0.583     10 0.461 \n4 Voldemort    Harry POTTER   0.602     12 0.849 \n5 Harry Potter Harrry Potter  0.0256     1 0.0102\n6 Voldemort    Ron Weasley    0.532      9 0.582 \n\nfuzzyjoin\nDavid Robinson’s {fuzzyjoin} package is useful for so many applications. As the name already says, we are looking at joins / merges of tables here. It is the fuzzy version of left join / inner join / full outer join etc.\nWe will look at a small variation of our example to show how fuzzy join works. Assume that we have some extra information coming along with the compare vector, e.g. how often they use bad spells. We are working with the input, and want to add this information to our analysis. As a direct join is not possible (due to the different spellings), we can use the stringdist_join function.\n\n\nlibrary(fuzzyjoin)\n\ndf1 <- data.frame(name = c(\"harry j potter\", \"harrypotter\", \"Voldemort\", \n           \"Harry POTTER\", \"Harrry Potter\", \"Ron Weasley\"))\n\ndf2 <- data.frame(name = c(\"Harry Potter\", \"Voldemort\"), \n                  bad_spells_index = c(0.02,0.87))\n\nstringdist_join(df1, df2, \n                mode = \"inner\",\n                by = \"name\",\n                max_dist = 6)\n\n\n          name.x       name.y bad_spells_index\n1 harry j potter Harry Potter             0.02\n2    harrypotter Harry Potter             0.02\n3      Voldemort    Voldemort             0.87\n4   Harry POTTER Harry Potter             0.02\n5  Harrry Potter Harry Potter             0.02\n\nNote that with larger datasets you will have to be careful with max_dist. It is the threshold of the maximal allowable string distance. If you select it too high, some names from the input will have several matches.\n\n\nstringdist_join(df1, df2,\n                mode = \"inner\",\n                by = \"name\",\n                max_dist = 10)\n\n\n          name.x       name.y bad_spells_index\n1 harry j potter Harry Potter             0.02\n2    harrypotter Harry Potter             0.02\n3    harrypotter    Voldemort             0.87\n4      Voldemort Harry Potter             0.02\n5      Voldemort    Voldemort             0.87\n6   Harry POTTER Harry Potter             0.02\n7  Harrry Potter Harry Potter             0.02\n8    Ron Weasley    Voldemort             0.87\n\nAnd you can actually use any method from the {stringdist} package. This small paragraph is not enough to showcase the flexibility of {fuzzyjoin}. You can also do joins based on regular expressions, spatial locations and many more.\ninexact\nThe RStudio addin {inexact} by Andrés Cruz helps to manually improve your fuzzy string matching process.\nIt is still under development but you can install it from Github.\n\n\nremotes::install_github(\"arcruz0/inexact\")\n\n\n\nIt helps if there are some matches which are hard to be found automatically by the program, but can be performed manually by us.\n\n\ninput_strings <- data.frame(name = c(\"Harry J. Potter\",\"Voldemort\",\"Lord Voldemort\",\"Tom Riddle\"), \n                    appearances = c(50,30,20,2), stringsAsFactors = F)\n\n\ncompare_strings <- data.frame(name = c(\"Harry Potter\",\"Voldemort\",\"Ted Tonks\"), \n                      bad_spells = c(0.05,0.87,0.03), stringsAsFactors = F)\n\n\n\nYou can now either open in from the Addins panel on top of your Rstudio window, or run:\n\n\ninexact::inexact_addin()\n\n\n\nThis opens a window which helps to fix matches manually.\n\n\nknitr::include_graphics(\"img/inexact.gif\")\n\n\n\n\nYou can copy the code in the third stage of the addin to perform the join.\n\n\n# You added custom matches:\ninexact::inexact_join(\n  x  = input_strings,\n  y  = compare_strings,\n  by = 'name',\n  method = 'osa',\n  mode = 'left',\n  custom_match = c(\n   'Tom Riddle' = 'Voldemort'\n  )\n)\n\n\n              name appearances bad_spells\n1: Harry J. Potter          50       0.05\n2:       Voldemort          30       0.87\n3:  Lord Voldemort          20       0.87\n4:      Tom Riddle           2       0.87\n\nrefinr\nThe {refinr} package works with string fingerprints (very good explanation of the topic here). There are different types of fingerprints, for example the 2-gram fingerprint of Harry is arharrry and the 1-gram fingerprint is ahrry.\nRemember that we had one example “harry j potter”, to get the same fingerprint, we will ignore the j. I like that the compare strings are called dict, as they serve as some sort of dictionary - the ultimate truth of spelling.\n\n\nlibrary(refinr)\n\nkey_collision_merge(input, dict=compare, ignore_strings = \"j\")\n\n\n[1] \"Harry Potter\"  \"harrypotter\"   \"Voldemort\"     \"Harry Potter\" \n[5] \"Harrry Potter\" \"Ron Weasley\"  \n\nAfter this cleaning, we can use the n_gram_merge to replace the occurrences of Harry Potter. This method is also based on the {stringdist} package and allows for usage of other string matching methods.\n\n\ninput %>%\n  key_collision_merge(dict=compare,ignore_strings = \"j\") %>%\n  n_gram_merge()\n\n\n[1] \"Harry Potter\" \"Harry Potter\" \"Voldemort\"    \"Harry Potter\"\n[5] \"Harry Potter\" \"Ron Weasley\" \n\nfuzzywuzzyR\nWhen you google fuzzy string matching, you will see tons of Python articles. Most of them use the fuzzywuzzy library. The {fuzzywuzzyR} package ports this functionality to R. As far as I have seen, it only works with the Levenshtein distance.\nYou need to have the {reticulate} package installed which helps with the Python connection. I had some problems getting the example to work. Issues on github advice to install fuzzywuzzy and Levenshtein in Python (with pip install fuzzywuzzy) and then call reticulate::py_discover_config(required_module = 'fuzzywuzzy').\n\n\nlibrary(fuzzywuzzyR)\n\n# Processor\ninit_proc <- FuzzUtils$new()\nPROC <- init_proc$Full_process\n\n# Scorer\ninit_scor <- FuzzMatcher$new()\nSCOR <- init_scor$WRATIO #scorer function\n\ninit <- FuzzExtract$new()\ninit$Extract(string = \"harry Potter\", sequence_strings = compare, \n             processor = PROC, scorer = SCOR)\n\n\n[[1]]\n[[1]][[1]]\n[1] \"Harry Potter\"\n\n[[1]][[2]]\n[1] 100\n\n\n[[2]]\n[[2]][[1]]\n[1] \"Voldemort\"\n\n[[2]][[2]]\n[1] 29\n\nWe can also try to find the best fit (or best fits - depending on the limit input) for every word.\n\n\ninit$ExtractBests(string = \"harry j potter\", sequence_strings = compare,\n                  processor = PROC,\n                  scorer = SCOR, limit = 1L)\n\n\n[[1]]\n[[1]][[1]]\n[1] \"Harry Potter\"\n\n[[1]][[2]]\n[1] 95\n\n{fuzzywuzzyR} also has a deduplication functionality. Let’s try this with our initial input.\n\n\ninit$Dedupe(contains_dupes = input, threshold = 70L, scorer = SCOR)\n\n\ndict_keys(['harry j potter', 'Voldemort', 'Ron Weasley'])\n\nWe see no duplicates. However, the algorithm chose the first appearance “harry j potter” and adapted all the others. It would be great to have “Harry Potter” instead.\nCheck the vignette for more functionality and examples.\nlingmatch\nThe {lingmatch} package does not directly work with characters but with words.\n\n\nlibrary(lingmatch) \n\nmatches <- lingmatch(\"Harry Potter and Voldemort are enemies\", \"Harry Potter does not like Voldemort\")\n\nmatches$dtm\n\n\n2 x 9 sparse Matrix of class \"dgCMatrix\"\n     and are does enemies harry like not potter voldemort\n[1,]   .   .    1       .     1    1   1      1         1\n[2,]   1   1    .       1     1    .   .      1         1\n\nmatches$sim\n\n\ncosine \n   0.5 \nattr(,\"time\")\nsimets \n     0 \n\nThere could be a potential value in fuzzy string matching if we decompose our input strings into ngrams (for example with the {quanteda} package) and use {lingmatch} with ngrams instead of words.\n\n\nlibrary(quanteda) # for the n gram decomposition\n\ninput1 <- \"harry potter\"\n\ninput2 <- \"harry james potter\"\n\ninput1_ngram <- input1 %>%\n  tokens(\"character\") %>%\n  unlist() %>%\n  char_ngrams(concatenator = \"\") %>%\n  paste(collapse = \" \")\n\ninput2_ngram <- input2 %>%\n  tokens(\"character\") %>%\n  unlist() %>%\n  char_ngrams(concatenator = \"\") %>%\n  paste(collapse = \" \")\n\nlingmatch(input1_ngram,input2_ngram)\n\n\n$dtm\n2 x 16 sparse Matrix of class \"dgCMatrix\"\n                                    \n[1,] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .\n[2,] . 1 1 . 1 . . 1 1 1 1 . 1 1 . 1\n\n$processed\n1 x 16 sparse Matrix of class \"dgCMatrix\"\n                                    \n[1,] . 1 1 . 1 . . 1 1 1 1 . 1 1 . 1\n\n$comp.type\n[1] \"text\"\n\n$comp\nam ar er es ha ja me ot po rr ry sp te tt yj yp \n 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0 \n\n$group\nNULL\n\n$sim\n   cosine \n0.7348469 \nattr(,\"time\")\nsimets \n     0 \n\nWe see that the cosine similarity of the words is 0.735.\nConclusion\nThere are already some great packages available to make the task of fuzzy string matching easier. It depends on the application which one or which combination of functionalities suits your needs best. As always, I am very interested in feedback and discussion: Did you already work with any of these packages? What has your experience been? What do you feel is missing to make fuzzy matching easier and better?\n\n\n\n",
    "preview": "posts/2021-03-27-fuzzy-matching-packages/img/harry-potter.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-18-fuzzy-string-matching/",
    "title": "The big picture: Fuzzy string matching",
    "description": "An overview over fuzzy string matching problems and solutions. After reading this article you will know in which situations fuzzy string matching can be helpful, and know variations like fuzzy deduplication and record linkage.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2021-03-18",
    "categories": [
      "text data",
      "fuzzy matching",
      "stringdist"
    ],
    "contents": "\n\nContents\nStructuring thoughts\nWhen to use fuzzy string matching\nImperfect strings - how to find the “perfect” version\nCleaning\nThe string comparison - the core of fuzzy string matching\nCheck results - false positives and false negatives\nThe ignore list\nOne column matching vs several column matching\nQuestions to ask before starting\n\nStructuring thoughts\nI started drawing a map with draw.io to show the structure of the ideas I want to write about. I want to keep this post on a conceptual level with examples. I plan to write about useful packages and how to use R to work with fuzzy string matching in future posts.\n\n\n\nThis map will serve as an outline for the post.\nWhen to use fuzzy string matching\nData Analysts and Data Scientists know how to work with different types of variables. Knowing if a variable is numeric, a (categorical) factor or a boolean is important for preprocessing, visualization and modeling. Fuzzy string matching is helpful when working with text input, specifically imperfect text input.\nIn general, I would distiguish two different types of imperfection in the text variable.\nThe data was typed in manually by a human (or many humans)\nresponses from forms or surveys\ndata that was typed by hand into an Excel/text file\n\nThe data comes from different sources or has several possible alternative names\ncountry names: United States vs United States of America\naddresses: Main Street 123 vs 123 Main Street\nproduct descriptions: iPhone vs Apple iPhone\n\nThe problem with imperfection in text data is that analysis is not easily possible:\nIf we are dealing with handtyped company names, we do not even receive a reliable answer when asking: “How many records do we have from company xyz?” (check this blogpost)\nWe will see unfair rankings, because some records are not counted, like in this TidyTuesday example.\n\n\n\nWe will have problems joining to other data sources, as described in this blogpost.\nImperfect strings - how to find the “perfect” version\nWhen we have a list of imperfect strings, there are two possibilities how to match them to their “perfect” counterparts.\nEither we have a list of correct names. This could be a dictionary, a list of official company names (like the S&P 500), or a file which contains further information for every country.\nOr we want the data to find the correct names by itself. In this case we would need some criterion which names are more likely to be “correct” (e.g. word frequency). This is often called fuzzy deduplication.\nCleaning\nMany differences can already be removed by cleaning the data. This could be:\nconverting all strings to lower case letters.\nremoving leading and trailing white spaces - or maybe even removing all whitespaces.\nremoving punctuation and control characters (%,&,$,-)\nremoving some words (more about this in the section “The ignore list”)\nturning extended characters to their basic form (e.g. ö to o, ñ to n).\nusing string fingerprints (described for example here).\nThe string comparison - the core of fuzzy string matching\nAfter all the initial steps, it comes down to the core of the matching algorithm. We take two words (either one from the imperfect list and one from the perfect list, or we compare words from the imperfect list in a pairwise manner) and compare them.\nWe want to put a numerical value to the similarity of two strings (or alternatively to the distance, which is the opposite).\nIntuitively, we “know” or “feel” that the strings baseball and basketball are rather similar and that breakfast and hello are not very similar.\nWhat is the reasoning behind this feeling?\nHow many letters do the words share?\nAre the letters they share in a similar position in the string?\nAre the strings approximately of the same length?\nAre parts of the words the same but in different order? (homework vs work-from-home)\nThere are many algorithms which are used to measure similarity between strings. As always, too many choices can be intimidating, so I will name only two methods which I find useful for many applications.\nJaro-Winkler: takes into account the length of the strings, the number of shared letters, the number of transpositions of shared letters (e.g. example and exampel would be 1 transposition), and the number of matching letters among the first four letters. Jaro-Winkler is strong in cases when the imperfections happen mainly at the end of the string, for example through additional words (Company ABC International vs Company ABC Int).\nLevenshtein distance: also known as Edit distance. This is the most famous and most used string distance. It counts, how many insertions, deletions and replacements of letters are needed to get from one string to the other.\nIf you are interested in more details or more string distance measures, I recommend this blogpost.\nWhich string distance measure works best depends highly on the type of imperfection in the data. It would even be possible to calculate two distance measures and use them in combination to find a suitable threshold.\nCheck results - false positives and false negatives\nAfter making a lot of string-by-string comparisons, the fuzzy string matching process is almost over. For each imperfect string we will have a closest match or several closest matches and can review the process.\nTo review the results I usually create a small data frame, containing the original string, the best fit, and the distance between both. In this data frame, I order the results by the distance.\n\n\n\nBy scrolling through the complete ordered list, we will see many cases with small distance, i.e. almost perfect matches. In some applications, we will see that there are matches which should not be matches (false positives) - i.e. McDonnell and McDonald’s. Those strings are very similar but should not be matches.\nOne chance to avoid false positives is to set a threshold, i.e. we would only consider a best-fit to be a match if it is similar enough. And this similarity threshold could be determined by eye (“at which level of similarity does the first false positive occur?”).\nDoing this, we will create a second problem: false negatives. By setting a very low threshold, we would potentially miss a lot of actual matches.\nThis is a though challenge. We have to find a good compromise, between not being too strict and losing a lot of opportunities for matches and being too relaxed and replacing many strings by matches which are actually wrong. The decision depends a lot on the cost of false positives and false negatives.\nThe ignore list\nIn many applications you will not find a satisfying threshold from the beginning. You will see that there are some early false positives, but also many actual matches with lower similarity.\nOne possibility to improve the result is to ignore some words which do not actually help to identify matches, and rather disturb the process of string similarity calculation.\nThere is no golden rule about which words to ignore, but some guidelines:\nIgnore words that are applicable for almost all strings in the domain. If you are dealing with company names ignore “Company”, “Corporation”, “International”, “Ltd”.\nIgnore abbreviations of these words as well: “Comp”, “Corp”, “Int”.\nIf you work with a list of “perfect” strings, you have to ignore the words in both lists. I usually include the words to ignore in the cleaning process.\nCreating the ignore list is often an iterative process. You run the matching process, and review the result. Then you notice how you can prevent many false negatives from happening because they contain certain types of words. You add those words to the ignore list and start again with the matching process.\nOne column matching vs several column matching\nSo far, we have been looking at matching one variable. There are many applications where it is necessary to compare several columns.\nRecord Linkage is a subtype of fuzzy string matching where you want to check the identity of a person by information coming from different systems. Banks have to make sure that their customers are who they claim to be, and invest a lot of money and efforts into KYC (Know your customer) systems.\nHowever, just checking the name will give tons of false positives (there are so many people who share the same name - i.e. that would be perfect matches). When you compare name, address and phone number, you can expect better results. Additional to the points we mentioned about cleaning and fuzzy matching, you would also have to put weights to different situations - what if name and address coincide and the phone number is missing in one source? What if the name is slightly similar and the address is the same?\nAs before, there is some manual checking necessary to create a good fuzzy string matching system.\nQuestions to ask before starting\nDo I really need fuzzy matching? If your dataset only contains 10 values, it is much faster to manually find the matches. As with all automation tasks, you have to compare the time investment for developing the automation with the time savings.\nWhat is the source of imperfection in the strings? This influences:\nHow much cleaning is necessary before starting?\nWhich stringdist algorithm is the best to find the correct matches?\n\nWhat is the “cost” of false positives and false negatives? This influences:\nHow much time do I have to invest in creating the ignore list.\n\nDo I want to match one column or several columns?\nDo I have a list of “correct” strings or do I want the data to find its “correct” candidates itself?\n\n\n\n",
    "preview": "posts/2021-03-18-fuzzy-string-matching/img/fuzzy.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-03-the-fragile-state-index/",
    "title": "The Fragile State Index",
    "description": "One of the most interesting datasets I looked at recently is The Fragile State Index. It is a project dedicated to measure risk and vulnerability in countries worldwide, assigning values to 12 indicators like economic inequality, demographic pressures and brain drain (the tendendy of intellectuals and politicians to leave the country). The project is powered by The Fund For Peace and the data is publicly available.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2021-03-03",
    "categories": [
      "data",
      "spatial",
      "widyr",
      "ggraph",
      "network"
    ],
    "contents": "\n\nContents\nIntroduction\nThe Fragile State Index\nThe world map\nThe long-term trend\nFirst comparison between countries\nNetwork graph\nFinal notes\n\nIntroduction\nLast November, I participated in the 30DayMapChallenge. I learned a lot by making different maps with R and discovering some of the cool packages that are around for spatial data.\nBut I also learned a ton by looking at other’s results. One example is @sporella’s contribution for Day 25. She worked with a very interesting dataset called The Fragile State Index and provided the link to their website. So I added it to my list of “datasets I want to explore sometime in the future”.\n\n\n\nThe time has come and I had time to expore the Fragile State Index. For some visualizations I wanted to allow user input, so I wrote a very similar article on shinyapps. In this blogpost I am just showing the static visuals.\nThe Fragile State Index\nThe Fragile State Index is a project dedicated to measure risk and vulnerability in countries worldwide. It is powered by The Fund For Peace and the data is publicly available.\nIt assigns a value between 1 and 10 to each country in each one of 12 categories:\nCohesion indicators\nSecurity Apparatus\nFactionalized Elites\nGroup Grievance\n\nEconomic indicators\nEconomy\nEconomic Inequality\nHuman Flight and Brain Drain\n\nPolitical indicators\nState Legitimacy\nPublic Services\nHuman Rights and Rule of Law\n\nSocial indicators\nDemographic Pressures\nRefugees and IDPs\nExternal Intervention\n\nBehind each indicator many questions are asked for each country. A detailed description of the indicators can be found here. It is recommended to read through the texts before analyzing the data.\nThe world map\nPlotting a world map does not show a lot of detail but it helps us to understand general trends. The vulnerability of countries worldwide is provoked by different factors in different countries. We will go into more detail in the next sections, but this helps to get a general overview.\n\n\n\n\n\n\nThe long-term trend\nIt is interesting to look at long-term trends and see in which indicators countries improved / worsened between 2006 and 2020. Note, that a lower value means higher stability.\n\n\n\nLooking at the worldwide average, we can see that most categories have improved slightly. Large improvements have been made in Economic Inequality and Demographic Pressures, while Factionalized Elites have made countries on average more unstable.\n\n\n\nFirst comparison between countries\nAfter looking at the world map we got a first intuition of the indicators. However, if we want to compare selected countries, it is easier to compare the exact values for 2020 in these countries with the average value for all countries.\nI try to read this as follows: Country X is doing good in Indicators I and J, but is not yet doing good in Indicator K.\n\n\n\nIn the interactive version, users can also see the last years to compare how a certain country has changed compared to itself.\n\n\n\nNetwork graph\nA network graph can help to see connections between countries who have similar indicator values. We use the 2020 values for comparing two countries and draw lines between them if they are similar. The relative position of a country in the network does not have a meaning, it is self-arranging depending on the number of connections.\nIn the interactive version you can brush a rectangle with your mouse over countries of interest to see their historical details.\n\n\n\n\n\n\nTo get a better view, we can look at some continents separately.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimilar to the first country comparison plot, we can see how the indicators evolve over time for different countries. Long-term trends and jumps in the indicators are worth a google search. In the interactive version you can also check other countries of your interest.\n\n\n\nFinal notes\nIn case of any questions or interest for discussion, feel free to reach out to me via mail (richard.vogg@web.de) or Twitter.\nWe live in a complex world. The work done by the Fragile State Index helps to understand in which areas countries are progressing. It is important to understand that despite of all the bad events and news that occur every day, progress and improvements are being made in many areas. (Side note: I recommend Hans Rosling’s book Factfulness which is related to this topic.)\nData analysis is one powerful tool to find and communicate patterns and information. It is much more powerful to combine this information with knowledge about political and economic events in certain countries. I highly recommend reading some of the articles on the website which tell the story behind the data for selected countries.\nCreating the network was made super easy by David Robinson’s {widyr} package to calculate pairwise distances between the countries and Thomas Lin Pedersen’s {ggraph}.\nThe Fragile State Index data is freely available at their website. After downloading the documents, I used the following cleaning script in R to combine everything in one dataframe.\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readxl)\n\ndf <- lapply(2006:2020,function(x) {\n  read_xlsx(paste0(\"data/fsi-\",x,\".xlsx\")) %>%\n    select(1:16)\n}) %>% \n  do.call(rbind,.) %>%\n  mutate(Year=format(Year,\"%Y\"))\n\ndf_long <- df %>%\n  tidyr::pivot_longer(cols = `C1: Security Apparatus`:`X1: External Intervention`,\n                      names_to=\"category\")\n\n\n\n\n\n\n",
    "preview": "posts/2021-03-03-the-fragile-state-index/the-fragile-state-index_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-02-12-select-points-on-maps/",
    "title": "Select points on maps",
    "description": "When you want to show spatial data with additional information for each data point you can use shiny for interactive exploration.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2021-02-12",
    "categories": [
      "shiny",
      "spatial"
    ],
    "contents": "\n\nContents\nThe result\nPackages\nThe data\nQuick exploration\nFunctions\nShiny App\nClosing comments\n\nThe result\nThis is what we want to achieve. The user can select one or more points on the map to see additional information for the position.\n\n\n\nPackages\nTo run the example successfully, I needed the following packages.\n\n\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\n\nThe data\nWe will work with some example data, consisting in random points and for each of the points some temporal information.\n\nlon\nlat\nmonth_1\nmonth_2\nmonth_3\nmonth_4\nmonth_5\nmonth_6\nmonth_7\n9.0\n52.2\n30\n31\n41\n58\n76\n91\n76\n9.5\n53.6\n24\n34\n26\n43\n56\n65\n69\n12.3\n49.4\n78\n94\n108\n128\n134\n136\n134\n8.3\n52.2\n28\n42\n52\n65\n67\n70\n90\n8.2\n50.1\n58\n76\n78\n74\n73\n95\n108\n\nWe first convert the data to be in tidy format (using pivot_longer from the {tidyr} package), i.e. we will have one column called month and one column containing the values.\n\nlon\nlat\nmonth\nvalue\n9\n52.2\n1\n30\n9\n52.2\n2\n31\n9\n52.2\n3\n41\n9\n52.2\n4\n58\n9\n52.2\n5\n76\n9\n52.2\n6\n91\n9\n52.2\n7\n76\n9\n52.2\n8\n74\n\nQuick exploration\nLet’s see what we can do with this data. First, we can use borders to show a quick map.\n\n\nmap <- ggplot(df)+\n  geom_point(aes(x=lon,y=lat))+\n  borders(regions=\"Germany\")+\n  coord_quickmap()+\n  theme_void()\n\nmap\n\n\n\n\nAs we want to be able to select points interactively, we want to display which points were selected. This is what the map would look like.\n\n\nexmpl <- df %>% slice(1) %>% select(lon,lat)\n\nmap + \n  geom_point(data=exmpl,aes(x=lon,y=lat),size=3,col=\"red\")\n\n\n\n\nLast, we want to show the temporal development for the selected points. This can be an easy line chart, for the filtered point.\n\n\ndf %>%\n  filter(lon == exmpl$lon,lat == exmpl$lat) %>%\n  mutate(month=factor(month.abb[month],levels=month.abb)) %>%\n    ggplot(aes(x=month,group=1))+\n    geom_line(aes(y=value),size=2)\n\n\n\n\nFunctions\nTo make the Shiny app short and concise, I will put the functionalities which create the three plots into functions.\nplot_map(df): Creates the map with the points.\nplot_selected_point_in_map(df,lon,lat): Creates the same map but highlighting the points in lon and lat.\nshow_detail(df,lon,lat): Creates the line plot for selected points.\nShiny App\nFirst, we will define the user interface. In this case we have a sidebar panel which contains the map and a main panel where the line plot will appear when points are selected.\nThe important lines to notice are that in plotOutput for the map, we will add the parameters click and brush. Doing this, we can later define what happens when someone clicks on the points.\n\n\nui <- fluidPage(\n\n    sidebarLayout(\n        sidebarPanel(\n          p(\"Please select one or various points.\"),\n            plotOutput(\"example_map\", \n                       click = \"plot1_click\",\n                       brush = \"plot1_brush\"\n            )\n        ),\n\n        mainPanel(\n            plotOutput(\"time_plot\")\n        )\n    )\n)\n\n\n\nInside the server function, we have several steps, which I will explain one by one. First, we need some variables that will be updated when the user selects points. lat, lon and time are empty in the beginning. For map, we will plot the initial map which shows all points.\n\n\nvals <- reactiveValues(lat=NULL,\n                       lon=NULL,\n                       map=plot_map(df), \n                       time = NULL) \n\n\n\nFor the two plot outputs it is easy, we will just return the respective variable of the reactive value, i.e. the map and the line chart.\n\n\noutput$example_map <- renderPlot({\n  return(vals$map)\n})\n    \noutput$time_plot <- renderPlot({\n  return(vals$time)\n})\n\n\n\nThe key for the triggered action is the process of selecting a point. Remember that in the ui part we specified another parameter for the map: click = \"plot1_click\". Here we will specify what happens when someone clicks on the map.\nFirst, we will check if there is a close point to the click in the dataset df. If this is not the case, nothing happens. Otherwise, we will assign the coordinates of the selected point to vals$lat and vals$lon our reactive variables. Additional we will change the map from the standard map to the map with selected red points and will show the line plot for the selected points. As these are reactive values, our plots will be updated automatically.\n\n\nobserveEvent(input$plot1_click, {\n    point <- nearPoints(df %>% distinct(lon,lat), input$plot1_click, addDist = FALSE)\n    if(length(point[[1]])==0) {} #happens when no point is selected\n    else {\n        vals$lon <- point[[1]]\n        vals$lat <- point[[2]]\n        vals$map <- plot_selected_point_in_map(df,vals$lon,vals$lat)\n        vals$time <-  show_detail(df,vals$lon,vals$lat)\n    }\n})\n\n\n\nYou will see that the brush option is very similar. Note, that there are two other options, hover and dblclick which can trigger actions when you just hover over a points or double click. This would be the complete server function when putting the steps together.\n\n\nserver <- function(input, output) {\n    \n    vals <- reactiveValues(lat=NULL,\n                           lon=NULL,\n                           map=plot_map(df),\n                           time = NULL)\n    \n    output$example_map <- renderPlot({\n        return(vals$map)\n    })\n    \n    output$time_plot <- renderPlot({\n      return(vals$time)\n        \n    })\n    \n    observeEvent(input$plot1_click, {\n        point <- nearPoints(df %>% distinct(lon,lat), input$plot1_click, addDist = FALSE)\n        if(length(point[[1]])==0) {} #happens when no point is selected\n        else {\n            vals$lon <- point[[1]]\n            vals$lat <- point[[2]]\n            vals$map <- plot_selected_point_in_map(df,vals$lon,vals$lat)\n            vals$time <- show_detail(df,vals$lon,vals$lat)\n        }\n        \n    })\n    \n    observeEvent(input$plot1_brush, {\n        point <- brushedPoints(df %>% distinct(lon,lat), input$plot1_brush)\n        if(length(point[[1]])==0) {} #happens when no point is selected\n        else {\n            vals$lon <- point[[1]]\n            vals$lat <- point[[2]]\n            vals$map <- plot_selected_point_in_map(df,vals$lon,vals$lat)\n            vals$time <- show_detail(df,vals$lon,vals$lat)\n        }\n    })\n}\n\n\n\nClosing comments\nI used this functionality in a basic app which is exploring changes in temperature, precipitation and soil moisture in Chile in the last 10 years (compared to the 30 years average). The first draft can be found here.\nOf course, this interactivity is not limited to maps, you can use this to make any type of plot more interactive and create very insightful Shiny apps.\nIn case you are interested in the data creation process for this example. I used the wakefield package which creates series of columns.\n\n\nlibrary(wakefield)\n\ndf <- r_data_frame(\n  n=50,\n  lon = runif(), \n  lat = runif(), \n  r_series(age,j=12,integer=TRUE, relate = \"+5_10\", name=\"month\")\n) %>%\n  mutate(lon=round(7.5+(12.5-7.5)*lon,1),\n         lat = round(48+(54-48)*lat,1))\n\n\n\nLater I transformed the data to long format.\n\n\ndf <- df %>%\n  tidyr::pivot_longer(cols=starts_with(\"month\"), names_to = \"month\",values_to=\"value\") %>%\n  mutate(month=readr::parse_number(month))\n\n\n\n\n\n\n",
    "preview": "posts/2021-02-12-select-points-on-maps/img/gif.gif",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-01-31-tracking-covid-in-germany/",
    "title": "Tracking COVID in Germany",
    "description": "Animations can help to show events over time. I found data from the RKI about daily COVID cases in Germany and want to describe the process of creating the animation. It involves fuzzy matching, as the names of the counties (Landkreise) are not identical in the RKI data and the shapefile I used.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2021-01-31",
    "categories": [
      "covid",
      "germany",
      "fuzzy matching",
      "spatial"
    ],
    "contents": "\n\nContents\nThe result\nThe data\nA map with missing values\nFuzzy matching\nCreating a gif\nClosing comments\n\nThe result\n\n\n\nThe data\nI found a dataset about COVID cases in the different communes (LK) in Germany in an Excel file online (Link). It shows cases (Fälle) and the 7-Day-Incidence value (per 100,000 inhabitants).\n(Note: unfortunately, the RKI changed the format of the data shortly after I downloaded the file, now the same data is only available on a broader Bundesland level. You might want to try this Link).\n\nLK\nFälle\nInzidenz\nSK Augsburg\n999\n336.8377\nSK Herne\n464\n296.5823\nSK Berlin Neukölln\n917\n285.5604\nSK Duisburg\n1401\n280.9383\nLK Rottal-Inn\n335\n275.7156\nLK Bautzen\n780\n260.2099\n\nThe SK (Stadt) and LK (Landkreis) are important, as they indicate whether it is about the city or the county around the city. In some cases you have both.\n\nLK\nFälle\nInzidenz\nLK Würzburg\n237\n146.02408\nSK Würzburg\n163\n127.40945\nSK Aschaffenburg\n59\n83.09625\nLK Aschaffenburg\n130\n74.62687\n\nNow, if I want to show this information on a map, I need a shapefile with the communes. The good news is, there is one (Link). The bad news is, the names are in a different format than in the Excel file with the COVID cases.\n\nGEN\nBEZ\nFlensburg\nKreisfreie Stadt\nKiel\nKreisfreie Stadt\nLübeck\nKreisfreie Stadt\nNeumünster\nKreisfreie Stadt\nDithmarschen\nKreis\nHerzogtum Lauenburg\nKreis\n\nA first fix to bring the two formats closer together would be to convert BEZ into LK and SK and paste it together with GEN.\n\nname\nSK Flensburg\nSK Kiel\nSK Lübeck\nSK Neumünster\nLK Dithmarschen\nLK Herzogtum Lauenburg\n\nA map with missing values\nThis already helps a lot. Let’s see if we can join the COVID indicence values to the shapefile with the communes.\n\n\n\nThis already looks quite good, but there are a lot of missing communes.\nLet’s look into the Excel file with COVID cases which ones did not have a match.\n\nLK\nFälle\nInzidenz\nSK Berlin Neukölln\n917\n285.5604\nSK Offenbach\n330\n253.3006\nSK Mülheim a.d.Ruhr\n378\n221.5294\nSK Berlin Friedrichshain-Kreuzberg\n617\n218.7486\nSK Berlin Reinickendorf\n554\n213.3321\nLK Lindau\n162\n197.6068\n\nCan we find equivalent names in the shapefile? We search for Berlin, Offenbach, Mülheim and Lindau.\n\nname\nSK Mülheim an der Ruhr\nSK Offenbach am Main\nLK Offenbach\nLK Lindau (Bodensee)\nSK Berlin\n\nWe notice a few things: Berlin has only one entry in the shapefile and a more detailed breakdown in the COVID cases document. SK Offenbach is called Offenbach am Main, Lindau is called Lindau (Bodensee). And Mülheim a.d.Ruhr is written Mülheim an der Ruhr.\nOne option would be to find all the matches manually and replace them. There are around 40, so this would be feasible but a little annoying. Maybe we can save this time of comparing each element and let the computer find the best match for us.\nFuzzy matching is doing exactly this: Based on string distances, it finds the closest match in the other source.\nFuzzy matching\nI wrote a function to do the calculation of the string distances and find the best fit. Additionally, we have the option to clean the input before, i.e. transform all letters to lowercase, remove or replace certain words which disturb the process. Usually such words would become clear after running the matching process once and noticing some undesired results.\n\noriginal\nbest_fit\nsimilarity\nStadtRegion Aachen\nLK Städteregion Aachen\n0.2315310\nSK Berlin Friedrichshain-Kreuzberg\nSK Berlin\n0.1470588\nSK Berlin Steglitz-Zehlendorf\nSK Berlin\n0.1379310\nRegion Hannover\nLK Region Hannover\n0.1333333\nSK Berlin Reinickendorf\nSK Berlin\n0.1217391\nLK Lindau\nLK Lindau (Bodensee)\n0.1100000\nLK Sankt Wendel\nLK St. Wendel\n0.0970513\nSK Berlin Spandau\nSK Berlin\n0.0941176\nSK Neustadt a.d.Weinstraße\nSK Neustadt an der Weinstraße\n0.0915340\nSK Mülheim a.d.Ruhr\nSK Mülheim an der Ruhr\n0.0841542\nSK Ludwigshafen\nSK Ludwigshafen am Rhein\n0.0750000\nSK Frankenthal\nSK Frankenthal (Pfalz)\n0.0727273\nSK Landau i.d.Pfalz\nSK Landau in der Pfalz\n0.0665072\nSK Halle\nSK Halle (Saale)\n0.0545455\nLK Neustadt a.d.Aisch-Bad Windsheim\nLK Neustadt a.d. Aisch-Bad Windsheim\n0.0341270\nSK Freiburg i.Breisgau\nSK Freiburg im Breisgau\n0.0264822\nLK Mühldorf a.Inn\nLK Mühldorf a. Inn\n0.0111111\nLK Neumarkt i.d.OPf.\nLK Neumarkt i.d. OPf.\n0.0095238\nLK Pfaffenhofen a.d.Ilm\nLK Pfaffenhofen a.d. Ilm\n0.0083333\nLK Wunsiedel i.Fichtelgebirge\nLK Wunsiedel i. Fichtelgebirge\n0.0066667\n\nThis table serves as a control point. We can check that all the items were matched correctly. It also serves as a dictionary which we will use to replace the original names before joining.\n\n\n\nCreating a gif\nTo create the gif, we select dates of interest (in our case day by day from Feb 15 to Nov 25).\n\n\nsel_dates <- seq.Date(from=as.Date(\"2020-02-15\"),to=as.Date(\"2020-11-25\"),by=\"day\")\nimg_frames <- paste0(\"covid\", seq_along(sel_dates), \".png\")\n\n\n\nWe loop through the dates and create one image for each day. Note how easy it is to create the Germany map with ggplot(aes(fill=cases7_per_bin))+geom_sf() from the {sf} package. The rest is just changing the colors.\n\n\nfor (i in seq_along(sel_dates)) {\n  \n  message(paste(\" - image\", i, \"of\", length(sel_dates)))\n  \n  map <- final %>%\n    filter(date %in% sel_dates[i]) %>%\n    ggplot(aes(fill=cases7_per_bin))+geom_sf()+\n    labs(title = 'COVID in Germany',\n         subtitle = format(sel_dates[i],\"%B\"),\n         fill = \"7 day incidence values\",\n         caption = \"Data from: NPGEO Corona, Hub RKI\") +\n    scale_fill_manual(values=c(\"grey80\",\"grey60\",\n                               \"grey40\",\"gold2\",\"orangered1\",\"red3\",\"red4\"),drop=FALSE)\n\n\n  png(filename=paste0(\"covid\",i,\".png\"),width = 800,height = 800)\n  print(map)\n  dev.off()\n}\n\n\n\nAfter saving all the images, we can use {magick}’s image_write_gif function to put them together and create our gif.\n\n\nmagick::image_write_gif(magick::image_read(img_frames),\n                        path = \"covid.gif\",\n                        delay = 1/10)\n\n\n\nClosing comments\nI recently started putting the fuzzy matching functionality into a package. Check out the first version of {fuzzymatch} here. The function fuzzy_matches performs the task of matching names from one datasource to another.\nThe code behind this example was written with R and can be found here (under Day 25 - COVID)\nI previously used fuzzy matching in an example from the banking world (matching company names) and talked about this in Latin-R 2019, you can find the presentation and the deck here.\nIf you wonder about what happened to the Berlin case in our example above, I did not take extra care of it. In practice one would have to sum up the cases and find an average incidence value to replace the values from different parts of the city. As this was not directly related to the fuzzy matching exercise, I omitted it.\nI am very curious if there are other applications for fuzzy matching in the GIS world, or if there are other methods to overcome a problem like this. Feel free to reach out to me.\n\n\n\n",
    "preview": "posts/2021-01-31-tracking-covid-in-germany/img/covid.gif",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-01-28-30daymapchallenge/",
    "title": "What I learned: #30DayMapChallenge",
    "description": "During November 2020 I participated in the 30DayMapChallenge, initiated by Topi Tjukanov. I created 30 maps according to the daily topics and want to summarise what I learned in this blogpost.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2021-01-28",
    "categories": [
      "spatial",
      "rayshader",
      "geogrid",
      "sf",
      "ggrepel",
      "webglobe"
    ],
    "contents": "\n\nContents\nMy mapping experience\nInteresting datasetsEarthquakes\nElevation data\nChile Shapefiles\nElection results Plebiscito Chile\nForest fires in Chile\nGlobal precipitation and temperatures\nOpen Trade Statistics\nLand cover and more\nMovebank for animal tracking\nCOVID history Germany\nNASA Worldview\n\nHow to plot the world / countries?ggplot2 + sf\nOpen Street Map\ntmap\nleaflet\n\nInteresting techniquesinset_element\ngeogrid\nrayshader\ngganimate\nFuzzy matching\nEmojis on a map\nwebglobe\nggrepel\n\nClosing words\n\nThis was the map I created for the last day. It shows around which places I created my maps (indicating which place was shown on which day). I invite you to look at my codes on Github (Link) in case that any of the topics mentioned in this post are of a particular interest for you.\n\nMy mapping experience\nBefore 2020 I had no idea of how to create a map. At the beginning of the year there was a GIS workshop for the Green Initiative Group at our company and an expert explained us about raster and vector data, where to find data about Chile and many more interesting things around GIS.\nIn May, I participated in the awesome tutorial by Stephanie Orellana Bello about Spatial Data in R (Link to the tutorial in Spanish). This allowed me to do my first steps on my own. I am familiar with R, but had to learn a lot about the spatial part.\nI learned a lot during the Challenge and would like to summarize the most interesting things. Overall, my learnings can be split into three large topics:\nInteresting data\nHow to plot the world / countries?\nInteresting techniques (and packages)\nInteresting datasets\nFor datasets it is important that they can be downloaded easily and are in a format that can either be directly mapped or combined with a prebuild world or country map.\nEarthquakes\nFollowing this Link you can get information about earthquakes. It is highly customizable (you can select an area of interest on a map and select a timeframe of interest).\nI used it to create the map for Day 1 (Points).\n\n\n\nElevation data\nTo download worldwide elevation data, you have two options (probably many more, but these are the two ones I tried). For the first one, you would need to register at NASA Earthdata and can click on the square of interest on this website (I used this during day 11 - 3D). Alternatively, you can also use the get_elev_raster() function of the {elevatr} package (compare day 24 - Elevation).\nChile Shapefiles\nThe Biblioteca del Congreso Nacional de Chile (Link) provides some interesting shapefiles around regions and communes in Chile. Moreover, I used the data about water masses (lakes, lagoons etc.) on two submissions.\nElection results Plebiscito Chile\nThe results of the chilean elections for a new constitution on October 26th are a very interesting dataset to analyze. Gonzalo Diaz has made the results of each commune available following this link.\nForest fires in Chile\nThere are many forest fires in the central regions of Chile every year during summer. CONAF makes the numbers of the last years available here. This is an excellent example of an untidy dataset. I have a cleaning skript for that dataset here. After cleaning it is easy to look at trends over time and per region.\nGlobal precipitation and temperatures\nWorldwide historical data (until today) about temperature, precipitation, radiation and many more interesting measurements can be found at the Physical Sciences Laboratory of the NOAA (National Oceanic and Atmospheric Administration) here. I used this for two days: Day 13 - Raster where I showed the precipitation of every day in 2019 in Germany and Day 14 - Climate Change where I showed precipitation anomalies in South America.\n\nOpen Trade Statistics\nMauricio Vargas created the excellent {tradestatistics} package (info). It contains historical information of trade between countries. I used this on day 15 - Connections, to show how much trash has been exported from the US into different countries.\nLand cover and more\nThe OECD.Stat website contains a lot of interesting data on country level (Link). I used this on day 18 - Land use to see which percentage of which country is used for agricultural purposes.\nMovebank for animal tracking\nThis interesting project makes available some data about animal movement. Not all datasets are freely available, but a lot of them can be downloaded and analyzed here.\n\nCOVID history Germany\nNPGEO Corona registered all COVID cases per German county (Landkreis) since the beginning of the pandemy. You can download the data here. In order to bring this on a map, you might also be interested in the shapefiles of the counties which can be downloaded here.\n\nNASA Worldview\nNASA Worldview is an amazing project which contains worldwide satellite imagery for many many applications. Not all of it can be downloaded, but it is definitely worth taking a look (Link). NASA also has a short tutorial about how to use the website here.\nHow to plot the world / countries?\nggplot2 + sf\nggplot2 is one of the best packages R can offer (I use it a lot for data visualization). Now I learned that it is also great to work with maps.\n\n\nlibrary(ggplot2)\n\nggplot() + \n  borders(regions = c(\"Germany\",\"France\")) +\n  coord_quickmap()\n\n\n\n\nInstead of plotting directly, you can also get the borders of a country as a dataframe with the map_data(map=\"world\",region=\"Chile\") (this can be useful in case you want to transform it). I used this function to plot Chile over Europe for Day 29 - Globe.\n\nOpen Street Map\nIf you have downloaded any shapefiles (for example from one of the previous examples) you can use the {sf} package to work with them and still plot them with ggplot. The Open Street Map project also provides shapefiles of all types of interesting points, lines and areas.\n\n\nlibrary(osmdata) #Open Street Map\nlibrary(sf)\n\n# Unfortunately the bounding box of Valparaiso is not super good, so we adapt it\nbbox <- getbb(\"Valparaíso,Valparaiso Chile\")\nbbox[1,] <- c(-71.6615, -71.5607)\nbbox[2,] <- c(-33.08, -33.017)\n\n\nstreets <- bbox %>%\n  opq() %>%\n  add_osm_feature(key = \"highway\") %>%\n  osmdata_sf()\n\nggplot()+\n  geom_sf(data = streets$osm_lines,col=\"grey50\",size=0.5)+\n  theme_void()\n\n\n\n\ntmap\n\n\nlibrary(tmap)\n\ndata(\"World\")\n\ntm_shape(World)+\n  tm_polygons(col=\"life_exp\")\n\n\n\n\nleaflet\nThere are a lot of different designs available. Just change providers$OpenStreetMap for providers$Stamen.Watercolor or others to have a different view of the world.\nYou can add rectangles, labels, markers and more and zoom into the map.\n\n\nlibrary(leaflet)\n\nleaflet() %>%\n  addProviderTiles(provider=providers$OpenStreetMap) %>%\n  addRectangles(5.99, 47.30, 15.02, 54.98)\n\n\n\n{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"OpenStreetMap\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addRectangles\",\"args\":[47.3,5.99,54.98,15.02,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[47.3,54.98],\"lng\":[5.99,15.02]}},\"evals\":[],\"jsHooks\":[]}\nInteresting techniques\ninset_element\nDuring the Challenge Thomas Lin Pedersen announced an exciting update of the {patchwork} package. One function called inset_element was added which allows to place a plot inside a plot.\nIt is incredibly easy to use. For the Day 9 - Monochrome submission, I created a small map of South America to show the location of Valparaíso and added it as an inset to the prior map called valpo.\n\n\nvalpo + inset_element(south_america,0.4,0.85,0.5,1,align_to = \"full\")\n\n\n\n\n\n\ngeogrid\nJoseph Bailey created this awesome package which converts a shapefile into a similar gridded shapefile. This can be very helpful if you have some very small and some very large areas and it is hard to see the smaller areas. One has to pay this equal representation with the loss of shapes, so you will lose the fact that people can recognize an area by its shape. I used this to show the results of the Chilean election results (there were only two options, so it can be shown as a percentage). Take a look to see the advantages and disadvantages of each version.\n\n\n\nrayshader\nThis package, created by Tyler Morgan-Wall, is awesome! It creates 3D plots or 3D elevation maps which look great and are highly customizable. I did my first steps with this package during the challenge.\n\n\n#Downloaded from the elevation data source from part 1\nperu <- raster(\"C:/Richard/R and Python/Datasets/Peru Elevation/S09W078.hgt\")\n\n#smaller area\nbbox <- extent(-77.680,-77.630,-8.910,-8.850)\n\nalpamayo <- crop(peru, bbox)\n\nelmat <- raster_to_matrix(alpamayo)\n\nelmat %>%\n  sphere_shade(texture = \"desert\",sunangle = 270) %>%\n  add_shadow(ray_shade(elmat, zscale = 30), 0.5) %>%\n  plot_3d(elmat, zscale = 30, fov = 0, theta = 45, zoom = 0.75, phi = 20, windowsize = c(1000, 800),\n          baseshape = \"circle\")\nSys.sleep(0.2)\nrender_snapshot(\"Day11_3D/plot.png\")\n\n\n\nThis creates one view of the Alpamayo mountain in Peru. It is also easy to create many of those and create a gif.\n\ngganimate\nNow that we are already talking about animated plots, I want to highlight the package {gganimate} (also by Thomas Lin Pedersen) which makes a gif out of a ggplot.\nFuzzy matching\nWhen you find an interesting dataset which is not linked to a shapefile, you can not map it directly, but have to join it to a suitable shapefile first. During this join it can happen that the names are not exactly the same (e.g. United States vs. United States of America, or Korea Republic vs. South Korea). Fuzzy matching can help you to find inexact matches. As this is a longer topic, I actually wrote a whole post about this during day 19 - NULL, which can be found here.\nEmojis on a map\nI guess there are also many ways to add emojis to a map. I used this to show Brewery locations of a private alcohol-free beer testing we did with my family.\nA minimal example would look like this, where I added the latitude, longitude and average rating (Durchschnitt) to each brewery.\n\n\nggplot(data=breweries,aes(x=lon,y=lat))+\n  borders(regions=\"Germany\",fill=\"grey30\")+\n  geom_text(label=\"\\U0001F37A\",family=\"EmojiOne\",size=10,aes(col=Durchschnitt))+\n  scale_color_gradient(low=\"red\",high=\"yellow\")+\n  theme_void()\n\n\n\nThe final code was slightly longer (mainly to change the layout, crop the map etc.), but the idea of using Emojis is to find the Emoji unicode value online and add it as text with geom_text, using “EmojiOne” as font family.\n\nwebglobe\nI was not aware of how easy it is to work with plots of the globe. The {webglobe} package makes it very easy to highlight countries or points. Check the code of Day 29 - Globe for the whole example, it is not very long, I promise.\n\n\nlibrary(webglobe)\n\nwebglobe(immediate=FALSE) + \n  wgpolygondf(chile_shift,fill=\"purple\",stroke_width = 2) +\n  wgcamcenter(50, 20, 8000)\n\n\n\nggrepel\nAmong the maps submitted to the #30DayMapChallenge I most enjoyed those that told a story. Annotations are a helpful tool when describing certain points in a map. The {ggrepel} function helps to avoid overlaps between labels. I used this in many maps, for example during Day 17 - Historical where I explained how the midpoint of Europe shifted in the past when countries joined or left.\n\nClosing words\nParticipating in the #30DayMapChallenge was a lot of fun, a big thanks to Topi Tjukanov for organizing it and congratulations to all participants. It was great to browse through the contributions on Twitter, learn from you and dream about what type of cool maps I might be able to produce at some point in the future.\nThe description and rules of the challenge can be found here.\n\n\n\n",
    "preview": "posts/2021-01-28-30daymapchallenge/img/day30.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-12-03-useful-packages-for-data-composition/",
    "title": "Useful packages for data simulation",
    "description": "We will explore the packages wakefield, rcorpora, charlatan, fabricatr, and GenOrd which can be helpful for data simulation.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2020-12-03",
    "categories": [
      "simulation",
      "packages"
    ],
    "contents": "\n\nContents\nAdditional packages\nwakefieldSeries\n\nrcorpora\ncharlatan\nfabricatrOrdered data\nTime series\n\nGenOrd\nMore packages\n\nWhen we simulate data we can rely on the distribution functions like rnorm, rexp and sample from base R. However, we can also leverage the great work from authors of packages which were written to make the simulation process easier. In this blogpost I will explore some of them.\nAdditional packages\nBefore starting with the simulation packages, we can load these two packages which will help with data transformation and visualization.\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\n\nwakefield\nLooking for interesting packages around data simulation I stumbled across the {wakefield} package by Tyler Rinker.\n\n\nlibrary(wakefield)\n\n\n\nIntroduction can be found here. It is very easy to create data with all types of variables.\n\n\nr_data_frame(\n    n = 500,\n    id,\n    age,\n    iq,\n    height,\n    died,\n    animal,\n    internet_browser,\n    political\n)\n\n\n# A tibble: 500 x 8\n   ID      Age    IQ Height Died  Animal            Browser Political \n   <chr> <int> <dbl>  <dbl> <lgl> <fct>             <fct>   <fct>     \n 1 001      69    91     69 TRUE  Chinchilla        Chrome  Democrat  \n 2 002      49    87     69 FALSE Galapagos Penguin Chrome  Republican\n 3 003      60   112     64 FALSE Birds Of Paradise Firefox Republican\n 4 004      43    97     69 TRUE  Sea Squirt        IE      Democrat  \n 5 005      32    92     75 TRUE  Galapagos Penguin Chrome  Republican\n 6 006      42    99     70 FALSE Ocelot            Chrome  Republican\n 7 007      87    91     70 FALSE Poison Dart Frog  Chrome  Republican\n 8 008      23    91     67 TRUE  Drever            Firefox Democrat  \n 9 009      54    94     67 FALSE Pointer           Safari  Democrat  \n10 010      86    96     69 TRUE  Sea Squirt        Chrome  Democrat  \n# ... with 490 more rows\n\nThere are a lot of predefined variables that you can use. (Call variables(type=\"matrix\",ncols=5) to see them.)\n\n      [,1]         [,2]          [,3]               [,4]       \n [1,] \"age\"        \"dice\"        \"hair\"             \"military\" \n [2,] \"animal\"     \"dna\"         \"height\"           \"month\"    \n [3,] \"answer\"     \"dob\"         \"income\"           \"name\"     \n [4,] \"area\"       \"dummy\"       \"internet_browser\" \"normal\"   \n [5,] \"car\"        \"education\"   \"iq\"               \"political\"\n [6,] \"children\"   \"employment\"  \"language\"         \"race\"     \n [7,] \"coin\"       \"eye\"         \"level\"            \"religion\" \n [8,] \"color\"      \"grade\"       \"likert\"           \"sat\"      \n [9,] \"date_stamp\" \"grade_level\" \"lorem_ipsum\"      \"sentence\" \n[10,] \"death\"      \"group\"       \"marital\"          \"sex\"      \n      [,5]           \n [1,] \"sex_inclusive\"\n [2,] \"smokes\"       \n [3,] \"speed\"        \n [4,] \"state\"        \n [5,] \"string\"       \n [6,] \"upper\"        \n [7,] \"valid\"        \n [8,] \"year\"         \n [9,] \"zip_code\"     \n[10,]                \nattr(,\"class\")\n[1] \"matrix\" \"array\" \n\nAdditionally, you can access the distribution functions easily and tweak parameters of the predefined functions.\n\n\ntest <- r_data_frame(\n    n = 500,\n    id,\n    age(x=18:50),\n    `Reading(mins)` = rpois(lambda=20),\n    income(digits=0)\n)\n\n\n\n\n# A tibble: 500 x 4\n   ID      Age `Reading(mins)` Income\n   <chr> <int>           <int>  <dbl>\n 1 001      39              22  49775\n 2 002      19              25  19148\n 3 003      19              20  32714\n 4 004      41              19  11000\n 5 005      35              21  64802\n 6 006      29              20  36548\n 7 007      43              21  62348\n 8 008      35              18  24371\n 9 009      50              18 135653\n10 010      48              23  51157\n# ... with 490 more rows\n\nLooks too perfect? Include random missing values in columns 2 and 4: (Note: If you create a larger dataframe, you can use the %>% operator to structure your code better).\n\n\ntest <- r_na(test, cols=c(2,4),prob=0.3)\n\n\n\n\n# A tibble: 500 x 4\n   ID      Age `Reading(mins)` Income\n   <chr> <int>           <int>  <dbl>\n 1 001      39              22     NA\n 2 002      19              25     NA\n 3 003      19              20     NA\n 4 004      41              19  11000\n 5 005      NA              21  64802\n 6 006      29              20  36548\n 7 007      43              21     NA\n 8 008      35              18     NA\n 9 009      50              18     NA\n10 010      NA              23  51157\n# ... with 490 more rows\n\nSeries\n{wakefield} allows us to create several variables which can be seen as a sequence, for example survey results.\n\n\nr_series(likert,j = 5,n=10,name=\"Question\")\n\n\n# A tibble: 10 x 5\n   Question_1    Question_2    Question_3    Question_4    Question_5 \n * <ord>         <ord>         <ord>         <ord>         <ord>      \n 1 Strongly Dis~ Agree         Disagree      Strongly Agr~ Disagree   \n 2 Disagree      Strongly Dis~ Strongly Agr~ Agree         Agree      \n 3 Strongly Agr~ Neutral       Strongly Agr~ Strongly Agr~ Disagree   \n 4 Disagree      Strongly Agr~ Neutral       Strongly Agr~ Strongly A~\n 5 Agree         Strongly Dis~ Agree         Strongly Dis~ Neutral    \n 6 Strongly Dis~ Disagree      Strongly Agr~ Strongly Agr~ Disagree   \n 7 Strongly Agr~ Strongly Agr~ Strongly Dis~ Strongly Agr~ Agree      \n 8 Strongly Agr~ Neutral       Neutral       Agree         Strongly A~\n 9 Strongly Dis~ Strongly Agr~ Strongly Dis~ Neutral       Strongly A~\n10 Strongly Dis~ Disagree      Disagree      Strongly Dis~ Disagree   \n\nThese can also be packaged inside a data frame, for example when simulating test results for students.\n\n\nr_data_frame(\n  n=10,\n  Student=id,\n  age=rpois(14),\n  r_series(grade,j=3,integer=TRUE,name=\"Test\")\n)\n\n\n# A tibble: 10 x 5\n   Student   age Test_1 Test_2 Test_3\n   <chr>   <int>  <int>  <int>  <int>\n 1 01         16     89     85     91\n 2 02         17     91     87     85\n 3 03         13     84     88     85\n 4 04         13     91     89     83\n 5 05         10     86     87     78\n 6 06         15     87     87     84\n 7 07         12     83     85     90\n 8 08         16     89     94     84\n 9 09         14     93     82     91\n10 10         10     89     86     87\n\nThat is great but not very real, because the test results are completely independent from each other. The relate parameter inside the r_series function helps to connect the results, and the format is fM_sd.\nf is one of (+,-,*,/)\nM is the mean value\nsd is the standard deviation of the mean value\nExamples: * additive: +3_1: The test results get better on average 3 points with a standard deviation of 1. * multiplicative: *1.05_0.2: The results get better on average 5% with a standard deviation of 0.2.\n\n\nr_data_frame(\n  n=10,\n  Student=id,\n  age=rpois(14),\n  r_series(grade,j=3,integer=TRUE,name=\"Test\",relate=\"+3_1\")\n)\n\n\n# A tibble: 10 x 5\n   Student   age Test_1     Test_2     Test_3    \n   <chr>   <int> <variable> <variable> <variable>\n 1 01         13 96.6       98.8       99.6      \n 2 02         18 90.7       93.4       98.3      \n 3 03         13 83.8       88.0       92.7      \n 4 04         10 91.6       93.3       96.1      \n 5 05         15 92.3       95.5       99.6      \n 6 06         16 88.9       92.0       95.8      \n 7 07         11 93.0       96.4       98.9      \n 8 08         10 91.5       95.0       96.5      \n 9 09         14 85.9       86.5       90.3      \n10 10         13 84.5       88.4       90.9      \n\nWith this in mind, you can create customer balances over time very easily.\n\n\nbalances <- r_data_frame(\n  n=10,\n  Client=name,\n  age,\n  r_series(income,j=12,name=\"Month\",relate=\"*1.03_0.1\")\n)\n\n\n\nThis result is worth to be visualized.\n\n\nbalances %>%\n  tidyr::pivot_longer(-c(1,2),names_to=\"Month\") %>%\n  mutate(Month=readr::parse_number(Month)) %>%\n  ggplot(aes(x=Month,y=value))+geom_line()+facet_wrap(~Client,scales=\"free_y\")\n\n\n\n\nWe can see that there are customers who had very positive balance development and others whose balances were fluctuating more or declining. However, when we simulate a sufficiently large number of customers, we will observe that on average the increase each month will be the desired 3% with a standard deviation of 0.1.\nrcorpora\nCheck the github repository here.\nThe rcorpora library has 293 collections of words that can be very helpful for data simulation.\n\n\nlibrary(rcorpora)\n\nlength(corpora())\n\n\n[1] 293\n\ncorpora()[sample(1:293,10)]\n\n\n [1] \"words/stopwords/de\"                            \n [2] \"humans/prefixes\"                               \n [3] \"humans/thirdPersonPronouns\"                    \n [4] \"animals/cats\"                                  \n [5] \"humans/celebrities\"                            \n [6] \"music/bands_that_have_opened_for_tool\"         \n [7] \"technology/knots\"                              \n [8] \"foods/iba_cocktails\"                           \n [9] \"words/adjs\"                                    \n[10] \"societies_and_groups/fraternities/professional\"\n\nTo view the words of one collection use the name in the corpora() function.\n\n\ncorpora(\"foods/pizzaToppings\")\n\n\n$description\n[1] \"A list of pizza toppings.\"\n\n$pizzaToppings\n [1] \"anchovies\"        \"artichoke\"        \"bacon\"           \n [4] \"breakfast bacon\"  \"Canadian bacon\"   \"cheese\"          \n [7] \"chicken\"          \"chili peppers\"    \"feta\"            \n[10] \"garlic\"           \"green peppers\"    \"grilled onions\"  \n[13] \"ground beef\"      \"ham\"              \"hot sauce\"       \n[16] \"meatballs\"        \"mushrooms\"        \"olives\"          \n[19] \"onions\"           \"pepperoni\"        \"pineapple\"       \n[22] \"sausage\"          \"spinach\"          \"sun-dried tomato\"\n[25] \"tomatoes\"        \n\nLet see how we can use this in a simulated dataframe.\n\n\ntibble(\n  first_name=corpora(\"humans/firstNames\")$firstNames %>% sample(100,replace=TRUE),\n  last_name=corpora(\"humans/lastNames\")$lastNames %>% sample(100,replace=TRUE),\n  self_description=corpora(\"humans/descriptions\")$descriptions %>% sample(100,replace=TRUE),\n  home_country=corpora(\"geography/countries\")$countries %>% sample(100,replace=TRUE),\n  favorite_pizza_topping=corpora(\"foods/pizzaToppings\")$pizzaToppings %>% sample(100,replace=TRUE)\n)\n\n\n# A tibble: 100 x 5\n   first_name last_name self_description home_country favorite_pizza_~\n   <chr>      <chr>     <chr>            <chr>        <chr>           \n 1 Jacob      Peterson  lean             Peru         sausage         \n 2 Ruby       Roberts   immature         Nicaragua    Canadian bacon  \n 3 Carson     Gonzales  quick            Haiti        bacon           \n 4 Shane      Stewart   one-sided        Nauru        ground beef     \n 5 Molly      Rice      civil            Iraq         breakfast bacon \n 6 Stephanie  Chavez    ambitious        Monaco       green peppers   \n 7 Kaden      Gutierrez picky            Egypt        Canadian bacon  \n 8 Valerie    Foster    irritating       Malta        spinach         \n 9 Genesis    Owens     talented         Tuvalu       green peppers   \n10 Amy        Wood      unfriendly       Vatican Cit~ hot sauce       \n# ... with 90 more rows\n\ncharlatan\nSimilar to wakefield, charlatan has some out-of-the-box variables that can be used in your simulated data.\n\n\nlibrary(charlatan)\n\nch_job(n=10)\n\n\n [1] \"Development worker, community\"    \n [2] \"Veterinary surgeon\"               \n [3] \"Advertising account executive\"    \n [4] \"Optician, dispensing\"             \n [5] \"Museum education officer\"         \n [6] \"Research officer, trade union\"    \n [7] \"Engineer, automotive\"             \n [8] \"Pharmacist, community\"            \n [9] \"Sales promotion account executive\"\n[10] \"Customer service manager\"         \n\nYou can even use get typical names or jobs for a given country. To see the available languages and countries type charlatan::PersonProvider$new()$allowed_locales().\n\n\nch_name(n=10,locale=\"de_DE\")\n\n\n [1] \"Ernestine Drubin\"             \"Burkhardt Koch B.Sc.\"        \n [3] \"Christof Barth B.Eng.\"        \"Univ.Prof. Burkhardt Beier\"  \n [5] \"Lambert Mans-Bolnbach\"        \"Prof. Darius Anders B.Sc.\"   \n [7] \"Univ.Prof. Felix Römer B.Sc.\" \"Kay-Uwe Atzler-Döhn\"         \n [9] \"Reingard Neuschäfer B.Eng.\"   \"Klaus-Dieter Hölzenbecher\"   \n\n\n\nch_phone_number(locale=\"de_DE\",n=10)\n\n\n [1] \"+49(0)7367 624040\"   \"03154789561\"         \"(08044) 075665\"     \n [4] \"(02605) 71714\"       \"+49(0)6273434607\"    \"06457 409315\"       \n [7] \"00114 07336\"         \"+49(0)6680 38728\"    \"04223885899\"        \n[10] \"+49 (0) 4533 749527\"\n\nA nice small application with fake locations and random R colors.\n\n\nlocations <- data.frame(lon=ch_lon(n=10),lat=ch_lat(n=10),col=ch_color_name(n=10))\n\nggplot(locations)+\n  borders(\"world\")+\n  geom_point(aes(x=lon,y=lat,col=col),size=3)+\n  coord_quickmap()\n\n\n\n\nfabricatr\nEasy creation of hierarchical data is possible with {fabricatr}. In this example there are five families, each one has between 1 and 12 members. Each family member has between 1 and 5 accounts. With add_level() we can automatically produce a table that shows all accounts of all members in all families.\n\n\nlibrary(fabricatr)\n\nfabricate(\n  family  = add_level(N = 5,\n  n_members = sample(1:12, N, replace = TRUE,prob=12:1)),\n  \n  members  = add_level(N = n_members,\n  n_accounts = sample(1:5,N,replace=TRUE,prob=(5:1)^2)),\n  \n  account = add_level(N = n_accounts)\n  ) %>%\nhead(10)\n\n\n   family n_members members n_accounts account\n1       1         2      01          2      01\n2       1         2      01          2      02\n3       1         2      02          1      03\n4       2         9      03          4      04\n5       2         9      03          4      05\n6       2         9      03          4      06\n7       2         9      03          4      07\n8       2         9      04          2      08\n9       2         9      04          2      09\n10      2         9      05          2      10\n\nLink levels. We can create 15 clients with their birth year and join year and some correlation between both variables.\n\n\ndf <- fabricate(\n  age = add_level(N=51, birth_year=1950:2000),\n  tenure = add_level(N = 20, join_year=1991:2010, nest = FALSE),\n  client = link_levels(N = 15, by = join(age, tenure, rho = 0.7))\n)\n\ndf %>% select(client,birth_year,join_year)\n\n\n   client birth_year join_year\n1      01       1971      1998\n2      02       1999      2009\n3      03       1989      2006\n4      04       1973      2008\n5      05       1978      1996\n6      06       1983      2001\n7      07       1960      1996\n8      08       1978      1997\n9      09       1975      1997\n10     10       1984      2002\n11     11       1997      2008\n12     12       1991      2002\n13     13       1963      1999\n14     14       1996      2009\n15     15       1984      2001\n\nOrdered data\nfabricatr has an amazing function to create ordered categorical data.\nThe function we need is draw_ordered. It internally simulates a numeric variable (x) and breaks them into predefined categories.\n\n\ndraw_ordered(\n  x = rnorm(10),\n  breaks = c(-2,-1,0.8,2),\n  break_labels = c(\"Very boring\",\"Boring\",\"OK\",\"Interesting\",\"Very Interesting\")\n)\n\n\n [1] OK          Boring      OK          Interesting OK         \n [6] Boring      OK          OK          Interesting Interesting\nLevels: Very boring Boring OK Interesting Very Interesting\n\nLet’s take a look at another example where we have two types of clients, gold clients that receive a yearly gift from the bank and standard clients that do not. How could we simulate their responses to a satisfaction survey?\n\n\ndf <- fabricate(\n  N = 100,\n  gold_client_flag = draw_binary(prob = 0.3, N),\n  satisfaction = draw_ordered(\n    x = rnorm(N, mean = -0.4 + 1.2 * gold_client_flag),\n    breaks = c(-1.5, -0.5, 0.5, 1.5),\n    break_labels = c(\"Very Unsatisfied\", \"Unsatisfied\", \"Neutral\",\n                     \"Satisfied\", \"Very Satisfied\")\n  )\n)\n\n\n\n\n   ID gold_client_flag     satisfaction\n1 001                0 Very Unsatisfied\n2 002                0          Neutral\n3 003                0          Neutral\n4 004                0        Satisfied\n5 005                0      Unsatisfied\n6 006                0          Neutral\n\nWe can summarize the results and see the differences between the two groups. Ideal data for teaching hypothesis testing.\n\n\ndf %>% count(gold_client_flag,satisfaction) %>%\n  tidyr::pivot_wider(id_cols=satisfaction,names_from=\"gold_client_flag\",values_from=\"n\")\n\n\n# A tibble: 5 x 3\n  satisfaction       `0`   `1`\n  <fct>            <int> <int>\n1 Very Unsatisfied    12    NA\n2 Unsatisfied         22     2\n3 Neutral             29     9\n4 Satisfied           11     9\n5 Very Satisfied       1     5\n\nTime series\nExample from this article.\nThis example contains the GDP of five countries over the course of five years.\n\n\npanel_units <- fabricate(\n  countries = add_level(\n    N = 5,\n    base_gdp = runif(N, 15, 22),\n    growth_units = runif(N, 0.2, 0.8),\n    growth_error = runif(N, 0.1, 0.5)\n  ),\n  years = add_level(\n    N = 5,\n    ts_year = 0:4,\n    gdp_measure = base_gdp + (ts_year * growth_units) + rnorm(N, sd=growth_error)\n  )\n)\n\nhead(panel_units,10)\n\n\n   countries base_gdp growth_units growth_error years ts_year\n1          1 15.81650    0.2936397    0.2843482    01       0\n2          1 15.81650    0.2936397    0.2843482    02       1\n3          1 15.81650    0.2936397    0.2843482    03       2\n4          1 15.81650    0.2936397    0.2843482    04       3\n5          1 15.81650    0.2936397    0.2843482    05       4\n6          2 15.25248    0.5143369    0.4467515    06       0\n7          2 15.25248    0.5143369    0.4467515    07       1\n8          2 15.25248    0.5143369    0.4467515    08       2\n9          2 15.25248    0.5143369    0.4467515    09       3\n10         2 15.25248    0.5143369    0.4467515    10       4\n   gdp_measure\n1     15.54446\n2     16.25074\n3     16.26999\n4     16.50294\n5     17.46510\n6     15.13692\n7     16.36070\n8     16.30388\n9     16.94710\n10    17.80540\n\n\n\n\nWe can take this to the next level and introduce some year specific information and then cross this with the country specific information. We just have to add one layer.\n\n\npanel_global_data <- fabricate(\n  years = add_level(\n    N = 5,\n    ts_year = 0:4,\n    year_shock = rnorm(N, 0, 0.5) #each year has a global trend\n  ),\n  countries = add_level(\n    N = 5,\n    base_gdp = runif(N, 15, 22),\n    growth_units = runif(N, 0.2, 0.5), \n    growth_error = runif(N, 0.1, 0.5),\n    nest = FALSE\n  ),\n  country_years = cross_levels(\n    by = join(years, countries),\n    gdp_measure = base_gdp + year_shock + (ts_year * growth_units) +\n      rnorm(N, sd=growth_error)\n  )\n)\n\n\n\n\n\n\nGenOrd\nThis package helps to create discrete random variables with prescribed correlation matrix and marginal distributions.\n\n\nlibrary(GenOrd)\n\n\nk <- 4 #number of random variables\nmarginal <- list(0.6, c(1/3,2/3), c(1/4,2/4,3/4), c(1/5,2/5,3/5,4/5))\n\n\n\nRead the list as follows:\nWe will create 4 random variables.\nThe first variable will have two values: 60% of the data will be 1, 40% will be 2.\nThe second variable will have three values, 1,2 and 3 with a probability of 33% each.\netc…\nEach vector in this list refers to one variable, and we will see the cumulative probability for each value.\n\n\ncorrcheck(marginal)\n\n\n[[1]]\n4 x 4 Matrix of class \"dsyMatrix\"\n           [,1]       [,2]       [,3]       [,4]\n[1,]  1.0000000 -0.8333333 -0.8215838 -0.8660254\n[2,] -0.8333333  1.0000000 -0.9128709 -0.9237604\n[3,] -0.8215838 -0.9128709  1.0000000 -0.9486833\n[4,] -0.8660254 -0.9237604 -0.9486833  1.0000000\n\n[[2]]\n4 x 4 Matrix of class \"dsyMatrix\"\n          [,1]      [,2]      [,3]      [,4]\n[1,] 1.0000000 0.8333333 0.8215838 0.8660254\n[2,] 0.8333333 1.0000000 0.9128709 0.9237604\n[3,] 0.8215838 0.9128709 1.0000000 0.9486833\n[4,] 0.8660254 0.9237604 0.9486833 1.0000000\n\nThis function shows what are allowable ranges for the correlation matrix, given the input from the marginal distributions.\n\n\nSigma <- matrix(c(1,0.5,0.4,0.3,\n                  0.5,1,0.5,0.4,\n                  0.4,0.5,1,0.5,\n                  0.3,0.4,0.5,1),\n                k, k, byrow=TRUE)\n\n\n\nWe will create 1000 observations, with the given correlation matrix. Each variable will have the marginal distribution described above.\n\n\nn <- 1000 # sample size\nm <- ordsample(n, marginal, Sigma)\n\ndf <- data.frame(m)\nhead(df)\n\n\n  X1 X2 X3 X4\n1  1  1  4  1\n2  2  3  4  5\n3  1  2  2  3\n4  2  3  3  4\n5  2  3  3  5\n6  2  3  4  5\n\nLet’s verify that the data is actually what we expected. We check the correlation and the marginal distribution for two of the variables.\n\n\ncor(df)\n\n\n          X1        X2        X3        X4\nX1 1.0000000 0.4894198 0.3312862 0.2572479\nX2 0.4894198 1.0000000 0.4567171 0.3850669\nX3 0.3312862 0.4567171 1.0000000 0.4893278\nX4 0.2572479 0.3850669 0.4893278 1.0000000\n\ndf %>% count(X4)\n\n\n  X4   n\n1  1 182\n2  2 193\n3  3 218\n4  4 212\n5  5 195\n\ndf %>% count(X1)\n\n\n  X1   n\n1  1 584\n2  2 416\n\nLater we can rename the columns and values, but will have assured that they have the desired correlations.\nMore packages\nIn this blogpost by Joseph Rickert on R Views.\n\n\n\n",
    "preview": "posts/2020-12-03-useful-packages-for-data-composition/useful-packages-for-data-composition_files/figure-html5/unnamed-chunk-13-1.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-13-data-composition-with-rmultinom/",
    "title": "Data simulation with rmultinom",
    "description": "When creating several datasets that depend on each other, the rmultinom function from the stats package can be a useful helper. In this example we will see how to create customer transactions from a customer table.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2020-11-13",
    "categories": [
      "simulation",
      "rmultinom"
    ],
    "contents": "\n\nContents\nrmultinom - like a game setup\nAn application of rmultinomAutomate this for all customers\n\nOther possible applications\n\nIn this article I want to show how the rmultinom() function can help to simulate data. We will simulate client data, and for each client we will create transactions.\nThe rmultinom() function simulates the multinomial distribution (Link).\nrmultinom - like a game setup\nIn my head I always picture the multinomial distribution as a game setup. You have N balls and K bins. Instead of the number of bins, we send a vector of probabilities (of length K), how likely it is for the balls to land in each bin (you can imagine that some bins are closer and others are further away, or that some are larger than others). This vector will be normalized automatically, so you do not have to worry about this.\nLet’s try an example, with N=1000 and K=5. We want one of the bins to be twice as large as the others.\n\n\ntest1 <- rmultinom(n=1,size=1000,c(2,1,1,1,1))\n\n\n\n\n\n\nAn application of rmultinom\nHow can we use this function to create transactions for a given number of customers? The key is to simulate all important values on client level and use rmultinom to decompose the values into smaller portions. First, let’s get some clients.\n\n\nset.seed(61)\n\nage <- rnorm(10,mean=50,sd=15) %>% pmax(18) %>% round()\ntenure <- (age - 18 - runif(10,1,30)) %>% pmax(0) %>% round()\nincome <- rexp(10,0.0001) %>% round(2)\n\nclient <- data.frame(id=1:10,age,tenure,income)\n\nclient\n\n\n   id age tenure   income\n1   1  44     22 32181.33\n2   2  44      7  5454.56\n3   3  24      3  4559.78\n4   4  55     34 26790.03\n5   5  29      0 18592.27\n6   6  47     19 40229.93\n7   7  61     14  1065.49\n8   8  58     17  2750.75\n9   9  71     49 12292.53\n10 10  45     15   282.05\n\nFor this exercise, we do not distinguish between different types of transactions. In practice, it would make sense to separate rent, supermarket, transport and other categories.\nWe create a second dataframe for clients, which contains “invisible” information needed for the transactions. Let’s begin with the total spending. This can depend on anything we know about the client. In this case, we will assume that each client has more or less the same behavior and spends around 70% of their income. The standard deviation of 0.1 assures that this value varies from client to client.\n\n\ncl_secret_info <- client\n\ncl_secret_info$total_spend <- (cl_secret_info$income * rnorm(10,0.7,sd=0.1)) %>% round(2)\n\ncl_secret_info\n\n\n   id age tenure   income total_spend\n1   1  44     22 32181.33    20755.16\n2   2  44      7  5454.56     4342.34\n3   3  24      3  4559.78     3280.65\n4   4  55     34 26790.03    21012.47\n5   5  29      0 18592.27    13990.48\n6   6  47     19 40229.93    25986.32\n7   7  61     14  1065.49      699.14\n8   8  58     17  2750.75     2158.39\n9   9  71     49 12292.53    10135.33\n10 10  45     15   282.05      160.08\n\nThe next ingredient is the number of transactions. For this example, we create a formula depending on age: Clients which are younger than 50 have (on average) a higher number of transactions per month.\n\n\ncl_secret_info$n_trans <- ifelse(cl_secret_info$age < 50, rbinom(10,60,0.5),rbinom(10,60,0.3))\n\ncl_secret_info\n\n\n   id age tenure   income total_spend n_trans\n1   1  44     22 32181.33    20755.16      27\n2   2  44      7  5454.56     4342.34      37\n3   3  24      3  4559.78     3280.65      28\n4   4  55     34 26790.03    21012.47      25\n5   5  29      0 18592.27    13990.48      32\n6   6  47     19 40229.93    25986.32      27\n7   7  61     14  1065.49      699.14      11\n8   8  58     17  2750.75     2158.39      14\n9   9  71     49 12292.53    10135.33      16\n10 10  45     15   282.05      160.08      27\n\nNow we already know that our transaction table will have 244 rows, the sum of all our 10 clients’ transactions.\nWe will create a last parameter which is an indicator of how similar the transactions are. You could split $100 into one large transaction of $80 and four small transactions of $5 each or you could have five transactions of around $20 each. The higher the value of diff_trans the higher the variability within the transactions of a client.\n\n\ncl_secret_info$diff_trans <- rexp(10,100/cl_secret_info$total_spend) %>% ceiling()\n\ncl_secret_info\n\n\n   id age tenure   income total_spend n_trans diff_trans\n1   1  44     22 32181.33    20755.16      27        328\n2   2  44      7  5454.56     4342.34      37         55\n3   3  24      3  4559.78     3280.65      28         38\n4   4  55     34 26790.03    21012.47      25         65\n5   5  29      0 18592.27    13990.48      32          1\n6   6  47     19 40229.93    25986.32      27       1408\n7   7  61     14  1065.49      699.14      11          1\n8   8  58     17  2750.75     2158.39      14         47\n9   9  71     49 12292.53    10135.33      16        183\n10 10  45     15   282.05      160.08      27          2\n\nNow we have all the necessary ingredients to split total_spend into n_trans transactions for each client. And this is the moment where the rmultinom function is extremely helpful. Let’s take a look at the first client, who spends $20755.16 in 27 transactions. The high diff_trans value indicates that there will likely be some very high transaction values and some very low.\nBefore doing the rmultinom magic, we will create the vector with the bins first. Remember that this vector determines how “large” each bin is or how likely it is to\n\n\nbins <- runif(cl_secret_info$n_trans[1],min=1,max=cl_secret_info$diff_trans[1])\n\ntransactions1 <- rmultinom(1,cl_secret_info$total_spend[1],bins)\n\ndf <- data.frame(client_id=1, trans_id=1:cl_secret_info$n_trans[1],value=transactions1)\n\n\n\n\n\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\"],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],[880,1240,1364,1262,158,1291,1182,86,1455,1354,288,831,738,8,1209,164,594,822,280,1093,321,297,211,1276,9,1375,967]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>client_id<\\/th>\\n      <th>trans_id<\\/th>\\n      <th>value<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\nAutomate this for all customers\nIn order to efficiently do this for all customers we will put what we just did in a function.\n\n\ncreate_transactions <- function(i) {\n  bins <- runif(cl_secret_info$n_trans[i],min=1,max=cl_secret_info$diff_trans[i])\n\n  transactions <- rmultinom(1,cl_secret_info$total_spend[i],bins)\n\n  df <- data.frame(client_id=i, trans_id=1:cl_secret_info$n_trans[i],value=transactions)\n  \n  return(df)\n}\n\n\n\nWe call this function repeatedly with lapply.\n\n\ntrans_list <- lapply(seq_along(client$id),create_transactions)\n\n\n\nFinally, we bind all the transactions from all clients together in our final dataframe.\n\n\ntrans_df <- do.call(rbind,trans_list)\n\n\n\n\n\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\"],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,12,13,14,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],[573,1367,688,250,228,521,873,1136,533,374,1118,399,482,473,1265,536,1237,701,585,1041,1311,1408,617,1036,1298,381,324,115,51,206,40,184,69,73,150,89,111,34,165,188,128,216,157,119,61,139,204,6,46,188,141,139,131,225,73,140,60,145,182,135,9,91,94,38,148,52,262,91,26,116,164,24,10,36,157,247,225,24,186,167,50,58,14,40,116,186,180,185,106,138,211,61,1513,360,286,160,467,1165,1553,1520,218,916,443,783,1549,153,224,455,327,1545,813,1282,647,1480,679,1144,1330,427,418,473,438,420,464,460,442,431,424,450,432,408,416,445,427,419,444,437,432,434,433,457,421,438,439,427,475,416,459,462,422,1027,1425,355,63,1355,1845,329,530,1729,998,1150,356,53,1370,1290,248,1692,854,1802,19,1562,1244,663,1533,770,797,927,63,60,56,76,65,65,73,59,69,55,58,178,262,110,49,154,233,29,258,251,32,228,231,109,34,366,835,517,464,1270,368,100,1232,210,701,617,211,583,1190,179,1292,7,7,2,2,4,5,7,6,9,1,5,3,6,5,8,6,8,4,12,5,8,8,11,4,8,5,4]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>client_id<\\/th>\\n      <th>trans_id<\\/th>\\n      <th>value<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\nOther possible applications\nStudents and grades (it is easier if the grades are points and you have a total number of points to reach). You might want to check the package {wakefield} to create sequences of grades / tests etc.\nProducts and sales numbers in supermarkets.\nAnimals and tracked kilometers.\n\n\n\n",
    "preview": "posts/2020-11-13-data-composition-with-rmultinom/data-composition-with-rmultinom_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-01-simulate-dependent-variables/",
    "title": "Simulate dependent variables",
    "description": "When you simulate a dataset it is often not enough to have independent variables, but you  want to have some dependency between the variables. In this post we explore ways of creating this dependency.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2020-11-01",
    "categories": [
      "simulation",
      "correlation"
    ],
    "contents": "\n\nContents\nPackages\nSimulating dependent variablesRule based\nCorrelation based\n\nClosing comments\n\nPackages\nMost of the functions that we are using here are actually part of base R.\nWe will need some functions from the {dplyr} and {ggplot2} packages for quick visualizations, but these are optional.\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\n\nSimulating dependent variables\nStorytelling with data is an important skill for anyone who is analyzing data. You try to find interesting information in data and then think of how to convey these insights to others.\nIn the previous post we saw how to simulate independent variables. Instead of finding stories in the data we now want to “hide” stories for others to find or to show how a certain analytics / visualization / data wrangling technique works.\nAn example: when we look at bank clients, we would expect older clients to have (on average!) a higher balance than younger clients.\nIn this section we are going to have a look at techniques to create dependence between variables.\nRule based\nWe can use ifelse() and case_when() from the {dplyr} package to create new variables that depend on others. Let’s make a small example with two columns: married, which indicates if the person is married, and age.\nWe will simulate 1000 clients, around 50% of which are married.\n\n\nk <- 1000\nmarried <- sample(c(\"Y\",\"N\"),k,replace=T)\n\n\n\nNext, we want that our married clients are slightly older than our non-married clients. For this example we assume that the average age of the married clients is 40, and the average age of the non-married clients is 30.\n\n\ndata <- data.frame(id=1:k,married) %>% \n  mutate(\n    age=ifelse(married==\"Y\", rnorm(k, 40, sd = 10), rnorm(k, 30, sd= 12)) %>% \n      pmax(18) %>% #every client should be at least 18\n      round()\n    )\n\n\n\n\n  id married age\n1  1       Y  39\n2  2       N  33\n3  3       N  29\n4  4       Y  44\n5  5       N  28\n6  6       Y  36\n\nWe can take a quick look if the difference is visible in a boxplot.\n\n\n\nIf you have more than two options, case_when() can help. We want to see the balance of clients which are either managers, analysts or senior analysts.\n\n\nk <- 1000\n\nocupation <- sample(c(\"analyst\",\"manager\",\"sr analyst\"),k,replace=T,prob=c(10,2,3))\n\ndata <- data.frame(id=1:k,ocupation)\n\ndata <- data %>% mutate(balance=case_when(\n  ocupation==\"analyst\" ~ 100+rexp(k,0.01),\n  ocupation==\"sr analyst\" ~ 200+rexp(k,0.005),\n  TRUE ~ 200+rexp(k,0.001) #this is the else case\n))\n\n#Check the average balance per group\ndata %>% \n  ggplot(aes(x=ocupation,y=balance))+geom_violin()\n\n\n\n\nCorrelation based\nIf we just deal with numeric variables and want to have a slightly more complex connection between the variables, we can try another approach, for which we specify a correlation matrix beforehand and reorder our variables afterwards so that they match the desired correlation.\nOf course, we need to find reasonable correlation values, for example between age and number of kids (probably slightly positively correlated) or between savings and number of kids (probably slightly negatively correlated). This requires some research.\nFirst, we simulate the data independently. Ideas about how to do this can be found in the previous blogpost.\n\n\nset.seed(64)\n\nk <- 2000\n\nage <- rnorm(k,mean=35,sd=10) %>% pmax(18) %>% round()\nbalance <- rexp(k,rate=0.001) %>% round(2)\ntenure <- rnorm(k,mean=15,sd=5) %>% pmax(1) %>% round()\nkids_cnt <- sample(0:6,k,replace=T,prob=c(100,120,80,30,5,2,1))\n\n\ndata <- data.frame(age,balance,kids_cnt,tenure)\n\n\n\n\n  age balance kids_cnt tenure\n1  18 3665.34        2     10\n2  18  268.55        2      8\n3  22 1628.59        0     22\n4  50 1995.58        1     12\n5  35 1510.58        0     20\n6  32   58.58        0      5\n7  45  945.11        0     21\n\nWe directly see that there are things that don’t make too much sense, like the 22-years-old with a tenure of 22 years. Further, there is no dependence between the variables.\nTo improve this, we want to reshuffle the rows and get a correlation close to a desired one. First we simulate a helping dataset of same size, where every entry is random normally distributed.\n\n\n#same size\nnvars <- ncol(data)\nnumobs <- nrow(data)\n\nset.seed(3)\nrnorm_helper <- matrix(rnorm(nvars*numobs,0,1),nrow=nvars)\n\n\n\nThe correlation of this matrix should be close to the identity matrix.\n\n\ncor(t(rnorm_helper))\n\n\n             [,1]        [,2]        [,3]         [,4]\n[1,]  1.000000000 -0.00574905 0.009783835 -0.023569599\n[2,] -0.005749050  1.00000000 0.049500977  0.010347672\n[3,]  0.009783835  0.04950098 1.000000000  0.005859748\n[4,] -0.023569599  0.01034767 0.005859748  1.000000000\n\nNext, we specify our desired correlation matrix. Just to put this in words, we want to correlate the four variables age, balance, kids_cnt and tenure. Each variable with itself has a correlation of 1. We want age and balance to have a positive correlation of 0.3, age and kids_cnt of 0.4 and age and tenure of 0.2. Likewise, we specify all desired correlations between pairs of variables.\n\n\nQ <- matrix(c(1,0.3,0.4,0.2,  0.3,1,-0.3,0.3,  0.4,-0.3,1,-0.3,  0.2,0.3,-0.3,1),ncol=nvars)\n\nQ\n\n\n     [,1] [,2] [,3] [,4]\n[1,]  1.0  0.3  0.4  0.2\n[2,]  0.3  1.0 -0.3  0.3\n[3,]  0.4 -0.3  1.0 -0.3\n[4,]  0.2  0.3 -0.3  1.0\n\nWe can now multiply the rnorm_helper matrix with the Cholesky decomposition of our desired correlation matrix Q. Why this works, is explained in the following comment. If you are not interested in mathematical details, you can skip this part.\n\n(Explanation found here)\n\n\nL <- t(chol(Q))\nZ <- L %*% rnorm_helper\n\n\n\nGood, now we convert this new data to a data frame and name it like our original data.\n\n\nraw <- as.data.frame(t(Z),row.names=NULL,optional=FALSE)\nnames(raw) <- names(data)\n\nhead(raw,7,addrownums=FALSE)\n\n\n         age     balance    kids_cnt     tenure\n1 -0.9619334 -0.56763178 -0.04795672 -1.3731410\n2  0.1957828  0.08747126  0.13371210  1.0071453\n3 -1.2188574  0.84333548 -1.64422257 -0.6774232\n4 -0.7163585  0.02610745 -0.27556113 -0.4031339\n5 -0.9530173 -0.90428943  0.88834971 -0.5867759\n6 -0.5784837 -1.07244273  0.01971809 -1.7605861\n7 -0.4844551 -0.85227479  1.06544301  0.2243580\n\nThe correlation of this dataset is close to our desired outcome.\n\n\ncor(raw)\n\n\n               age    balance   kids_cnt     tenure\nage      1.0000000  0.2937627  0.4053011  0.1707997\nbalance  0.2937627  1.0000000 -0.2590168  0.2802119\nkids_cnt 0.4053011 -0.2590168  1.0000000 -0.3038721\ntenure   0.1707997  0.2802119 -0.3038721  1.0000000\n\nHowever, this dataset raw does not have anything to do with our original data. It is still only transformed random normal data. But as we know that this dataset has the correct correlation, we can use this to reorder the rows of our other dataset.\nAnd then we just replace the largest value of the random normal dataset with the largest value in our dataset, the second largest with the second largest etc. We go column by column and repeat this procedure.\n\n\nfor(name in names(raw)) {\n  raw <- raw[order(raw[,name]),]\n  data <- data[order(data[,name]),]\n  raw[,name] <- data[,name]\n}\n\n\n\nLet’s check the correlation of this new dataset. It is close to our desired correlation matrix Q. The main reason for the small difference is that our variables take less values than a random normal distributed variable (e.g. kids count just takes values between 0 and 6).\n\n\ncor(raw)\n\n\n               age    balance   kids_cnt     tenure\nage      1.0000000  0.2423117  0.3777257  0.1743281\nbalance  0.2423117  1.0000000 -0.2010457  0.2390589\nkids_cnt 0.3777257 -0.2010457  1.0000000 -0.2803064\ntenure   0.1743281  0.2390589 -0.2803064  1.0000000\n\n\nTo compare: This was Q:\n\n     [,1] [,2] [,3] [,4]\n[1,]  1.0  0.3  0.4  0.2\n[2,]  0.3  1.0 -0.3  0.3\n[3,]  0.4 -0.3  1.0 -0.3\n[4,]  0.2  0.3 -0.3  1.0\n\nOur final reshuffled and correctly correlated dataset is now stored in raw.\n\n\nhead(raw,7,addrownums=FALSE)\n\n\n     age balance kids_cnt tenure\n1934  34   36.36        4      1\n733   37   52.44        2      1\n123   22  290.91        2      1\n1032  26  130.01        2      1\n1463  32   88.87        2      1\n448   43   26.54        5      1\n1804  35  911.63        1      2\n\nClosing comments\nIf you like the correlation method please take a look at the GenOrd package which is a little more professional, when working with ordinal categorical variables.\nThe Cholesky decomposition is only possible for positive definite matrices. If this is not the case and you accept a slightly stronger deviation from your desired correlation matrix, the easiest way is to add 0.1, 0.2 etc. to the diagonals until you obtain a positive definite matrix. Note that this lowers the correlation between all variables.\n\n\ndiag(nvars) * 0.1 + Q\n\n\n     [,1] [,2] [,3] [,4]\n[1,]  1.1  0.3  0.4  0.2\n[2,]  0.3  1.1 -0.3  0.3\n[3,]  0.4 -0.3  1.1 -0.3\n[4,]  0.2  0.3 -0.3  1.1\n\nAfter the correlation process it might be helpful to check some of your data manually to see if the observation make sense and - if needed - perform manual corrections.\n\n\n\n",
    "preview": "posts/2020-11-01-simulate-dependent-variables/simulate-dependent-variables_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-10-09-data-simulation/",
    "title": "Simulate variables and data",
    "description": "The purpose of this post is to enable readers to create data from scratch which they can use for their analyses or visualizations.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2020-10-09",
    "categories": [
      "simulation",
      "distributions"
    ],
    "contents": "\n\nContents\nPackages\nData simulation\nManual values\nCategorical variables with sample()\nNumerical variables\nDistributions\nCombining variables in a dataframe\n\nPackages\nMost of the functions that we are using here are part of base R.\nWe will need some functions from the {dplyr} and {ggplot2} packages for quick visualizations, but these are optional.\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\n\nData simulation\nIn this post we will learn how to simulate data like this:\n\n  client_id    name age  ocupation balance married_flg\n1         1   Frank  26 sr analyst  245.96          No\n2         2  Dorian  26    analyst 2273.39          No\n3         3     Eva  18    manager 2270.47          No\n4         4   Elena  34    analyst  373.45          No\n5         5    Andy  18    analyst  961.21         Yes\n6         6 Barbara  28    analyst   69.32         Yes\n7         7  Yvonne  37    analyst 3218.13         Yes\n\nImportant to make your data creation reproducible (i.e. if you run it again, it yields the same result) is the set.seed() function. As we are creating instances of random variables we assure with this function that every time the same sequence of random variables is generated. You can use any number you like inside this function.\n\n\nset.seed(64)\n\n\n\nManual values\nLet’s start with the most simple but most time-consuming way. Type everything manually and save it in a vector:\n\n\nclient_gen <- c(\"Millenial\",\"Gen X\",\"Millenial\",\n                \"Baby Boomer\",\"Gen X\",\"Millenial\",\"Gen X\")\n\ndata.frame(id=1:7,client_gen)\n\n\n  id  client_gen\n1  1   Millenial\n2  2       Gen X\n3  3   Millenial\n4  4 Baby Boomer\n5  5       Gen X\n6  6   Millenial\n7  7       Gen X\n\nCategorical variables with sample()\nFor categorical variables, we can save some time using the sample function. You specify first the possible values and then how many of these values you would like to pick. If you want to allow values to be picked more than once, make sure to set replace=TRUE.\n\n\nclient_gen <- sample(c(\"Millenial\",\"Gen X\",\"Baby Boomer\"),7,replace=TRUE)\n\ndata.frame(id=1:7,client_gen)\n\n\n  id  client_gen\n1  1 Baby Boomer\n2  2   Millenial\n3  3   Millenial\n4  4   Millenial\n5  5       Gen X\n6  6   Millenial\n7  7       Gen X\n\nThe sample function is quite flexible and we can tweak the prob parameter, for example to say that we want (approximately) half of the population to be Baby Boomers. The effect will be visible if we produce larger amounts of data.\n\n\nclient_gen <- sample(c(\"Millenial\",\"Gen X\",\"Baby Boomer\"), 1000, replace=TRUE, prob=c(0.25,0.25,0.5))\n\nqplot(client_gen)\n\n\n\n\nNumerical variables\nThe same sample() function works with numbers.\n\n\nclient_age <- sample(1:100,size=7,replace=TRUE)\n\ndata.frame(id=1:7,client_age)\n\n\n  id client_age\n1  1          4\n2  2         42\n3  3         33\n4  4         62\n5  5         76\n6  6         65\n7  7         81\n\nIn both cases above, each number had the same probability of being selected. If we would like some numbers to be more likely to be selected, we can specify this with prob.\nThe probability values will be automatically scaled to 1. If I would like to have 50% of the population to have the age of 27, I can specify the weight. (Note: rep(1,5) is equivalent to c(1,1,1,1,1), replicating the number 1 five times.)\n\n\nclient_age <- sample(1:100,size=1000,replace=TRUE,prob=c(rep(1,26),99,rep(1,73)))\n\nqplot(client_age==27)\n\n\n\n\nDistributions\nIf you would like to work with probability distributions to create numerical variable, this is also very easy with the base functions of type r+(starting letters of the distribution).\nLet’s try the uniform distribution:\n\n\nclient_age <- runif(7,min=1,max=100)\n\ndata.frame(id=1:7,client_age)\n\n\n  id client_age\n1  1   55.10342\n2  2   85.19588\n3  3   86.47791\n4  4   73.91516\n5  5   48.15197\n6  6   32.90848\n7  7   58.76874\n\nAs we are simulating ages, we are not interested in decimal values. We can use the round() function to round each number to the next integer.\n\n\nrunif(10000,1,100) %>% round() %>% head(10)\n\n\n [1] 93 26 28 29 90 81 95  3 21 62\n\nBut uniformly distributed variables are not always what we want. In the example above we simulated 10,000 clients and distributes their ages uniformly. For most applications it would be unrealistic that there are as many 99 year old clients as there are 50 year old clients.\nBut we can easily access a whole list of other distribution functions, like the famous Normal distribution (with mean and standard deviation as parameters).\n\n\nrnorm(10000,mean=50,sd=20) %>% qplot()\n\n\n\n\nIf we want to limit the values to not be smaller than 0 or larger than 100, we can use pmin and pmax.\n\n\nrnorm(10000,mean=50,sd=20) %>% pmax(0) %>% pmin(100) %>% qplot()\n\n\n\n\nFor many applications (like balance distribution or any data that contains outliers) I like to use the Exponential distribution (with parameter rate and expectation 1/rate).\n\n\nrexp(10000,rate=0.01) %>% qplot()\n\n\n\n\nIf you want to explore further probability distributions check out this link. Playing around with the parameters of the distributions you will notice that you can simulate almost any variable you like (Take a short look at: The different faces of the Beta distribution).\n\n\n\nCombining variables in a dataframe\nTo create our first simulated dataframe, we can start by simulating the variables separately and then putting them together.\n\n\nset.seed(61)\n\nk <- 7\n\nid <- 1:k\nname <- c(\"Frank\",\"Dorian\",\"Eva\",\"Elena\",\"Andy\",\"Barbara\",\"Yvonne\")\nage <- rnorm(k,mean=30,sd=10) %>% pmax(18) %>% round()\nocupation <- sample(c(\"analyst\",\"manager\",\"sr analyst\"),k,replace=T,prob=c(10,2,3))\nbalance <- rexp(k,rate=0.001) %>% round(2)\nmarried <- sample(c(\"Yes\",\"No\"),k,replace=T,prob=c(0.6,0.4))\n\ndata <- data.frame(client_id=id,name,age,ocupation,balance,married_flg=married)\ndata\n\n\n  client_id    name age  ocupation balance married_flg\n1         1   Frank  26 sr analyst  245.96          No\n2         2  Dorian  26    analyst 2273.39          No\n3         3     Eva  18    manager 2270.47          No\n4         4   Elena  34    analyst  373.45          No\n5         5    Andy  18    analyst  961.21         Yes\n6         6 Barbara  28    analyst   69.32         Yes\n7         7  Yvonne  37    analyst 3218.13         Yes\n\nGreat! We just simulated a dataset which we can use now for visualization or modeling purposes.\n\n\n\n",
    "preview": "posts/2020-10-09-data-simulation/data-simulation_files/figure-html5/unnamed-chunk-14-1.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-10-09-fuzzy-merging/",
    "title": "Fuzzy matching example with company names",
    "description": "Whenever you have text data that was input manually by a human, there is a chance that it contains errors: Typos, abbreviations or different ways of writing can be challenges for your analysis. Fuzzy matching is a way to find inexact matches that mean the same thing like mcdonalds, McDonalds and McDonald's Company.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2020-10-09",
    "categories": [
      "text data",
      "fuzzy matching",
      "stringdist"
    ],
    "contents": "\n\nContents\nPackages\nThe data\nMain process\nResults\nNext Steps and other resources\n\nPackages\nThe only packages you need are dplyr and stringdist.\n\n\nlibrary(dplyr)\nlibrary(stringdist)\n\n\n\nThe data\nThis method requires as input two lists. To distinguish them, we will call the one that contains the handtyped input as the “dirty list”. The reference list will be called the “clean list”. In this blogpost I will create the dirty list by hand with a few made-up examples of alternative company names.\n\n\nnames <- c(\"Haliburton\", \"ExxonMobile\",\"ABBOTT LABORATORIES\",\"Marrriott\",\"Self\",\"Activision Blizzard\",\n           \"Quest dianotstics\",\"Unemployed\",\"other company\",\"burger king\",\n           \"MARRIOT\",\"wall mart\", \"Illumin\", \"3M\",\"NORTHROP TRUMMON\",\"MCCormicks\",\"MARSH MCLEANNON\",\n           \"FLO SERVE\", \"Kansas City Southern Fed.\",\"MCDONALD'S\",\"F5 Networks\",\n           \"McDonalds\",\"MacKindsey\",\"Oracle\",\"Self-employed\",\"None\",\"Retired\",\n           \"f5 networks\",\"Harley Davidson\",\"Harly Davidson\",\"HARLEY DAVIDSEN\",\"DRHorton\",\"D.R. Horten\",\n           \"cincinati fin\",\"cincinnatti financials\",\"cincinnati financial\",\"CINCINATTI FINANCE\",\n           \"Mohaws Industry\",\"Mowahk Industries\",\"Mohawk Ind\")\n\nset.seed(64)\ndirty_list <- sample(names,50000,replace=T)\n\n\n\n\ndirty_list\nHaliburton\nExxonMobile\nABBOTT LABORATORIES\nMarrriott\nSelf\nActivision Blizzard\nQuest dianotstics\nUnemployed\nother company\nburger king\n\nAs a clean list we will use the list of S&P500 companies. This can be downloaded or scraped from the internet.\n\nclean_list\n3M Company\nAbbott Laboratories\nAbbVie Inc.\nABIOMED Inc\nAccenture plc\nActivision Blizzard\nAdobe Systems Inc\nAdvanced Micro Devices Inc\nAdvance Auto Parts\nAES Corp\n\nBefore we start, we will pre-process both lists, remove some common words and transform everything to lower case. If you prefer, you can also use the {stringr} package for this. One comment from my experience: Usually, the construction of the common words to remove is an iterative approach: You would check your final result and see which words are still causing problems. Then you add them to the cleaner function and run the process again until you are satisfied with the results.\n\n\ncleaner <- function(vec) {\n  wordremove <- c(\" and \",\" comp \",\" company\",\"companies\",\" corp \",\"corporation\",\" inc \",\"[.]com\")\n  output <- vec %>% tolower() %>% \n    {gsub(paste(wordremove,collapse='|'),\"\",.)} %>%\n    {gsub(\"[[:punct:]]\",\"\",.)} %>%\n    {gsub(\"[[:blank:]]\",\"\",.)}\n  return(output)\n}\n\ncontrol <- data.frame(original=dirty_list)\n\nclean_list_cl <- cleaner(clean_list)\ndirty_list_cl <- cleaner(dirty_list)\n\n\n\nMain process\nWe calculate a matrix of string distances. The {stringdist} package has a lot of different methods implemented which can be checked here. After comparing some of the methods I decided to go with the Jaro-Winkler distance as it yields higher similarity for words which start with the same letters.\nExample\n\n\nstringdistmatrix(c(\"other\",\"words\",\"otherexample\",\"exapmle\"),\n                 c(\"example\",\"other example\",\"word\"),\n                 method='jw',p=0.1,useNames=\"strings\")\n\n\n                example other example      word\nother        1.00000000    0.12307692 0.5166667\nwords        1.00000000    0.48205128 0.0400000\notherexample 0.28174603    0.01538462 0.4444444\nexapmle      0.03333333    0.55799756 1.0000000\n\nEach row of the matrix of string distances is one string from the dirty list. We find the minimum in each row, which is equivalent to the best fit from the clean list.\n\n\ndistmatrix <- stringdist::stringdistmatrix(dirty_list_cl,clean_list_cl,method='jw',p=0.1)\nbest_fit <- apply(distmatrix,1,which.min) %>% as.integer()\nsimilarity <- apply(distmatrix,1,min)\n\ncontrol$best_fit <- clean_list[best_fit]\ncontrol$distance <- round(similarity,3)\n\n\n\n\noriginal\nbest_fit\ndistance\nMarrriott\nMarriott Int’l.\n0.089\nRetired\nResMed\n0.203\nSelf\nSealed Air\n0.244\nHaliburton\nHalliburton Co.\n0.054\nF5 Networks\nF5 Networks\n0.000\nMarrriott\nMarriott Int’l.\n0.089\nIllumin\nIllumina Inc\n0.073\nMohaws Industry\nMohawk Industries\n0.113\nMARSH MCLEANNON\nMarsh & McLennan\n0.030\nSelf-employed\nTeleflex\n0.306\n\nResults\nWhen we order the control dataframe by similarity we can find a suitable cutoff value (in this example 0.12) to separate real matches from false positives. This cutoff value depends on the application.\n\n\ncontrol$result <- ifelse(control$distance<=0.12,control$best_fit,NA)\n\n\n\n\noriginal\nbest_fit\ndistance\nresult\nMarrriott\nMarriott Int’l.\n0.089\nMarriott Int’l.\nRetired\nResMed\n0.203\nNA\nSelf\nSealed Air\n0.244\nNA\nHaliburton\nHalliburton Co.\n0.054\nHalliburton Co.\nF5 Networks\nF5 Networks\n0.000\nF5 Networks\nIllumin\nIllumina Inc\n0.073\nIllumina Inc\nMohaws Industry\nMohawk Industries\n0.113\nMohawk Industries\nMARSH MCLEANNON\nMarsh & McLennan\n0.030\nMarsh & McLennan\nSelf-employed\nTeleflex\n0.306\nNA\nMohawk Ind\nMohawk Industries\n0.088\nMohawk Industries\nMowahk Industries\nMohawk Industries\n0.017\nMohawk Industries\nHarly Davidson\nHarley-Davidson\n0.014\nHarley-Davidson\nf5 networks\nF5 Networks\n0.000\nF5 Networks\n3M\n3M Company\n0.000\n3M Company\nOracle\nOracle Corp.\n0.080\nOracle Corp.\n\nNext Steps and other resources\nImprove performance for large datasets. On Github, I have an implementation of this method with the parallel package which improves performance slightly. But there is definitely more room for improvement.\nThere is an interesting video about performance improvement by not calculating the full matrix by Seth Verrinder and Kyle Putnam here.\nAndrés Cruz created an Add-in which helps to fine-tune the final result, his slide from LatinR 2019 can be found here.\nCheck out David Robinson’s fuzzyjoin package here.\n\n\n\n",
    "preview": "posts/2020-10-09-fuzzy-merging/img/puzzle.png",
    "last_modified": "2021-11-28T15:19:43+01:00",
    "input_file": {}
  }
]
