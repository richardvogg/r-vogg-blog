[
  {
    "path": "posts/2020-12-03-simulate-dependent-variables/",
    "title": "Simulate dependent variables",
    "description": "When you simulate a dataset it is often not enough to have independent variables, but you  want to have some dependency between the variables. In this post we explore ways of creating this dependency.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2020-12-03",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nPackages\r\nSimulating dependent variablesRule based\r\nCorrelation based\r\n\r\nClosing comments\r\n\r\nPackages\r\nMost of the functions that we are using here are actually part of base R.\r\nWe will need some functions from the {dplyr} and {ggplot2} packages for quick visualizations, but these are optional.\r\n\r\n\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\n\r\n\r\n\r\nSimulating dependent variables\r\nIf we want to have a dataset that “makes sense” from a real world perspective, wouldn’t it be great if managers in general had higher balances than junior analysts? Or if 18 years old clients are less likely to be married than 30 years olds? This does not mean that no 18 years old can be married in our dataset, but if we look at the average, we would expect a difference between both groups. In this section we are going to have a look at techniques to create dependence between variables.\r\nRule based\r\nWe can use ifelse() and case_when() from the {dplyr} package to create new variables that depend on others. Let’s make a small example with two columns which depend on each other: married, which indicates if the person is married, and age.\r\nWe will simulate 1000 clients, around 50% of which are married.\r\n\r\n\r\nk <- 1000\r\nmarried <- sample(c(\"Y\",\"N\"),k,replace=T)\r\n\r\n\r\n\r\nNext, we want that our married clients are slightly older than our non-married clients. Without doing further research, we just assume that the average age of the married clients is 45, and the average age of the non-married clients is 30.\r\n\r\n\r\ndata <- data.frame(id=1:k,married) %>% \r\n  mutate(\r\n    age=ifelse(married==\"Y\",rnorm(k,40,8),rnorm(k,30,12)) %>% \r\n      pmax(18) %>% #every client should be at least 18\r\n      round()\r\n    )\r\n\r\nhead(data)\r\n\r\n\r\n  id married age\r\n1  1       Y  46\r\n2  2       Y  42\r\n3  3       N  32\r\n4  4       Y  50\r\n5  5       N  34\r\n6  6       N  44\r\n\r\nWe can take a quick look if the difference is visible in a boxplot.\r\n\r\n\r\n\r\nIf you have more than two options, case_when() can help. We want to see the balance of clients which are either managers, analysts or senior analysts.\r\n\r\n\r\nk <- 1000\r\n\r\nocupation <- sample(c(\"analyst\",\"manager\",\"sr analyst\"),k,replace=T,prob=c(10,2,3))\r\n\r\ndata <- data.frame(id=1:k,ocupation)\r\n\r\ndata <- data %>% mutate(balance=case_when(\r\n  ocupation==\"analyst\" ~ 100+rexp(k,0.01),\r\n  ocupation==\"sr analyst\" ~ 200+rexp(k,0.005),\r\n  TRUE ~ 400+rexp(k,0.001) #this is the else case\r\n))\r\n\r\n#Check the average balance per group\r\ndata %>% \r\n  ggplot(aes(x=ocupation,y=balance))+geom_violin()\r\n\r\n\r\n\r\n\r\nCorrelation based\r\nIf we just deal with numeric variables and want to have a slightly more complex connection between the variables, we can also try another approach, for which we specify a correlation matrix beforehand and reorder our variables afterwards so that they match the desired correlation.\r\nOf course, we need to find reasonable correlation values, for example between age and number of kids (slightly positively correlated) or between savings and number of kids (slightly negatively correlated). This might require some research.\r\nFirst, we simulate the data independently. Ideas about how to do this can be found in this blogpost.\r\n\r\n\r\nset.seed(64)\r\n\r\nk <- 2000\r\n\r\nage <- rnorm(k,mean=35,sd=10) %>% pmax(18) %>% round()\r\nbalance <- rexp(k,rate=0.001) %>% round(2)\r\ntenure <- rnorm(k,mean=15,sd=5) %>% pmax(1) %>% round()\r\nkids_cnt <- sample(0:5,k,replace=T,prob=c(100,120,80,30,5,1))\r\n\r\n\r\ndata <- data.frame(age,balance,kids_cnt,tenure)\r\ndata %>% head(7)\r\n\r\n\r\n  age balance kids_cnt tenure\r\n1  18 3665.34        2     10\r\n2  18  268.55        2      8\r\n3  22 1628.59        0     22\r\n4  50 1995.58        1     12\r\n5  35 1510.58        0     20\r\n6  32   58.58        0      5\r\n7  45  945.11        0     21\r\n\r\nWe directly see that there are things that don’t make too much sense, like the 22-years-old with a tenure of 22 years. Further, there is no dependence between the variables.\r\nTo improve this, we want to reshuffle the rows and get a correlation close to a desired one. First we simulate a helping dataset of same size, where every entry is random normal distributed.\r\n\r\n\r\nnvars <- ncol(data)\r\nnumobs <- nrow(data)\r\n\r\nset.seed(3)\r\nrnorm_helper <- matrix(rnorm(nvars*numobs,0,1),nrow=nvars)\r\n\r\n\r\n\r\nThe correlation of this matrix should be close to the identity matrix.\r\n\r\n\r\ncor(t(rnorm_helper))\r\n\r\n\r\n             [,1]        [,2]        [,3]         [,4]\r\n[1,]  1.000000000 -0.00574905 0.009783835 -0.023569599\r\n[2,] -0.005749050  1.00000000 0.049500977  0.010347672\r\n[3,]  0.009783835  0.04950098 1.000000000  0.005859748\r\n[4,] -0.023569599  0.01034767 0.005859748  1.000000000\r\n\r\nNext, we specify our desired correlation matrix. Just to put this in words, we want to correlate the four variables age, balance, kids_cnt and tenure. Each variable with itself has a correlation of 1. We want age and balance to have a positive correlation of 0.3, age and kids_cnt of 0.4 and age and tenure of 0.2. Likewise, we specify all desired correlations between pairs of variables.\r\n\r\n\r\nQ <- matrix(c(1,0.3,0.4,0.2,  0.3,1,0,0.3,  0.4,0,1,-0.3,  0.2,0.3,-0.3,1),ncol=nvars)\r\n\r\nQ\r\n\r\n\r\n     [,1] [,2] [,3] [,4]\r\n[1,]  1.0  0.3  0.4  0.2\r\n[2,]  0.3  1.0  0.0  0.3\r\n[3,]  0.4  0.0  1.0 -0.3\r\n[4,]  0.2  0.3 -0.3  1.0\r\n\r\nWe can now multiply the rnorm_helper matrix with the Cholesky decomposition of our desired correlation matrix Q. Why this works, is explained in the following comment. If you are not interested in mathematical details, you can skip this part.\r\n\r\n(Explanation found here)\r\n\r\n\r\nL <- t(chol(Q))\r\nZ <- L %*% rnorm_helper\r\n\r\n\r\n\r\nGood, now we convert this new data to a data frame and name it like our original data.\r\n\r\n\r\nraw <- as.data.frame(t(Z),row.names=NULL,optional=FALSE)\r\nnames(raw) <- names(data)\r\n\r\nhead(raw,7,addrownums=FALSE)\r\n\r\n\r\n         age     balance   kids_cnt     tenure\r\n1 -0.9619334 -0.56763178 -0.1130367 -1.3627041\r\n2  0.1957828  0.08747126  0.1520695  0.9806283\r\n3 -1.2188574  0.84333548 -1.3231141 -0.6184486\r\n4 -0.7163585  0.02610745 -0.1802922 -0.4043929\r\n5 -0.9530173 -0.90428943  0.8118207 -0.6505000\r\n6 -0.5784837 -1.07244273 -0.2978104 -1.7172915\r\n7 -0.4844551 -0.85227479  0.9530955  0.1474831\r\n\r\nThe correlation of this dataset is close to our desired outcome.\r\n\r\n\r\ncor(raw)\r\n\r\n\r\n               age    balance    kids_cnt     tenure\r\nage      1.0000000 0.29376273  0.39741190  0.1708577\r\nbalance  0.2937627 1.00000000  0.04302845  0.2777607\r\nkids_cnt 0.3974119 0.04302845  1.00000000 -0.3046079\r\ntenure   0.1708577 0.27776070 -0.30460794  1.0000000\r\n\r\nHowever, this dataset raw does not have anything to do with our original data. It is still only transformed random normal data. But as we know that this dataset has the correct correlation, we can use this to reorder the rows of our other dataset.\r\nAnd then we just replace the largest value of the random normal dataset with the largest value in our dataset, the second largest with the second largest etc. We go column by column and repeat this procedure.\r\n\r\n\r\nfor(name in names(raw)) {\r\n  raw <- raw[order(raw[,name]),]\r\n  data <- data[order(data[,name]),]\r\n  raw[,name] <- data[,name]\r\n}\r\n\r\n\r\n\r\nLet’s check the correlation of this new dataset. It is close to our desired correlation matrix. The main reason for the small difference is that our variables take less values than a random normal distributed variable (e.g. kids count just takes values between 0 and 5).\r\n\r\n\r\ncor(raw)\r\n\r\n\r\n               age    balance    kids_cnt     tenure\r\nage      1.0000000 0.24231169  0.36996781  0.1734406\r\nbalance  0.2423117 1.00000000  0.01880674  0.2358795\r\nkids_cnt 0.3699678 0.01880674  1.00000000 -0.3038222\r\ntenure   0.1734406 0.23587953 -0.30382217  1.0000000\r\n\r\nQ\r\n\r\n\r\n     [,1] [,2] [,3] [,4]\r\n[1,]  1.0  0.3  0.4  0.2\r\n[2,]  0.3  1.0  0.0  0.3\r\n[3,]  0.4  0.0  1.0 -0.3\r\n[4,]  0.2  0.3 -0.3  1.0\r\n\r\nOur final reshuffled and correctly correlated dataset is now stored in raw.\r\n\r\n\r\nhead(raw,7,addrownums=FALSE)\r\n\r\n\r\n     age balance kids_cnt tenure\r\n1934  34   36.36        3      1\r\n733   37   52.44        1      1\r\n123   22  290.91        2      1\r\n1032  26  130.01        2      1\r\n1463  32   88.87        2      1\r\n448   43   26.54        4      1\r\n1804  35  911.63        2      2\r\n\r\nClosing comments\r\nIf you like the correlation method please take a look at the GenOrd package which is a little more professional, when working with ordinal categorical variables.\r\nThe Cholesky decomposition is only possible for positive definite matrices. If this is not the case and you accept a slightly stronger deviation from your desired correlation matrix, the easiest way is to add 0.1, 0.2 etc. to the diagonals until you obtain a positive definite matrix. Note that this lowers the correlation between all variables.\r\n\r\n\r\ndiag(nvars) * 0.1 + Q\r\n\r\n\r\n     [,1] [,2] [,3] [,4]\r\n[1,]  1.1  0.3  0.4  0.2\r\n[2,]  0.3  1.1  0.0  0.3\r\n[3,]  0.4  0.0  1.1 -0.3\r\n[4,]  0.2  0.3 -0.3  1.1\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-03-simulate-dependent-variables/simulate-dependent-variables_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2020-12-29T11:43:03+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-12-03-useful-packages-for-data-composition/",
    "title": "Useful packages for data simulation",
    "description": "We will explore the packages wakefield, rcorpora, charlatan, fabricatr, and GenOrd which can be helpful for data simulation.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2020-12-03",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nAdditional packages\r\nwakefieldSeries\r\n\r\nrcorpora\r\ncharlatan\r\nfabricatrOrdered data\r\nTime series\r\n\r\nGenOrd\r\nMore packages\r\n\r\nWhen we simulate data we can rely on the distribution functions like rnorm, rexp and sample from base R. However, we can also leverage the great work from authors of packages which were written to make the simulation process easier. In this blogpost I will explore some of them.\r\nAdditional packages\r\nBefore starting with the simulation packages, we can load these two packages which will help with data transformation and visualization.\r\n\r\n\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\n\r\n\r\n\r\nwakefield\r\nLooking for interesting packages around data simulation I stumbled across the {wakefield} package by Tyler Rinker.\r\n\r\n\r\nlibrary(wakefield)\r\n\r\n\r\n\r\nIntroduction can be found here.\r\n\r\n\r\nr_data_frame(\r\n    n = 500,\r\n    id,\r\n    age,\r\n    iq,\r\n    height,\r\n    died,\r\n    animal,\r\n    internet_browser,\r\n    political\r\n)\r\n\r\n\r\n# A tibble: 500 x 8\r\n   ID      Age    IQ Height Died  Animal             Browser Political\r\n   <chr> <int> <dbl>  <dbl> <lgl> <fct>              <fct>   <fct>    \r\n 1 001      74    99     72 FALSE Warthog            Firefox Republic~\r\n 2 002      26    91     69 FALSE Dwarf Crocodile    Firefox Democrat \r\n 3 003      59   100     65 FALSE Warthog            Safari  Democrat \r\n 4 004      49   112     69 TRUE  Eastern Lowland G~ Android Republic~\r\n 5 005      69    85     63 FALSE Scorpion Fish      Safari  Republic~\r\n 6 006      22   102     67 FALSE Staffordshire Bul~ IE      Republic~\r\n 7 007      49    86     69 TRUE  Staffordshire Bul~ IE      Democrat \r\n 8 008      31   104     70 FALSE Dwarf Crocodile    Firefox Republic~\r\n 9 009      78    90     65 TRUE  Dugong             Safari  Republic~\r\n10 010      54   107     64 TRUE  Dwarf Crocodile    Chrome  Democrat \r\n# ... with 490 more rows\r\n\r\nThere are a lot of predefined variables that you can use. (Call variables(type=\"matrix\",ncols=5) to see them.)\r\n\r\n      [,1]         [,2]          [,3]               [,4]       \r\n [1,] \"age\"        \"dice\"        \"hair\"             \"military\" \r\n [2,] \"animal\"     \"dna\"         \"height\"           \"month\"    \r\n [3,] \"answer\"     \"dob\"         \"income\"           \"name\"     \r\n [4,] \"area\"       \"dummy\"       \"internet_browser\" \"normal\"   \r\n [5,] \"car\"        \"education\"   \"iq\"               \"political\"\r\n [6,] \"children\"   \"employment\"  \"language\"         \"race\"     \r\n [7,] \"coin\"       \"eye\"         \"level\"            \"religion\" \r\n [8,] \"color\"      \"grade\"       \"likert\"           \"sat\"      \r\n [9,] \"date_stamp\" \"grade_level\" \"lorem_ipsum\"      \"sentence\" \r\n[10,] \"death\"      \"group\"       \"marital\"          \"sex\"      \r\n      [,5]           \r\n [1,] \"sex_inclusive\"\r\n [2,] \"smokes\"       \r\n [3,] \"speed\"        \r\n [4,] \"state\"        \r\n [5,] \"string\"       \r\n [6,] \"upper\"        \r\n [7,] \"valid\"        \r\n [8,] \"year\"         \r\n [9,] \"zip_code\"     \r\n[10,]                \r\nattr(,\"class\")\r\n[1] \"matrix\" \"array\" \r\n\r\nAdditionally, you can access the distribution functions easily and tweak parameters of the predefined functions.\r\n\r\n\r\ntest <- r_data_frame(\r\n    n = 500,\r\n    id,\r\n    age(x=18:50),\r\n    `Reading(mins)` = rpois(lambda=20),\r\n    income(digits=0)\r\n)\r\n\r\n\r\n\r\n\r\nID\r\nAge\r\nReading(mins)\r\nIncome\r\n001\r\n31\r\n21\r\n29572\r\n002\r\n31\r\n19\r\n29690\r\n003\r\n24\r\n19\r\n24591\r\n004\r\n34\r\n26\r\n39138\r\n005\r\n30\r\n24\r\n41837\r\n006\r\n32\r\n18\r\n31931\r\n007\r\n47\r\n19\r\n14845\r\n008\r\n31\r\n17\r\n22088\r\n009\r\n22\r\n16\r\n40642\r\n010\r\n20\r\n22\r\n20101\r\n011\r\n50\r\n18\r\n130249\r\n012\r\n28\r\n25\r\n8917\r\n013\r\n42\r\n19\r\n31203\r\n014\r\n50\r\n31\r\n42722\r\n015\r\n18\r\n21\r\n43318\r\n016\r\n21\r\n17\r\n17164\r\n017\r\n33\r\n23\r\n37262\r\n018\r\n48\r\n20\r\n30679\r\n019\r\n20\r\n19\r\n18346\r\n020\r\n45\r\n18\r\n71781\r\n021\r\n27\r\n21\r\n28637\r\n022\r\n25\r\n16\r\n49554\r\n023\r\n29\r\n20\r\n134497\r\n024\r\n27\r\n18\r\n22025\r\n025\r\n18\r\n22\r\n45968\r\n026\r\n35\r\n23\r\n60546\r\n027\r\n48\r\n20\r\n57731\r\n028\r\n41\r\n29\r\n130781\r\n029\r\n21\r\n16\r\n22688\r\n030\r\n26\r\n24\r\n35453\r\n031\r\n39\r\n21\r\n14458\r\n032\r\n22\r\n29\r\n69925\r\n033\r\n18\r\n19\r\n16388\r\n034\r\n32\r\n21\r\n58499\r\n035\r\n43\r\n20\r\n48959\r\n036\r\n48\r\n22\r\n22624\r\n037\r\n18\r\n23\r\n45541\r\n038\r\n30\r\n17\r\n10347\r\n039\r\n21\r\n20\r\n9688\r\n040\r\n22\r\n21\r\n22380\r\n041\r\n25\r\n19\r\n41525\r\n042\r\n20\r\n26\r\n39067\r\n043\r\n38\r\n15\r\n39220\r\n044\r\n18\r\n22\r\n33482\r\n045\r\n36\r\n28\r\n74593\r\n046\r\n18\r\n22\r\n32763\r\n047\r\n19\r\n18\r\n43814\r\n048\r\n21\r\n20\r\n86319\r\n049\r\n34\r\n10\r\n61873\r\n050\r\n35\r\n20\r\n38377\r\n051\r\n47\r\n19\r\n64728\r\n052\r\n22\r\n21\r\n27011\r\n053\r\n41\r\n19\r\n50007\r\n054\r\n37\r\n17\r\n9209\r\n055\r\n43\r\n13\r\n50423\r\n056\r\n50\r\n17\r\n45020\r\n057\r\n28\r\n17\r\n15794\r\n058\r\n26\r\n21\r\n41921\r\n059\r\n49\r\n21\r\n76893\r\n060\r\n21\r\n20\r\n61976\r\n061\r\n41\r\n20\r\n14823\r\n062\r\n45\r\n16\r\n55728\r\n063\r\n41\r\n16\r\n55741\r\n064\r\n50\r\n26\r\n48701\r\n065\r\n21\r\n26\r\n11605\r\n066\r\n37\r\n10\r\n23124\r\n067\r\n23\r\n22\r\n19716\r\n068\r\n35\r\n14\r\n58990\r\n069\r\n29\r\n13\r\n3768\r\n070\r\n32\r\n24\r\n25168\r\n071\r\n32\r\n22\r\n23687\r\n072\r\n21\r\n16\r\n45861\r\n073\r\n41\r\n24\r\n12525\r\n074\r\n32\r\n16\r\n29336\r\n075\r\n50\r\n11\r\n75996\r\n076\r\n36\r\n25\r\n25399\r\n077\r\n36\r\n25\r\n29850\r\n078\r\n21\r\n28\r\n20909\r\n079\r\n47\r\n23\r\n51051\r\n080\r\n18\r\n27\r\n32735\r\n081\r\n44\r\n27\r\n33047\r\n082\r\n46\r\n15\r\n34391\r\n083\r\n20\r\n19\r\n65873\r\n084\r\n39\r\n19\r\n55917\r\n085\r\n30\r\n19\r\n20167\r\n086\r\n24\r\n27\r\n31244\r\n087\r\n43\r\n15\r\n22093\r\n088\r\n27\r\n20\r\n13289\r\n089\r\n23\r\n19\r\n21443\r\n090\r\n40\r\n17\r\n61851\r\n091\r\n21\r\n27\r\n38429\r\n092\r\n24\r\n21\r\n13292\r\n093\r\n31\r\n18\r\n62430\r\n094\r\n21\r\n18\r\n27590\r\n095\r\n34\r\n17\r\n29189\r\n096\r\n21\r\n19\r\n33617\r\n097\r\n41\r\n23\r\n136270\r\n098\r\n25\r\n18\r\n29821\r\n099\r\n20\r\n19\r\n33889\r\n100\r\n24\r\n19\r\n101848\r\n101\r\n34\r\n19\r\n15005\r\n102\r\n40\r\n20\r\n54023\r\n103\r\n37\r\n18\r\n45467\r\n104\r\n50\r\n23\r\n9156\r\n105\r\n40\r\n10\r\n38146\r\n106\r\n48\r\n15\r\n58291\r\n107\r\n40\r\n19\r\n17443\r\n108\r\n38\r\n33\r\n21063\r\n109\r\n19\r\n21\r\n54641\r\n110\r\n26\r\n23\r\n19626\r\n111\r\n26\r\n18\r\n98451\r\n112\r\n43\r\n14\r\n40072\r\n113\r\n25\r\n18\r\n5546\r\n114\r\n27\r\n19\r\n34347\r\n115\r\n27\r\n19\r\n15303\r\n116\r\n42\r\n17\r\n65048\r\n117\r\n43\r\n24\r\n59565\r\n118\r\n38\r\n18\r\n31402\r\n119\r\n18\r\n18\r\n76976\r\n120\r\n47\r\n19\r\n12222\r\n121\r\n36\r\n18\r\n22365\r\n122\r\n45\r\n19\r\n39517\r\n123\r\n23\r\n14\r\n82586\r\n124\r\n43\r\n25\r\n40123\r\n125\r\n29\r\n15\r\n47362\r\n126\r\n21\r\n29\r\n24739\r\n127\r\n46\r\n17\r\n31556\r\n128\r\n36\r\n24\r\n88341\r\n129\r\n39\r\n19\r\n21042\r\n130\r\n27\r\n16\r\n29866\r\n131\r\n45\r\n19\r\n18876\r\n132\r\n41\r\n20\r\n58072\r\n133\r\n41\r\n30\r\n135528\r\n134\r\n46\r\n14\r\n12465\r\n135\r\n19\r\n25\r\n11640\r\n136\r\n23\r\n22\r\n5412\r\n137\r\n46\r\n23\r\n6812\r\n138\r\n30\r\n18\r\n100646\r\n139\r\n29\r\n19\r\n11182\r\n140\r\n39\r\n13\r\n13356\r\n141\r\n44\r\n16\r\n78990\r\n142\r\n19\r\n16\r\n74879\r\n143\r\n28\r\n15\r\n20112\r\n144\r\n22\r\n26\r\n24281\r\n145\r\n50\r\n13\r\n76433\r\n146\r\n47\r\n18\r\n29842\r\n147\r\n49\r\n16\r\n18023\r\n148\r\n26\r\n20\r\n17680\r\n149\r\n38\r\n23\r\n37237\r\n150\r\n18\r\n22\r\n14395\r\n151\r\n43\r\n18\r\n31073\r\n152\r\n23\r\n15\r\n102360\r\n153\r\n18\r\n21\r\n6270\r\n154\r\n21\r\n14\r\n26173\r\n155\r\n22\r\n13\r\n42995\r\n156\r\n21\r\n21\r\n21341\r\n157\r\n24\r\n22\r\n55949\r\n158\r\n31\r\n20\r\n25858\r\n159\r\n47\r\n15\r\n28654\r\n160\r\n38\r\n21\r\n47456\r\n161\r\n22\r\n13\r\n34076\r\n162\r\n42\r\n22\r\n92424\r\n163\r\n28\r\n28\r\n78394\r\n164\r\n41\r\n17\r\n47036\r\n165\r\n28\r\n13\r\n67733\r\n166\r\n24\r\n11\r\n59741\r\n167\r\n48\r\n27\r\n13037\r\n168\r\n31\r\n27\r\n5634\r\n169\r\n35\r\n19\r\n9441\r\n170\r\n37\r\n20\r\n25199\r\n171\r\n21\r\n25\r\n10728\r\n172\r\n22\r\n16\r\n22429\r\n173\r\n47\r\n17\r\n20961\r\n174\r\n28\r\n22\r\n52105\r\n175\r\n29\r\n17\r\n30514\r\n176\r\n30\r\n16\r\n40825\r\n177\r\n42\r\n17\r\n58479\r\n178\r\n23\r\n27\r\n11342\r\n179\r\n31\r\n16\r\n66062\r\n180\r\n46\r\n18\r\n15245\r\n181\r\n41\r\n28\r\n17386\r\n182\r\n40\r\n16\r\n42917\r\n183\r\n35\r\n21\r\n95285\r\n184\r\n27\r\n29\r\n55476\r\n185\r\n36\r\n16\r\n35985\r\n186\r\n36\r\n17\r\n23364\r\n187\r\n18\r\n20\r\n87232\r\n188\r\n21\r\n27\r\n16488\r\n189\r\n18\r\n24\r\n13999\r\n190\r\n31\r\n23\r\n36970\r\n191\r\n36\r\n19\r\n40657\r\n192\r\n23\r\n21\r\n71428\r\n193\r\n20\r\n12\r\n30199\r\n194\r\n36\r\n28\r\n32477\r\n195\r\n43\r\n18\r\n38549\r\n196\r\n19\r\n23\r\n1432\r\n197\r\n41\r\n18\r\n15049\r\n198\r\n39\r\n27\r\n10141\r\n199\r\n24\r\n20\r\n54467\r\n200\r\n27\r\n18\r\n10855\r\n201\r\n18\r\n19\r\n73144\r\n202\r\n31\r\n18\r\n38419\r\n203\r\n24\r\n24\r\n8133\r\n204\r\n50\r\n31\r\n45129\r\n205\r\n49\r\n16\r\n54045\r\n206\r\n33\r\n19\r\n15601\r\n207\r\n25\r\n21\r\n85119\r\n208\r\n50\r\n18\r\n6172\r\n209\r\n34\r\n13\r\n21167\r\n210\r\n28\r\n22\r\n87281\r\n211\r\n30\r\n25\r\n14246\r\n212\r\n50\r\n26\r\n91267\r\n213\r\n37\r\n15\r\n19253\r\n214\r\n36\r\n22\r\n27607\r\n215\r\n33\r\n18\r\n36673\r\n216\r\n20\r\n16\r\n29200\r\n217\r\n26\r\n16\r\n58714\r\n218\r\n34\r\n20\r\n47946\r\n219\r\n40\r\n28\r\n64425\r\n220\r\n27\r\n19\r\n81195\r\n221\r\n43\r\n24\r\n19712\r\n222\r\n34\r\n27\r\n93632\r\n223\r\n43\r\n24\r\n10990\r\n224\r\n29\r\n17\r\n53247\r\n225\r\n33\r\n22\r\n27004\r\n226\r\n45\r\n18\r\n74800\r\n227\r\n31\r\n24\r\n14637\r\n228\r\n50\r\n14\r\n5609\r\n229\r\n33\r\n20\r\n41023\r\n230\r\n39\r\n23\r\n11805\r\n231\r\n31\r\n20\r\n51804\r\n232\r\n50\r\n20\r\n64404\r\n233\r\n50\r\n22\r\n20401\r\n234\r\n50\r\n27\r\n26084\r\n235\r\n28\r\n17\r\n39946\r\n236\r\n27\r\n15\r\n29564\r\n237\r\n43\r\n14\r\n55259\r\n238\r\n23\r\n18\r\n30002\r\n239\r\n46\r\n21\r\n13193\r\n240\r\n29\r\n14\r\n118948\r\n241\r\n36\r\n27\r\n30185\r\n242\r\n39\r\n19\r\n39797\r\n243\r\n26\r\n23\r\n37475\r\n244\r\n26\r\n27\r\n34236\r\n245\r\n43\r\n19\r\n30201\r\n246\r\n47\r\n18\r\n29552\r\n247\r\n43\r\n26\r\n14099\r\n248\r\n32\r\n17\r\n9617\r\n249\r\n39\r\n19\r\n3465\r\n250\r\n47\r\n17\r\n51143\r\n251\r\n24\r\n25\r\n42207\r\n252\r\n26\r\n24\r\n16890\r\n253\r\n18\r\n19\r\n23122\r\n254\r\n29\r\n24\r\n16187\r\n255\r\n34\r\n19\r\n40888\r\n256\r\n41\r\n17\r\n55647\r\n257\r\n32\r\n22\r\n2261\r\n258\r\n43\r\n11\r\n8637\r\n259\r\n37\r\n22\r\n42276\r\n260\r\n29\r\n19\r\n8347\r\n261\r\n27\r\n17\r\n30605\r\n262\r\n35\r\n15\r\n10972\r\n263\r\n20\r\n24\r\n27662\r\n264\r\n44\r\n20\r\n14718\r\n265\r\n18\r\n19\r\n51486\r\n266\r\n34\r\n21\r\n14564\r\n267\r\n41\r\n23\r\n6776\r\n268\r\n35\r\n21\r\n4877\r\n269\r\n20\r\n16\r\n40631\r\n270\r\n49\r\n11\r\n15194\r\n271\r\n39\r\n15\r\n76116\r\n272\r\n18\r\n17\r\n46804\r\n273\r\n27\r\n26\r\n28616\r\n274\r\n27\r\n21\r\n74210\r\n275\r\n39\r\n20\r\n15087\r\n276\r\n29\r\n17\r\n22938\r\n277\r\n21\r\n22\r\n22149\r\n278\r\n20\r\n19\r\n47633\r\n279\r\n19\r\n25\r\n31632\r\n280\r\n28\r\n16\r\n23835\r\n281\r\n35\r\n16\r\n30073\r\n282\r\n39\r\n17\r\n34417\r\n283\r\n20\r\n16\r\n49686\r\n284\r\n25\r\n19\r\n23337\r\n285\r\n19\r\n24\r\n43634\r\n286\r\n24\r\n25\r\n7594\r\n287\r\n34\r\n19\r\n13936\r\n288\r\n46\r\n16\r\n62427\r\n289\r\n42\r\n12\r\n11297\r\n290\r\n41\r\n21\r\n75084\r\n291\r\n24\r\n17\r\n29276\r\n292\r\n47\r\n24\r\n50438\r\n293\r\n35\r\n16\r\n91718\r\n294\r\n39\r\n19\r\n118922\r\n295\r\n36\r\n25\r\n36472\r\n296\r\n27\r\n17\r\n70318\r\n297\r\n49\r\n16\r\n60752\r\n298\r\n28\r\n18\r\n19717\r\n299\r\n33\r\n19\r\n138110\r\n300\r\n48\r\n15\r\n114589\r\n301\r\n43\r\n18\r\n60507\r\n302\r\n42\r\n22\r\n33010\r\n303\r\n22\r\n18\r\n39736\r\n304\r\n25\r\n14\r\n16475\r\n305\r\n47\r\n17\r\n11503\r\n306\r\n43\r\n24\r\n32354\r\n307\r\n24\r\n25\r\n42885\r\n308\r\n34\r\n20\r\n2948\r\n309\r\n43\r\n15\r\n31232\r\n310\r\n31\r\n20\r\n49863\r\n311\r\n33\r\n26\r\n49730\r\n312\r\n27\r\n15\r\n10201\r\n313\r\n38\r\n24\r\n53367\r\n314\r\n22\r\n21\r\n41413\r\n315\r\n43\r\n29\r\n28925\r\n316\r\n20\r\n16\r\n14888\r\n317\r\n22\r\n22\r\n31135\r\n318\r\n43\r\n21\r\n17899\r\n319\r\n40\r\n28\r\n18300\r\n320\r\n44\r\n29\r\n23179\r\n321\r\n42\r\n23\r\n45804\r\n322\r\n42\r\n19\r\n28689\r\n323\r\n27\r\n20\r\n32595\r\n324\r\n44\r\n18\r\n23622\r\n325\r\n24\r\n23\r\n66575\r\n326\r\n50\r\n23\r\n6912\r\n327\r\n25\r\n20\r\n36713\r\n328\r\n33\r\n20\r\n25559\r\n329\r\n44\r\n18\r\n89676\r\n330\r\n31\r\n12\r\n7962\r\n331\r\n26\r\n27\r\n22518\r\n332\r\n40\r\n21\r\n55722\r\n333\r\n19\r\n12\r\n49333\r\n334\r\n30\r\n19\r\n13440\r\n335\r\n21\r\n23\r\n43203\r\n336\r\n42\r\n23\r\n49244\r\n337\r\n50\r\n26\r\n23157\r\n338\r\n26\r\n19\r\n105446\r\n339\r\n24\r\n20\r\n39447\r\n340\r\n28\r\n25\r\n30660\r\n341\r\n50\r\n17\r\n3613\r\n342\r\n45\r\n18\r\n12474\r\n343\r\n23\r\n13\r\n5087\r\n344\r\n28\r\n21\r\n44062\r\n345\r\n24\r\n23\r\n41245\r\n346\r\n50\r\n31\r\n118652\r\n347\r\n47\r\n17\r\n114796\r\n348\r\n20\r\n17\r\n104272\r\n349\r\n22\r\n23\r\n46306\r\n350\r\n37\r\n30\r\n10220\r\n351\r\n40\r\n23\r\n46432\r\n352\r\n43\r\n20\r\n54554\r\n353\r\n37\r\n13\r\n35029\r\n354\r\n34\r\n16\r\n21432\r\n355\r\n34\r\n16\r\n72839\r\n356\r\n23\r\n15\r\n9272\r\n357\r\n47\r\n24\r\n33497\r\n358\r\n30\r\n27\r\n29448\r\n359\r\n29\r\n23\r\n93660\r\n360\r\n47\r\n24\r\n27879\r\n361\r\n45\r\n24\r\n37875\r\n362\r\n41\r\n18\r\n39746\r\n363\r\n44\r\n30\r\n2984\r\n364\r\n23\r\n28\r\n29536\r\n365\r\n41\r\n25\r\n56144\r\n366\r\n49\r\n24\r\n6389\r\n367\r\n44\r\n13\r\n50493\r\n368\r\n39\r\n27\r\n111688\r\n369\r\n31\r\n15\r\n16675\r\n370\r\n18\r\n20\r\n85293\r\n371\r\n29\r\n24\r\n37680\r\n372\r\n48\r\n16\r\n28226\r\n373\r\n42\r\n24\r\n67092\r\n374\r\n30\r\n28\r\n15355\r\n375\r\n21\r\n21\r\n34597\r\n376\r\n27\r\n20\r\n40672\r\n377\r\n48\r\n25\r\n16226\r\n378\r\n44\r\n18\r\n201316\r\n379\r\n38\r\n14\r\n56633\r\n380\r\n25\r\n13\r\n24262\r\n381\r\n41\r\n25\r\n32568\r\n382\r\n25\r\n14\r\n65669\r\n383\r\n47\r\n18\r\n74768\r\n384\r\n27\r\n26\r\n20089\r\n385\r\n20\r\n17\r\n19515\r\n386\r\n38\r\n15\r\n19209\r\n387\r\n47\r\n21\r\n37569\r\n388\r\n31\r\n14\r\n15614\r\n389\r\n34\r\n19\r\n26463\r\n390\r\n36\r\n29\r\n69232\r\n391\r\n26\r\n16\r\n65835\r\n392\r\n27\r\n19\r\n18172\r\n393\r\n21\r\n20\r\n18824\r\n394\r\n21\r\n21\r\n83566\r\n395\r\n37\r\n17\r\n33372\r\n396\r\n25\r\n24\r\n11644\r\n397\r\n22\r\n28\r\n73212\r\n398\r\n20\r\n11\r\n70378\r\n399\r\n33\r\n25\r\n10557\r\n400\r\n37\r\n19\r\n124024\r\n401\r\n46\r\n15\r\n102747\r\n402\r\n49\r\n29\r\n38039\r\n403\r\n44\r\n23\r\n26403\r\n404\r\n35\r\n21\r\n20165\r\n405\r\n46\r\n20\r\n44905\r\n406\r\n34\r\n24\r\n56967\r\n407\r\n37\r\n18\r\n41795\r\n408\r\n26\r\n20\r\n83439\r\n409\r\n34\r\n18\r\n18368\r\n410\r\n20\r\n18\r\n9572\r\n411\r\n40\r\n20\r\n4836\r\n412\r\n42\r\n21\r\n35636\r\n413\r\n36\r\n20\r\n50643\r\n414\r\n19\r\n15\r\n48689\r\n415\r\n22\r\n23\r\n49904\r\n416\r\n19\r\n20\r\n28915\r\n417\r\n24\r\n20\r\n16571\r\n418\r\n36\r\n18\r\n39112\r\n419\r\n37\r\n15\r\n13783\r\n420\r\n40\r\n27\r\n28288\r\n421\r\n20\r\n28\r\n63804\r\n422\r\n37\r\n28\r\n12432\r\n423\r\n19\r\n31\r\n81192\r\n424\r\n50\r\n25\r\n11900\r\n425\r\n24\r\n19\r\n83775\r\n426\r\n38\r\n29\r\n15349\r\n427\r\n31\r\n18\r\n9950\r\n428\r\n50\r\n27\r\n63041\r\n429\r\n23\r\n21\r\n22665\r\n430\r\n35\r\n20\r\n48915\r\n431\r\n42\r\n28\r\n10281\r\n432\r\n47\r\n22\r\n40423\r\n433\r\n21\r\n24\r\n64166\r\n434\r\n48\r\n22\r\n37886\r\n435\r\n46\r\n9\r\n48390\r\n436\r\n32\r\n12\r\n24095\r\n437\r\n49\r\n22\r\n28954\r\n438\r\n19\r\n21\r\n39777\r\n439\r\n41\r\n19\r\n8014\r\n440\r\n30\r\n27\r\n16948\r\n441\r\n18\r\n21\r\n143065\r\n442\r\n48\r\n23\r\n37178\r\n443\r\n21\r\n22\r\n36083\r\n444\r\n25\r\n16\r\n17460\r\n445\r\n47\r\n28\r\n40550\r\n446\r\n45\r\n23\r\n11384\r\n447\r\n36\r\n17\r\n39414\r\n448\r\n22\r\n29\r\n46879\r\n449\r\n43\r\n22\r\n58514\r\n450\r\n23\r\n24\r\n33576\r\n451\r\n36\r\n12\r\n9962\r\n452\r\n40\r\n18\r\n31186\r\n453\r\n18\r\n21\r\n30154\r\n454\r\n29\r\n27\r\n58589\r\n455\r\n35\r\n24\r\n18028\r\n456\r\n34\r\n22\r\n4006\r\n457\r\n29\r\n22\r\n20909\r\n458\r\n46\r\n15\r\n14532\r\n459\r\n26\r\n18\r\n22374\r\n460\r\n33\r\n26\r\n20694\r\n461\r\n25\r\n21\r\n134064\r\n462\r\n27\r\n15\r\n144040\r\n463\r\n33\r\n23\r\n68944\r\n464\r\n30\r\n27\r\n80952\r\n465\r\n18\r\n24\r\n35578\r\n466\r\n41\r\n17\r\n108235\r\n467\r\n38\r\n23\r\n24828\r\n468\r\n18\r\n19\r\n15253\r\n469\r\n29\r\n14\r\n87981\r\n470\r\n35\r\n21\r\n26679\r\n471\r\n48\r\n18\r\n56039\r\n472\r\n27\r\n25\r\n27744\r\n473\r\n35\r\n23\r\n25245\r\n474\r\n32\r\n12\r\n28503\r\n475\r\n34\r\n16\r\n58377\r\n476\r\n37\r\n22\r\n49831\r\n477\r\n19\r\n13\r\n17979\r\n478\r\n49\r\n15\r\n19219\r\n479\r\n24\r\n17\r\n56718\r\n480\r\n37\r\n14\r\n50607\r\n481\r\n35\r\n20\r\n36507\r\n482\r\n35\r\n18\r\n20210\r\n483\r\n49\r\n13\r\n26109\r\n484\r\n20\r\n18\r\n13644\r\n485\r\n40\r\n21\r\n15040\r\n486\r\n38\r\n22\r\n67872\r\n487\r\n50\r\n19\r\n7654\r\n488\r\n44\r\n16\r\n147701\r\n489\r\n36\r\n14\r\n42068\r\n490\r\n37\r\n18\r\n93240\r\n491\r\n48\r\n20\r\n43519\r\n492\r\n21\r\n22\r\n16726\r\n493\r\n22\r\n20\r\n19790\r\n494\r\n44\r\n16\r\n54161\r\n495\r\n35\r\n18\r\n61399\r\n496\r\n22\r\n16\r\n189960\r\n497\r\n20\r\n21\r\n79087\r\n498\r\n30\r\n22\r\n24570\r\n499\r\n43\r\n22\r\n22048\r\n500\r\n47\r\n16\r\n10354\r\n\r\nLooks too perfect? Include random missing values:\r\n\r\n\r\ntest <- test %>% r_na(cols=c(2,4),prob=0.3)\r\n\r\n\r\n\r\n\r\nID\r\nAge\r\nReading(mins)\r\nIncome\r\n001\r\n31\r\n21\r\nNA\r\n002\r\nNA\r\n19\r\n29690\r\n003\r\n24\r\n19\r\n24591\r\n004\r\n34\r\n26\r\n39138\r\n005\r\n30\r\n24\r\n41837\r\n006\r\n32\r\n18\r\n31931\r\n007\r\n47\r\n19\r\n14845\r\n008\r\nNA\r\n17\r\n22088\r\n009\r\n22\r\n16\r\nNA\r\n010\r\n20\r\n22\r\n20101\r\n011\r\n50\r\n18\r\n130249\r\n012\r\n28\r\n25\r\n8917\r\n013\r\nNA\r\n19\r\n31203\r\n014\r\n50\r\n31\r\n42722\r\n015\r\n18\r\n21\r\n43318\r\n016\r\n21\r\n17\r\n17164\r\n017\r\n33\r\n23\r\n37262\r\n018\r\nNA\r\n20\r\n30679\r\n019\r\nNA\r\n19\r\n18346\r\n020\r\n45\r\n18\r\n71781\r\n021\r\n27\r\n21\r\n28637\r\n022\r\n25\r\n16\r\n49554\r\n023\r\n29\r\n20\r\nNA\r\n024\r\nNA\r\n18\r\n22025\r\n025\r\n18\r\n22\r\n45968\r\n026\r\n35\r\n23\r\n60546\r\n027\r\n48\r\n20\r\nNA\r\n028\r\n41\r\n29\r\n130781\r\n029\r\n21\r\n16\r\n22688\r\n030\r\n26\r\n24\r\n35453\r\n031\r\n39\r\n21\r\nNA\r\n032\r\n22\r\n29\r\nNA\r\n033\r\nNA\r\n19\r\n16388\r\n034\r\n32\r\n21\r\nNA\r\n035\r\nNA\r\n20\r\nNA\r\n036\r\nNA\r\n22\r\n22624\r\n037\r\nNA\r\n23\r\n45541\r\n038\r\n30\r\n17\r\nNA\r\n039\r\n21\r\n20\r\n9688\r\n040\r\n22\r\n21\r\nNA\r\n041\r\nNA\r\n19\r\n41525\r\n042\r\nNA\r\n26\r\n39067\r\n043\r\n38\r\n15\r\n39220\r\n044\r\n18\r\n22\r\n33482\r\n045\r\n36\r\n28\r\nNA\r\n046\r\n18\r\n22\r\n32763\r\n047\r\nNA\r\n18\r\n43814\r\n048\r\nNA\r\n20\r\n86319\r\n049\r\n34\r\n10\r\n61873\r\n050\r\n35\r\n20\r\n38377\r\n051\r\n47\r\n19\r\n64728\r\n052\r\nNA\r\n21\r\n27011\r\n053\r\n41\r\n19\r\n50007\r\n054\r\n37\r\n17\r\n9209\r\n055\r\n43\r\n13\r\n50423\r\n056\r\n50\r\n17\r\n45020\r\n057\r\nNA\r\n17\r\n15794\r\n058\r\nNA\r\n21\r\n41921\r\n059\r\n49\r\n21\r\n76893\r\n060\r\n21\r\n20\r\n61976\r\n061\r\n41\r\n20\r\n14823\r\n062\r\nNA\r\n16\r\n55728\r\n063\r\n41\r\n16\r\n55741\r\n064\r\n50\r\n26\r\nNA\r\n065\r\n21\r\n26\r\n11605\r\n066\r\n37\r\n10\r\n23124\r\n067\r\n23\r\n22\r\n19716\r\n068\r\n35\r\n14\r\nNA\r\n069\r\nNA\r\n13\r\n3768\r\n070\r\n32\r\n24\r\n25168\r\n071\r\n32\r\n22\r\n23687\r\n072\r\n21\r\n16\r\n45861\r\n073\r\n41\r\n24\r\nNA\r\n074\r\nNA\r\n16\r\nNA\r\n075\r\n50\r\n11\r\n75996\r\n076\r\n36\r\n25\r\n25399\r\n077\r\n36\r\n25\r\n29850\r\n078\r\n21\r\n28\r\n20909\r\n079\r\nNA\r\n23\r\n51051\r\n080\r\nNA\r\n27\r\n32735\r\n081\r\n44\r\n27\r\n33047\r\n082\r\n46\r\n15\r\n34391\r\n083\r\nNA\r\n19\r\nNA\r\n084\r\n39\r\n19\r\n55917\r\n085\r\n30\r\n19\r\n20167\r\n086\r\n24\r\n27\r\n31244\r\n087\r\n43\r\n15\r\nNA\r\n088\r\n27\r\n20\r\nNA\r\n089\r\nNA\r\n19\r\n21443\r\n090\r\n40\r\n17\r\n61851\r\n091\r\n21\r\n27\r\n38429\r\n092\r\nNA\r\n21\r\nNA\r\n093\r\nNA\r\n18\r\n62430\r\n094\r\n21\r\n18\r\n27590\r\n095\r\nNA\r\n17\r\n29189\r\n096\r\n21\r\n19\r\nNA\r\n097\r\n41\r\n23\r\n136270\r\n098\r\n25\r\n18\r\n29821\r\n099\r\n20\r\n19\r\n33889\r\n100\r\n24\r\n19\r\n101848\r\n101\r\n34\r\n19\r\nNA\r\n102\r\nNA\r\n20\r\nNA\r\n103\r\n37\r\n18\r\nNA\r\n104\r\n50\r\n23\r\n9156\r\n105\r\n40\r\n10\r\n38146\r\n106\r\n48\r\n15\r\n58291\r\n107\r\n40\r\n19\r\nNA\r\n108\r\n38\r\n33\r\n21063\r\n109\r\nNA\r\n21\r\nNA\r\n110\r\n26\r\n23\r\nNA\r\n111\r\n26\r\n18\r\n98451\r\n112\r\nNA\r\n14\r\n40072\r\n113\r\nNA\r\n18\r\nNA\r\n114\r\n27\r\n19\r\n34347\r\n115\r\n27\r\n19\r\n15303\r\n116\r\nNA\r\n17\r\n65048\r\n117\r\n43\r\n24\r\n59565\r\n118\r\n38\r\n18\r\nNA\r\n119\r\nNA\r\n18\r\n76976\r\n120\r\nNA\r\n19\r\nNA\r\n121\r\n36\r\n18\r\n22365\r\n122\r\n45\r\n19\r\n39517\r\n123\r\n23\r\n14\r\n82586\r\n124\r\n43\r\n25\r\n40123\r\n125\r\nNA\r\n15\r\nNA\r\n126\r\nNA\r\n29\r\nNA\r\n127\r\n46\r\n17\r\nNA\r\n128\r\nNA\r\n24\r\n88341\r\n129\r\n39\r\n19\r\n21042\r\n130\r\n27\r\n16\r\n29866\r\n131\r\nNA\r\n19\r\nNA\r\n132\r\n41\r\n20\r\nNA\r\n133\r\nNA\r\n30\r\n135528\r\n134\r\n46\r\n14\r\n12465\r\n135\r\n19\r\n25\r\nNA\r\n136\r\nNA\r\n22\r\nNA\r\n137\r\n46\r\n23\r\n6812\r\n138\r\nNA\r\n18\r\n100646\r\n139\r\n29\r\n19\r\n11182\r\n140\r\nNA\r\n13\r\n13356\r\n141\r\n44\r\n16\r\nNA\r\n142\r\n19\r\n16\r\n74879\r\n143\r\nNA\r\n15\r\n20112\r\n144\r\nNA\r\n26\r\n24281\r\n145\r\n50\r\n13\r\n76433\r\n146\r\n47\r\n18\r\n29842\r\n147\r\n49\r\n16\r\n18023\r\n148\r\nNA\r\n20\r\n17680\r\n149\r\n38\r\n23\r\n37237\r\n150\r\n18\r\n22\r\n14395\r\n151\r\n43\r\n18\r\nNA\r\n152\r\nNA\r\n15\r\nNA\r\n153\r\nNA\r\n21\r\nNA\r\n154\r\n21\r\n14\r\n26173\r\n155\r\n22\r\n13\r\n42995\r\n156\r\n21\r\n21\r\nNA\r\n157\r\nNA\r\n22\r\n55949\r\n158\r\n31\r\n20\r\n25858\r\n159\r\n47\r\n15\r\nNA\r\n160\r\n38\r\n21\r\n47456\r\n161\r\n22\r\n13\r\n34076\r\n162\r\n42\r\n22\r\nNA\r\n163\r\n28\r\n28\r\nNA\r\n164\r\n41\r\n17\r\n47036\r\n165\r\n28\r\n13\r\n67733\r\n166\r\nNA\r\n11\r\nNA\r\n167\r\n48\r\n27\r\n13037\r\n168\r\n31\r\n27\r\n5634\r\n169\r\nNA\r\n19\r\n9441\r\n170\r\nNA\r\n20\r\n25199\r\n171\r\n21\r\n25\r\n10728\r\n172\r\nNA\r\n16\r\nNA\r\n173\r\nNA\r\n17\r\nNA\r\n174\r\n28\r\n22\r\n52105\r\n175\r\n29\r\n17\r\n30514\r\n176\r\n30\r\n16\r\n40825\r\n177\r\n42\r\n17\r\n58479\r\n178\r\n23\r\n27\r\n11342\r\n179\r\n31\r\n16\r\n66062\r\n180\r\n46\r\n18\r\n15245\r\n181\r\n41\r\n28\r\n17386\r\n182\r\n40\r\n16\r\n42917\r\n183\r\n35\r\n21\r\nNA\r\n184\r\n27\r\n29\r\n55476\r\n185\r\nNA\r\n16\r\n35985\r\n186\r\n36\r\n17\r\n23364\r\n187\r\nNA\r\n20\r\n87232\r\n188\r\n21\r\n27\r\nNA\r\n189\r\n18\r\n24\r\nNA\r\n190\r\n31\r\n23\r\n36970\r\n191\r\n36\r\n19\r\n40657\r\n192\r\n23\r\n21\r\n71428\r\n193\r\nNA\r\n12\r\nNA\r\n194\r\n36\r\n28\r\n32477\r\n195\r\n43\r\n18\r\nNA\r\n196\r\n19\r\n23\r\n1432\r\n197\r\n41\r\n18\r\n15049\r\n198\r\n39\r\n27\r\n10141\r\n199\r\n24\r\n20\r\nNA\r\n200\r\nNA\r\n18\r\n10855\r\n201\r\nNA\r\n19\r\n73144\r\n202\r\nNA\r\n18\r\nNA\r\n203\r\n24\r\n24\r\n8133\r\n204\r\n50\r\n31\r\n45129\r\n205\r\n49\r\n16\r\nNA\r\n206\r\nNA\r\n19\r\n15601\r\n207\r\n25\r\n21\r\n85119\r\n208\r\n50\r\n18\r\n6172\r\n209\r\n34\r\n13\r\n21167\r\n210\r\n28\r\n22\r\n87281\r\n211\r\n30\r\n25\r\n14246\r\n212\r\nNA\r\n26\r\nNA\r\n213\r\nNA\r\n15\r\n19253\r\n214\r\nNA\r\n22\r\n27607\r\n215\r\n33\r\n18\r\n36673\r\n216\r\n20\r\n16\r\n29200\r\n217\r\n26\r\n16\r\nNA\r\n218\r\n34\r\n20\r\nNA\r\n219\r\n40\r\n28\r\n64425\r\n220\r\n27\r\n19\r\nNA\r\n221\r\n43\r\n24\r\n19712\r\n222\r\n34\r\n27\r\n93632\r\n223\r\nNA\r\n24\r\n10990\r\n224\r\n29\r\n17\r\n53247\r\n225\r\nNA\r\n22\r\n27004\r\n226\r\nNA\r\n18\r\nNA\r\n227\r\nNA\r\n24\r\nNA\r\n228\r\n50\r\n14\r\nNA\r\n229\r\n33\r\n20\r\n41023\r\n230\r\n39\r\n23\r\nNA\r\n231\r\n31\r\n20\r\n51804\r\n232\r\n50\r\n20\r\n64404\r\n233\r\nNA\r\n22\r\nNA\r\n234\r\nNA\r\n27\r\n26084\r\n235\r\n28\r\n17\r\nNA\r\n236\r\nNA\r\n15\r\nNA\r\n237\r\nNA\r\n14\r\n55259\r\n238\r\nNA\r\n18\r\nNA\r\n239\r\n46\r\n21\r\nNA\r\n240\r\n29\r\n14\r\n118948\r\n241\r\nNA\r\n27\r\n30185\r\n242\r\n39\r\n19\r\n39797\r\n243\r\n26\r\n23\r\n37475\r\n244\r\n26\r\n27\r\nNA\r\n245\r\n43\r\n19\r\n30201\r\n246\r\n47\r\n18\r\n29552\r\n247\r\nNA\r\n26\r\n14099\r\n248\r\n32\r\n17\r\nNA\r\n249\r\nNA\r\n19\r\n3465\r\n250\r\n47\r\n17\r\n51143\r\n251\r\n24\r\n25\r\n42207\r\n252\r\nNA\r\n24\r\n16890\r\n253\r\nNA\r\n19\r\nNA\r\n254\r\nNA\r\n24\r\n16187\r\n255\r\n34\r\n19\r\n40888\r\n256\r\n41\r\n17\r\nNA\r\n257\r\n32\r\n22\r\nNA\r\n258\r\n43\r\n11\r\n8637\r\n259\r\n37\r\n22\r\n42276\r\n260\r\n29\r\n19\r\nNA\r\n261\r\nNA\r\n17\r\nNA\r\n262\r\nNA\r\n15\r\n10972\r\n263\r\n20\r\n24\r\n27662\r\n264\r\nNA\r\n20\r\n14718\r\n265\r\nNA\r\n19\r\nNA\r\n266\r\n34\r\n21\r\n14564\r\n267\r\nNA\r\n23\r\n6776\r\n268\r\n35\r\n21\r\n4877\r\n269\r\n20\r\n16\r\n40631\r\n270\r\n49\r\n11\r\n15194\r\n271\r\n39\r\n15\r\n76116\r\n272\r\nNA\r\n17\r\n46804\r\n273\r\n27\r\n26\r\nNA\r\n274\r\nNA\r\n21\r\nNA\r\n275\r\nNA\r\n20\r\nNA\r\n276\r\nNA\r\n17\r\n22938\r\n277\r\n21\r\n22\r\nNA\r\n278\r\nNA\r\n19\r\n47633\r\n279\r\n19\r\n25\r\n31632\r\n280\r\nNA\r\n16\r\n23835\r\n281\r\n35\r\n16\r\nNA\r\n282\r\nNA\r\n17\r\n34417\r\n283\r\n20\r\n16\r\n49686\r\n284\r\n25\r\n19\r\nNA\r\n285\r\n19\r\n24\r\n43634\r\n286\r\n24\r\n25\r\n7594\r\n287\r\nNA\r\n19\r\n13936\r\n288\r\n46\r\n16\r\n62427\r\n289\r\n42\r\n12\r\n11297\r\n290\r\n41\r\n21\r\n75084\r\n291\r\n24\r\n17\r\n29276\r\n292\r\n47\r\n24\r\n50438\r\n293\r\nNA\r\n16\r\n91718\r\n294\r\n39\r\n19\r\nNA\r\n295\r\n36\r\n25\r\n36472\r\n296\r\nNA\r\n17\r\n70318\r\n297\r\n49\r\n16\r\nNA\r\n298\r\nNA\r\n18\r\n19717\r\n299\r\nNA\r\n19\r\nNA\r\n300\r\n48\r\n15\r\nNA\r\n301\r\n43\r\n18\r\nNA\r\n302\r\n42\r\n22\r\n33010\r\n303\r\n22\r\n18\r\n39736\r\n304\r\nNA\r\n14\r\nNA\r\n305\r\nNA\r\n17\r\n11503\r\n306\r\n43\r\n24\r\nNA\r\n307\r\n24\r\n25\r\n42885\r\n308\r\n34\r\n20\r\nNA\r\n309\r\n43\r\n15\r\nNA\r\n310\r\n31\r\n20\r\n49863\r\n311\r\n33\r\n26\r\n49730\r\n312\r\nNA\r\n15\r\n10201\r\n313\r\n38\r\n24\r\n53367\r\n314\r\n22\r\n21\r\n41413\r\n315\r\n43\r\n29\r\nNA\r\n316\r\n20\r\n16\r\n14888\r\n317\r\nNA\r\n22\r\n31135\r\n318\r\nNA\r\n21\r\n17899\r\n319\r\n40\r\n28\r\n18300\r\n320\r\n44\r\n29\r\n23179\r\n321\r\n42\r\n23\r\n45804\r\n322\r\n42\r\n19\r\nNA\r\n323\r\n27\r\n20\r\n32595\r\n324\r\n44\r\n18\r\n23622\r\n325\r\n24\r\n23\r\nNA\r\n326\r\n50\r\n23\r\n6912\r\n327\r\n25\r\n20\r\n36713\r\n328\r\n33\r\n20\r\n25559\r\n329\r\n44\r\n18\r\n89676\r\n330\r\nNA\r\n12\r\n7962\r\n331\r\n26\r\n27\r\nNA\r\n332\r\n40\r\n21\r\n55722\r\n333\r\n19\r\n12\r\n49333\r\n334\r\n30\r\n19\r\n13440\r\n335\r\n21\r\n23\r\nNA\r\n336\r\n42\r\n23\r\nNA\r\n337\r\n50\r\n26\r\n23157\r\n338\r\n26\r\n19\r\n105446\r\n339\r\n24\r\n20\r\n39447\r\n340\r\nNA\r\n25\r\n30660\r\n341\r\n50\r\n17\r\nNA\r\n342\r\nNA\r\n18\r\n12474\r\n343\r\n23\r\n13\r\n5087\r\n344\r\n28\r\n21\r\n44062\r\n345\r\n24\r\n23\r\n41245\r\n346\r\n50\r\n31\r\n118652\r\n347\r\n47\r\n17\r\n114796\r\n348\r\n20\r\n17\r\n104272\r\n349\r\n22\r\n23\r\n46306\r\n350\r\n37\r\n30\r\n10220\r\n351\r\n40\r\n23\r\n46432\r\n352\r\n43\r\n20\r\n54554\r\n353\r\n37\r\n13\r\nNA\r\n354\r\n34\r\n16\r\n21432\r\n355\r\n34\r\n16\r\n72839\r\n356\r\n23\r\n15\r\n9272\r\n357\r\nNA\r\n24\r\nNA\r\n358\r\nNA\r\n27\r\n29448\r\n359\r\n29\r\n23\r\n93660\r\n360\r\nNA\r\n24\r\n27879\r\n361\r\n45\r\n24\r\n37875\r\n362\r\n41\r\n18\r\n39746\r\n363\r\n44\r\n30\r\nNA\r\n364\r\n23\r\n28\r\nNA\r\n365\r\n41\r\n25\r\nNA\r\n366\r\nNA\r\n24\r\nNA\r\n367\r\n44\r\n13\r\n50493\r\n368\r\n39\r\n27\r\n111688\r\n369\r\nNA\r\n15\r\n16675\r\n370\r\n18\r\n20\r\n85293\r\n371\r\nNA\r\n24\r\n37680\r\n372\r\n48\r\n16\r\nNA\r\n373\r\nNA\r\n24\r\n67092\r\n374\r\nNA\r\n28\r\nNA\r\n375\r\nNA\r\n21\r\n34597\r\n376\r\nNA\r\n20\r\nNA\r\n377\r\nNA\r\n25\r\nNA\r\n378\r\n44\r\n18\r\n201316\r\n379\r\n38\r\n14\r\nNA\r\n380\r\n25\r\n13\r\nNA\r\n381\r\nNA\r\n25\r\nNA\r\n382\r\nNA\r\n14\r\nNA\r\n383\r\n47\r\n18\r\nNA\r\n384\r\nNA\r\n26\r\n20089\r\n385\r\n20\r\n17\r\nNA\r\n386\r\n38\r\n15\r\n19209\r\n387\r\n47\r\n21\r\n37569\r\n388\r\nNA\r\n14\r\n15614\r\n389\r\n34\r\n19\r\n26463\r\n390\r\n36\r\n29\r\n69232\r\n391\r\n26\r\n16\r\n65835\r\n392\r\nNA\r\n19\r\n18172\r\n393\r\n21\r\n20\r\n18824\r\n394\r\n21\r\n21\r\n83566\r\n395\r\nNA\r\n17\r\nNA\r\n396\r\n25\r\n24\r\n11644\r\n397\r\nNA\r\n28\r\nNA\r\n398\r\n20\r\n11\r\nNA\r\n399\r\n33\r\n25\r\nNA\r\n400\r\n37\r\n19\r\nNA\r\n401\r\nNA\r\n15\r\n102747\r\n402\r\n49\r\n29\r\nNA\r\n403\r\n44\r\n23\r\nNA\r\n404\r\n35\r\n21\r\nNA\r\n405\r\nNA\r\n20\r\n44905\r\n406\r\n34\r\n24\r\nNA\r\n407\r\n37\r\n18\r\n41795\r\n408\r\n26\r\n20\r\nNA\r\n409\r\n34\r\n18\r\n18368\r\n410\r\nNA\r\n18\r\n9572\r\n411\r\n40\r\n20\r\nNA\r\n412\r\n42\r\n21\r\n35636\r\n413\r\n36\r\n20\r\n50643\r\n414\r\n19\r\n15\r\n48689\r\n415\r\n22\r\n23\r\n49904\r\n416\r\n19\r\n20\r\n28915\r\n417\r\nNA\r\n20\r\n16571\r\n418\r\n36\r\n18\r\n39112\r\n419\r\n37\r\n15\r\n13783\r\n420\r\n40\r\n27\r\nNA\r\n421\r\n20\r\n28\r\n63804\r\n422\r\n37\r\n28\r\n12432\r\n423\r\nNA\r\n31\r\n81192\r\n424\r\n50\r\n25\r\n11900\r\n425\r\n24\r\n19\r\n83775\r\n426\r\nNA\r\n29\r\nNA\r\n427\r\nNA\r\n18\r\n9950\r\n428\r\n50\r\n27\r\n63041\r\n429\r\n23\r\n21\r\n22665\r\n430\r\n35\r\n20\r\n48915\r\n431\r\n42\r\n28\r\nNA\r\n432\r\nNA\r\n22\r\n40423\r\n433\r\n21\r\n24\r\nNA\r\n434\r\n48\r\n22\r\n37886\r\n435\r\n46\r\n9\r\n48390\r\n436\r\n32\r\n12\r\n24095\r\n437\r\n49\r\n22\r\n28954\r\n438\r\nNA\r\n21\r\n39777\r\n439\r\n41\r\n19\r\n8014\r\n440\r\n30\r\n27\r\n16948\r\n441\r\n18\r\n21\r\n143065\r\n442\r\n48\r\n23\r\n37178\r\n443\r\n21\r\n22\r\nNA\r\n444\r\nNA\r\n16\r\nNA\r\n445\r\nNA\r\n28\r\n40550\r\n446\r\n45\r\n23\r\n11384\r\n447\r\n36\r\n17\r\n39414\r\n448\r\n22\r\n29\r\nNA\r\n449\r\nNA\r\n22\r\n58514\r\n450\r\n23\r\n24\r\nNA\r\n451\r\n36\r\n12\r\n9962\r\n452\r\n40\r\n18\r\nNA\r\n453\r\nNA\r\n21\r\n30154\r\n454\r\n29\r\n27\r\nNA\r\n455\r\n35\r\n24\r\nNA\r\n456\r\nNA\r\n22\r\n4006\r\n457\r\n29\r\n22\r\n20909\r\n458\r\n46\r\n15\r\n14532\r\n459\r\n26\r\n18\r\n22374\r\n460\r\nNA\r\n26\r\nNA\r\n461\r\n25\r\n21\r\n134064\r\n462\r\n27\r\n15\r\n144040\r\n463\r\nNA\r\n23\r\nNA\r\n464\r\n30\r\n27\r\n80952\r\n465\r\n18\r\n24\r\n35578\r\n466\r\nNA\r\n17\r\nNA\r\n467\r\n38\r\n23\r\n24828\r\n468\r\n18\r\n19\r\n15253\r\n469\r\nNA\r\n14\r\n87981\r\n470\r\n35\r\n21\r\n26679\r\n471\r\nNA\r\n18\r\nNA\r\n472\r\nNA\r\n25\r\n27744\r\n473\r\n35\r\n23\r\n25245\r\n474\r\n32\r\n12\r\nNA\r\n475\r\n34\r\n16\r\n58377\r\n476\r\nNA\r\n22\r\n49831\r\n477\r\n19\r\n13\r\n17979\r\n478\r\n49\r\n15\r\nNA\r\n479\r\nNA\r\n17\r\nNA\r\n480\r\n37\r\n14\r\n50607\r\n481\r\n35\r\n20\r\n36507\r\n482\r\n35\r\n18\r\nNA\r\n483\r\n49\r\n13\r\n26109\r\n484\r\n20\r\n18\r\n13644\r\n485\r\n40\r\n21\r\nNA\r\n486\r\n38\r\n22\r\n67872\r\n487\r\nNA\r\n19\r\n7654\r\n488\r\n44\r\n16\r\n147701\r\n489\r\n36\r\n14\r\n42068\r\n490\r\nNA\r\n18\r\n93240\r\n491\r\nNA\r\n20\r\nNA\r\n492\r\n21\r\n22\r\n16726\r\n493\r\nNA\r\n20\r\nNA\r\n494\r\nNA\r\n16\r\n54161\r\n495\r\n35\r\n18\r\n61399\r\n496\r\nNA\r\n16\r\nNA\r\n497\r\n20\r\n21\r\nNA\r\n498\r\n30\r\n22\r\n24570\r\n499\r\n43\r\n22\r\nNA\r\n500\r\nNA\r\n16\r\n10354\r\n\r\nSeries\r\n{wakefield} allows us to create several variables which can be seen as a sequence, for example survey results.\r\n\r\n\r\nr_series(likert,j = 5,n=10,name=\"Question\")\r\n\r\n\r\n# A tibble: 10 x 5\r\n   Question_1    Question_2    Question_3    Question_4   Question_5  \r\n * <ord>         <ord>         <ord>         <ord>        <ord>       \r\n 1 Agree         Neutral       Strongly Dis~ Strongly Di~ Agree       \r\n 2 Strongly Dis~ Disagree      Neutral       Neutral      Agree       \r\n 3 Neutral       Strongly Agr~ Strongly Dis~ Strongly Ag~ Agree       \r\n 4 Strongly Agr~ Strongly Dis~ Neutral       Neutral      Neutral     \r\n 5 Neutral       Neutral       Strongly Dis~ Disagree     Strongly Ag~\r\n 6 Agree         Disagree      Strongly Agr~ Neutral      Neutral     \r\n 7 Strongly Agr~ Disagree      Disagree      Strongly Ag~ Neutral     \r\n 8 Agree         Agree         Neutral       Strongly Ag~ Disagree    \r\n 9 Disagree      Neutral       Strongly Dis~ Neutral      Strongly Di~\r\n10 Neutral       Disagree      Disagree      Strongly Di~ Agree       \r\n\r\nThese can also be packaged inside a data frame, for example when simulating test results for students.\r\n\r\n\r\nr_data_frame(\r\n  n=10,\r\n  Student=id,\r\n  age=rpois(14),\r\n  r_series(grade,j=3,integer=TRUE,name=\"Test\")\r\n)\r\n\r\n\r\n# A tibble: 10 x 5\r\n   Student   age Test_1 Test_2 Test_3\r\n   <chr>   <int>  <int>  <int>  <int>\r\n 1 01         17     90     86     79\r\n 2 02         15     90     93     94\r\n 3 03         12     87     87     92\r\n 4 04         17     89     89     88\r\n 5 05         20     87     95     88\r\n 6 06          7     85     90     92\r\n 7 07         20     82     87     85\r\n 8 08         20     87     94     87\r\n 9 09         14     88     83     97\r\n10 10          4     89     86     85\r\n\r\nThat is great but not very real, because the test results are completely independent from each other. The relate parameter inside the r_series function helps to connect the results, and the format is fM_sd.\r\nf is one of (+,-,*,/)\r\nM is the mean value\r\nsd is the standard deviation of the mean value\r\nExamples: * +3_1: The test results get better on average 3 points with a standard deviation of 1. * *1.05_0.2: The results get better on average 5% with a standard deviation of 0.2.\r\n\r\n\r\nr_data_frame(\r\n  n=10,\r\n  Student=id,\r\n  age=rpois(14),\r\n  r_series(grade,j=3,integer=TRUE,name=\"Test\",relate=\"+3_1\")\r\n)\r\n\r\n\r\n# A tibble: 10 x 5\r\n   Student   age Test_1     Test_2     Test_3    \r\n   <chr>   <int> <variable> <variable> <variable>\r\n 1 01         20  89.0       91.9       95.0     \r\n 2 02         16 100.0      103.1      105.0     \r\n 3 03         13  87.5       89.0       90.9     \r\n 4 04         14  84.5       86.1       88.3     \r\n 5 05         10  85.2       88.5       91.5     \r\n 6 06          8  84.9       86.9       90.5     \r\n 7 07         12  91.6       94.5       98.4     \r\n 8 08         11  83.2       87.6       92.0     \r\n 9 09          9  86.8       91.1       93.5     \r\n10 10         15  85.4       87.6       91.4     \r\n\r\nWith this in mind, you can create customer balances over time very easily.\r\n\r\n\r\nbalances <- r_data_frame(\r\n  n=10,\r\n  Client=name,\r\n  age,\r\n  r_series(income,j=12,name=\"Month\",relate=\"*1.03_0.1\")\r\n)\r\n\r\n\r\n\r\nThis result is worth to be visualized.\r\n\r\n\r\nbalances %>%\r\n  tidyr::pivot_longer(-c(1,2),names_to=\"Month\") %>%\r\n  mutate(Month=readr::parse_number(Month)) %>%\r\n  ggplot(aes(x=Month,y=value))+geom_line()+facet_wrap(~Client,scales=\"free_y\")\r\n\r\n\r\n\r\n\r\nWe can see that there are customers who had very positive balance development and others whose balances were fluctuating more or declining. However, when we simulate a sufficiently large number of customers, we will observe that on average the increase each month will be the desired 3% with a standard deviation of 0.1.\r\nrcorpora\r\nCheck the github repository here.\r\nThe rcorpora library has 293 collections of words that can be very helpful for data simulation.\r\n\r\n\r\nlibrary(rcorpora)\r\n\r\nlength(corpora())\r\n\r\n\r\n[1] 293\r\n\r\ncorpora()[sample(1:293,10)]\r\n\r\n\r\n [1] \"words/eggcorns\"                      \r\n [2] \"archetypes/artifact\"                 \r\n [3] \"words/stopwords/lv\"                  \r\n [4] \"words/verbs_with_conjugations\"       \r\n [5] \"words/units_of_time\"                 \r\n [6] \"animals/dog_names\"                   \r\n [7] \"mythology/greek_monsters\"            \r\n [8] \"religion/fictional_religions\"        \r\n [9] \"words/closed_pairs\"                  \r\n[10] \"words/literature/shakespeare_phrases\"\r\n\r\nTo view the words of one collection use the name in the corpora() function.\r\n\r\n\r\ncorpora(\"foods/pizzaToppings\")\r\n\r\n\r\n$description\r\n[1] \"A list of pizza toppings.\"\r\n\r\n$pizzaToppings\r\n [1] \"anchovies\"        \"artichoke\"        \"bacon\"           \r\n [4] \"breakfast bacon\"  \"Canadian bacon\"   \"cheese\"          \r\n [7] \"chicken\"          \"chili peppers\"    \"feta\"            \r\n[10] \"garlic\"           \"green peppers\"    \"grilled onions\"  \r\n[13] \"ground beef\"      \"ham\"              \"hot sauce\"       \r\n[16] \"meatballs\"        \"mushrooms\"        \"olives\"          \r\n[19] \"onions\"           \"pepperoni\"        \"pineapple\"       \r\n[22] \"sausage\"          \"spinach\"          \"sun-dried tomato\"\r\n[25] \"tomatoes\"        \r\n\r\nLet see how we can use this in a simulated dataframe.\r\n\r\n\r\ntibble(\r\n  first_name=corpora(\"humans/firstNames\")$firstNames %>% sample(100,replace=TRUE),\r\n  last_name=corpora(\"humans/lastNames\")$lastNames %>% sample(100,replace=TRUE),\r\n  self_description=corpora(\"humans/descriptions\")$descriptions %>% sample(100,replace=TRUE),\r\n  home_country=corpora(\"geography/countries\")$countries %>% sample(100,replace=TRUE),\r\n  favorite_pizza_topping=corpora(\"foods/pizzaToppings\")$pizzaToppings %>% sample(100,replace=TRUE)\r\n)\r\n\r\n\r\n# A tibble: 100 x 5\r\n   first_name last_name self_description home_country favorite_pizza_~\r\n   <chr>      <chr>     <chr>            <chr>        <chr>           \r\n 1 Henry      Davis     selfish          Malawi       sausage         \r\n 2 Emmanuel   Edwards   peevish          Saudi Arabia ham             \r\n 3 Gabriel    Burns     above average    Guinea-Biss~ sausage         \r\n 4 Zoe        Campbell  diligent         Rwanda       anchovies       \r\n 5 Nicole     Freeman   even-tempered    Niger        cheese          \r\n 6 Aiden      Wright    independent      Portugal     grilled onions  \r\n 7 Stephen    Ramos     restless         Guinea-Biss~ spinach         \r\n 8 Jason      Robinson  wonderful        Colombia     meatballs       \r\n 9 Mia        Hoffman   incisive         India        breakfast bacon \r\n10 George     Thompson  impulsive        Togo         ground beef     \r\n# ... with 90 more rows\r\n\r\ncharlatan\r\n\r\n\r\nlibrary(charlatan)\r\n\r\nch_job(n=10)\r\n\r\n\r\n [1] \"Industrial/product designer\"       \r\n [2] \"Sport and exercise psychologist\"   \r\n [3] \"Chartered accountant\"              \r\n [4] \"Land\"                              \r\n [5] \"Geophysicist/field seismologist\"   \r\n [6] \"Embryologist, clinical\"            \r\n [7] \"Camera operator\"                   \r\n [8] \"Government social research officer\"\r\n [9] \"Call centre manager\"               \r\n[10] \"Engineer, energy\"                  \r\n\r\nch_name(n=10,locale=\"de_DE\")\r\n\r\n\r\n [1] \"Dr. Dörthe Hänel B.A.\"       \"Dimitrios Mühle-Bauer\"      \r\n [3] \"Annedore Meyer\"              \"Hanife Kruschwitz\"          \r\n [5] \"Stanislaw Lachmann-Fliegner\" \"Gabor Kuhl-Trupp\"           \r\n [7] \"Univ.Prof. Margot Stiffel\"   \"Zbigniew Rädel\"             \r\n [9] \"Gitta Hörle\"                 \"Francisco Wulff B.Eng.\"     \r\n\r\nch_color_name(n=10)\r\n\r\n\r\n [1] \"IndianRed\"    \"Chartreuse\"   \"LightSalmon\"  \"DimGray\"     \r\n [5] \"Orchid\"       \"NavajoWhite\"  \"Gainsboro\"    \"DarkBlue\"    \r\n [9] \"OrangeRed\"    \"MediumPurple\"\r\n\r\nch_phone_number(locale=\"de_DE\",n=10)\r\n\r\n\r\n [1] \"(00567) 641491\"      \"+49(0)7883 66510\"    \"+49 (0) 5200 796883\"\r\n [4] \"+49 (0) 8301 309817\" \"+49(0)0842 058958\"   \"07046066613\"        \r\n [7] \"02099034929\"         \"+49(0)4489 30499\"    \"+49 (0) 6469 159399\"\r\n[10] \"+49 (0) 8410 684015\"\r\n\r\nA nice small application with fake locations.\r\n\r\n\r\nlocations <- data.frame(lon=ch_lon(n=10),lat=ch_lat(n=10))\r\n\r\nggplot(locations)+\r\n  borders(\"world\")+\r\n  geom_point(aes(x=lon,y=lat))+\r\n  coord_quickmap()\r\n\r\n\r\n\r\n\r\nfabricatr\r\nEasy creation of hierarchical data. In this example there are five families, each one has between 1 and 12 members. Each family member has between 1 and 5 accounts. With add_level() we can automatically produce a table that shows all accounts of all members in all families.\r\n\r\n\r\nlibrary(fabricatr)\r\n\r\nfabricate(\r\n  family  = add_level(N = 5,\r\n  n_members = sample(1:12, N, replace = TRUE,prob=12:1)),\r\n  \r\n  members  = add_level(N = n_members,\r\n  n_accounts = sample(1:5,N,replace=TRUE,prob=(5:1)^2)),\r\n  \r\n  account = add_level(N = n_accounts)\r\n  ) %>%\r\nhead(10)\r\n\r\n\r\n   family n_members members n_accounts account\r\n1       1         5      01          1      01\r\n2       1         5      02          1      02\r\n3       1         5      03          4      03\r\n4       1         5      03          4      04\r\n5       1         5      03          4      05\r\n6       1         5      03          4      06\r\n7       1         5      04          3      07\r\n8       1         5      04          3      08\r\n9       1         5      04          3      09\r\n10      1         5      05          2      10\r\n\r\nLink levels. We can create 15 clients with their birth year and join year and some correlation between both variables.\r\n\r\n\r\ndf <- fabricate(\r\n  age = add_level(N=51, birth_year=1950:2000),\r\n  tenure = add_level(N = 20, join_year=1991:2010, nest = FALSE),\r\n  client = link_levels(N = 15, by = join(age, tenure, rho = 0.7))\r\n)\r\n\r\ndf %>% select(client,birth_year,join_year)\r\n\r\n\r\n   client birth_year join_year\r\n1      01       1975      2004\r\n2      02       1994      2010\r\n3      03       1967      2006\r\n4      04       1973      1995\r\n5      05       1951      1993\r\n6      06       1968      1995\r\n7      07       1967      1991\r\n8      08       1972      1997\r\n9      09       1956      1994\r\n10     10       1982      2007\r\n11     11       1965      2001\r\n12     12       1975      1996\r\n13     13       1955      1995\r\n14     14       1954      2000\r\n15     15       1951      1995\r\n\r\nOrdered data\r\nfabricatr has an amazing function to create ordered data.\r\nLet’s take a look at an example where we have two types of clients, gold clients that receive a yearly gift from the bank and standard clients that do not. How could we simulate their responses to a satisfaction survey?\r\n\r\n\r\ndf <- fabricate(\r\n  N = 100,\r\n  gold_client_flag = draw_binary(prob = 0.3, N),\r\n  satisfaction = draw_ordered(\r\n    x = rnorm(N, mean = -0.4 + 1.2 * gold_client_flag),\r\n    breaks = c(-1.5, -0.5, 0.5, 1.5),\r\n    break_labels = c(\"Very Unsatisfied\", \"Unsatisfied\", \"Neutral\",\r\n                     \"Satisfied\", \"Very Satisfied\")\r\n  )\r\n)\r\n\r\ndf %>% count(gold_client_flag,satisfaction) %>%\r\n  tidyr::pivot_wider(id_cols=satisfaction,names_from=\"gold_client_flag\",values_from=\"n\")\r\n\r\n\r\n# A tibble: 5 x 3\r\n  satisfaction       `0`   `1`\r\n  <fct>            <int> <int>\r\n1 Very Unsatisfied    16     1\r\n2 Unsatisfied         23     2\r\n3 Neutral             21     9\r\n4 Satisfied            8    14\r\n5 Very Satisfied       1     5\r\n\r\nTo draw counts from a distribution we can use draw_count().\r\n\r\n\r\nrtlme_model <- fabricate(\r\n  N = 1000,\r\n  radio_coverage = rlnorm(N, meanlog=0, sdlog=1),\r\n  violent_incident_count = draw_count(mean = 1.5 * radio_coverage, N = N)\r\n)\r\n\r\n\r\n\r\nTime series\r\nExample from this article.\r\nThis example contains the gdp of five countries over the course of five years.\r\n\r\n\r\npanel_units <- fabricate(\r\n  countries = add_level(\r\n    N = 5,\r\n    base_gdp = runif(N, 15, 22),\r\n    growth_units = runif(N, 0.2, 0.8),\r\n    growth_error = runif(N, 0.1, 0.5)\r\n  ),\r\n  years = add_level(\r\n    N = 5,\r\n    ts_year = 0:4,\r\n    gdp_measure = base_gdp + (ts_year * growth_units) + rnorm(N, sd=growth_error)\r\n  )\r\n)\r\n\r\npanel_units\r\n\r\n\r\n   countries base_gdp growth_units growth_error years ts_year\r\n1          1 20.95195    0.2968093    0.3857695    01       0\r\n2          1 20.95195    0.2968093    0.3857695    02       1\r\n3          1 20.95195    0.2968093    0.3857695    03       2\r\n4          1 20.95195    0.2968093    0.3857695    04       3\r\n5          1 20.95195    0.2968093    0.3857695    05       4\r\n6          2 17.56013    0.5661989    0.4574393    06       0\r\n7          2 17.56013    0.5661989    0.4574393    07       1\r\n8          2 17.56013    0.5661989    0.4574393    08       2\r\n9          2 17.56013    0.5661989    0.4574393    09       3\r\n10         2 17.56013    0.5661989    0.4574393    10       4\r\n11         3 21.27902    0.3400421    0.1547466    11       0\r\n12         3 21.27902    0.3400421    0.1547466    12       1\r\n13         3 21.27902    0.3400421    0.1547466    13       2\r\n14         3 21.27902    0.3400421    0.1547466    14       3\r\n15         3 21.27902    0.3400421    0.1547466    15       4\r\n16         4 18.34628    0.4047679    0.1259916    16       0\r\n17         4 18.34628    0.4047679    0.1259916    17       1\r\n18         4 18.34628    0.4047679    0.1259916    18       2\r\n19         4 18.34628    0.4047679    0.1259916    19       3\r\n20         4 18.34628    0.4047679    0.1259916    20       4\r\n21         5 19.04489    0.2747095    0.3968919    21       0\r\n22         5 19.04489    0.2747095    0.3968919    22       1\r\n23         5 19.04489    0.2747095    0.3968919    23       2\r\n24         5 19.04489    0.2747095    0.3968919    24       3\r\n25         5 19.04489    0.2747095    0.3968919    25       4\r\n   gdp_measure\r\n1     20.96671\r\n2     21.22090\r\n3     21.29848\r\n4     21.78869\r\n5     22.03075\r\n6     18.02750\r\n7     17.53659\r\n8     18.12006\r\n9     19.06738\r\n10    20.47390\r\n11    20.84183\r\n12    21.53778\r\n13    21.86933\r\n14    22.19401\r\n15    22.72312\r\n16    18.34209\r\n17    18.85759\r\n18    19.01069\r\n19    19.68847\r\n20    19.90965\r\n21    18.64765\r\n22    19.96476\r\n23    19.47246\r\n24    20.34954\r\n25    20.20915\r\n\r\n\r\n\r\n\r\nWe can take this to the next level and introduce some year specific information and then cross this with the country specific information. We just have to add one layer.\r\n\r\n\r\npanel_global_data <- fabricate(\r\n  years = add_level(\r\n    N = 5,\r\n    ts_year = 0:4,\r\n    year_shock = rnorm(N, 0, 0.3) #each year has a global trend\r\n  ),\r\n  countries = add_level(\r\n    N = 5,\r\n    base_gdp = runif(N, 15, 22),\r\n    growth_units = runif(N, 0.2, 0.5), \r\n    growth_error = runif(N, 0.1, 0.5),\r\n    nest = FALSE\r\n  ),\r\n  country_years = cross_levels(\r\n    by = join(years, countries),\r\n    gdp_measure = base_gdp + year_shock + (ts_year * growth_units) +\r\n      rnorm(N, sd=growth_error)\r\n  )\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\nGenOrd\r\nThis package helps to create discrete random variables with prescribed correlation matrix and marginal distributions.\r\n\r\n\r\nlibrary(GenOrd)\r\n\r\n\r\nk <- 4 #number of random variables\r\nmarginal <- list(0.6, c(1/3,2/3), c(1/4,2/4,3/4), c(1/5,2/5,3/5,4/5))\r\n\r\n\r\n\r\nRead this as follows: * We will create 4 random variables. * The first variable will have two values 60% of the data will be 1, 40% will be 2. * The second variable will have three values, 1,2 and 3 with a probability of 33% each. * etc… * Each vector in this list refers to one variable, and we will see the cumulative probability for each value.\r\n\r\n\r\ncorrcheck(marginal)\r\n\r\n\r\n[[1]]\r\n4 x 4 Matrix of class \"dsyMatrix\"\r\n           [,1]       [,2]       [,3]       [,4]\r\n[1,]  1.0000000 -0.8333333 -0.8215838 -0.8660254\r\n[2,] -0.8333333  1.0000000 -0.9128709 -0.9237604\r\n[3,] -0.8215838 -0.9128709  1.0000000 -0.9486833\r\n[4,] -0.8660254 -0.9237604 -0.9486833  1.0000000\r\n\r\n[[2]]\r\n4 x 4 Matrix of class \"dsyMatrix\"\r\n          [,1]      [,2]      [,3]      [,4]\r\n[1,] 1.0000000 0.8333333 0.8215838 0.8660254\r\n[2,] 0.8333333 1.0000000 0.9128709 0.9237604\r\n[3,] 0.8215838 0.9128709 1.0000000 0.9486833\r\n[4,] 0.8660254 0.9237604 0.9486833 1.0000000\r\n\r\nThis function shows what are allowable ranges for the correlation matrix, given the input from the marginal distributions.\r\n\r\n\r\nSigma <- matrix(c(1,0.5,0.4,0.3,\r\n                  0.5,1,0.5,0.4,\r\n                  0.4,0.5,1,0.5,\r\n                  0.3,0.4,0.5,1),\r\n                k, k, byrow=TRUE)\r\n\r\n\r\nn <- 1000 # sample size\r\nm <- ordsample(n, marginal, Sigma)\r\n\r\ndf <- data.frame(m)\r\nhead(df)\r\n\r\n\r\n  X1 X2 X3 X4\r\n1  1  1  1  1\r\n2  1  2  3  2\r\n3  2  3  3  5\r\n4  1  3  3  3\r\n5  2  3  4  4\r\n6  2  3  3  4\r\n\r\nLet’s verify that the data is actually what we expected.\r\n\r\n\r\ncor(df)\r\n\r\n\r\n          X1        X2        X3        X4\r\nX1 1.0000000 0.4924456 0.4274453 0.2805419\r\nX2 0.4924456 1.0000000 0.4786193 0.4084210\r\nX3 0.4274453 0.4786193 1.0000000 0.4832715\r\nX4 0.2805419 0.4084210 0.4832715 1.0000000\r\n\r\ndf %>% count(X4)\r\n\r\n\r\n  X4   n\r\n1  1 187\r\n2  2 195\r\n3  3 212\r\n4  4 212\r\n5  5 194\r\n\r\ndf %>% count(X1)\r\n\r\n\r\n  X1   n\r\n1  1 603\r\n2  2 397\r\n\r\nLater, we can rename the columns and values, but will have assured that they have the desired correlations.\r\nMore packages\r\nIn this blogpost by Joseph Rickert on R Views.\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-03-useful-packages-for-data-composition/useful-packages-for-data-composition_files/figure-html5/unnamed-chunk-13-1.png",
    "last_modified": "2020-12-29T11:38:54+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-13-data-composition-with-rmultinom/",
    "title": "Data simulation with rmultinom",
    "description": "When creating several datasets that depend on each other, the rmultinom function from the stats package can be a useful helper. In this example we will see how to create customer transactions from a customer table.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2020-11-13",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nAutomate this for all customers\r\n\r\nIn this short article I want to show how the rmultinom() function can help to simulate data. We will simulate client data, and for each client we will create transactions.\r\nThe rmultinom() function simulates the multinomial distribution (Link).\r\nIn my head I always picture the multinomial distribution as a game setup. You have N balls and K bins. Instead of the number of bins, we send a vector of probabilities (of length K), how likely it is for the balls to land in each bin (you can imagine that some bins are closer and others are further away, or that some are larger than others). This vector will be normalized automatically, so you do not have to worry about this.\r\nLet’s try an example, with N=1000 and K=5. We want one of the bins to be twice as large as the others.\r\n\r\n\r\ntest1 <- rmultinom(n=1,size=1000,c(2,1,1,1,1))\r\n\r\n\r\n\r\n\r\n\r\n\r\nHow can we use this function to create transactions for a given number of customers? The key is to simulate all important values on client level and use rmultinom to decompose the values into smaller portions. First, let’s get some clients.\r\n\r\n\r\nset.seed(61)\r\n\r\nage <- rnorm(10,mean=50,sd=15) %>% pmax(18) %>% round()\r\ntenure <- (age - 18 - runif(10,1,30)) %>% pmax(0) %>% round()\r\nincome <- rexp(10,0.0001) %>% round(2)\r\n\r\nclient <- data.frame(id=1:10,age,tenure,income)\r\n\r\nclient\r\n\r\n\r\n   id age tenure   income\r\n1   1  44     22 32181.33\r\n2   2  44      7  5454.56\r\n3   3  24      3  4559.78\r\n4   4  55     34 26790.03\r\n5   5  29      0 18592.27\r\n6   6  47     19 40229.93\r\n7   7  61     14  1065.49\r\n8   8  58     17  2750.75\r\n9   9  71     49 12292.53\r\n10 10  45     15   282.05\r\n\r\nFor this exercise, we do not distinguish between different types of transactions. In practice, it would make sense to separate rent, supermarket, transport and other categories.\r\nWe create a second dataframe for clients, which contains “invisible” information needed for the transactions. Let’s begin with the total spending. This can depend on anything we know about the client. In this case, we will assume that each client has more or less the same behavior and spends around 70% of their income. The standard deviation of 0.1 assures that this value varies from client to client.\r\n\r\n\r\ncl_secret_info <- client\r\n\r\ncl_secret_info$total_spend <- (cl_secret_info$income * rnorm(10,0.7,sd=0.1)) %>% round(2)\r\n\r\ncl_secret_info\r\n\r\n\r\n   id age tenure   income total_spend\r\n1   1  44     22 32181.33    20755.16\r\n2   2  44      7  5454.56     4342.34\r\n3   3  24      3  4559.78     3280.65\r\n4   4  55     34 26790.03    21012.47\r\n5   5  29      0 18592.27    13990.48\r\n6   6  47     19 40229.93    25986.32\r\n7   7  61     14  1065.49      699.14\r\n8   8  58     17  2750.75     2158.39\r\n9   9  71     49 12292.53    10135.33\r\n10 10  45     15   282.05      160.08\r\n\r\nThe next ingredient is the number of transactions. We will make a very simple formula depending on age.\r\n\r\n\r\ncl_secret_info$n_trans <- ifelse(cl_secret_info$age < 50, rbinom(10,60,0.5),rbinom(10,60,0.3))\r\n\r\ncl_secret_info\r\n\r\n\r\n   id age tenure   income total_spend n_trans\r\n1   1  44     22 32181.33    20755.16      27\r\n2   2  44      7  5454.56     4342.34      37\r\n3   3  24      3  4559.78     3280.65      28\r\n4   4  55     34 26790.03    21012.47      25\r\n5   5  29      0 18592.27    13990.48      32\r\n6   6  47     19 40229.93    25986.32      27\r\n7   7  61     14  1065.49      699.14      11\r\n8   8  58     17  2750.75     2158.39      14\r\n9   9  71     49 12292.53    10135.33      16\r\n10 10  45     15   282.05      160.08      27\r\n\r\nNow we already know that our transaction table will have 244 rows.\r\nWith this we can already make the split, but we will create a last parameter which is an indicator of how similar the transactions are. You could split $100 into one large transaction of $80 and a four small transactions of $5 each or you could have five transactions of around $20 each.\r\n\r\n\r\ncl_secret_info$diff_trans <- rexp(10,100/cl_secret_info$total_spend) %>% ceiling()\r\n\r\ncl_secret_info\r\n\r\n\r\n   id age tenure   income total_spend n_trans diff_trans\r\n1   1  44     22 32181.33    20755.16      27        328\r\n2   2  44      7  5454.56     4342.34      37         55\r\n3   3  24      3  4559.78     3280.65      28         38\r\n4   4  55     34 26790.03    21012.47      25         65\r\n5   5  29      0 18592.27    13990.48      32          1\r\n6   6  47     19 40229.93    25986.32      27       1408\r\n7   7  61     14  1065.49      699.14      11          1\r\n8   8  58     17  2750.75     2158.39      14         47\r\n9   9  71     49 12292.53    10135.33      16        183\r\n10 10  45     15   282.05      160.08      27          2\r\n\r\nNow we have all the necessary ingredients to split the total into n_trans transactions for each customer. And this is the moment where the rmultinom function is extremely helpful. Let’s take a look at the first client, who spends $20755.16 in 27 transactions. The high diff_trans value indicates that there will likely be some very high transaction values and some very low.\r\nBefore doing the rmultinom magic, we will create the vector with the bins first.\r\n\r\n\r\nbins <- runif(cl_secret_info$n_trans[1],min=1,max=cl_secret_info$diff_trans[1])\r\n\r\ntransactions1 <- rmultinom(1,cl_secret_info$total_spend[1],bins)\r\n\r\ndf <- data.frame(client_id=1, trans_id=1:cl_secret_info$n_trans[1],value=transactions1)\r\n\r\nDT::datatable(df)\r\n\r\n\r\n\r\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\"],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],[880,1240,1364,1262,158,1291,1182,86,1455,1354,288,831,738,8,1209,164,594,822,280,1093,321,297,211,1276,9,1375,967]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>client_id<\\/th>\\n      <th>trans_id<\\/th>\\n      <th>value<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\r\nAutomate this for all customers\r\nIn order to efficiently do this for all customers we will put what we just did in a function and call this via lapply.\r\nThen we can bind all the transactions from all customers together in our final dataframe.\r\n\r\n\r\ncreate_transactions <- function(i) {\r\n  bins <- runif(cl_secret_info$n_trans[i],min=1,max=cl_secret_info$diff_trans[i])\r\n\r\n  transactions <- rmultinom(1,cl_secret_info$total_spend[i],bins)\r\n\r\n  df <- data.frame(client_id=i, trans_id=1:cl_secret_info$n_trans[i],value=transactions)\r\n  \r\n  return(df)\r\n}\r\n\r\ntrans_list <- lapply(seq_along(client$id),create_transactions)\r\n\r\ntrans_df <- do.call(rbind,trans_list)\r\n\r\nDT::datatable(trans_df)\r\n\r\n\r\n\r\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\"],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,12,13,14,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],[573,1367,688,250,228,521,873,1136,533,374,1118,399,482,473,1265,536,1237,701,585,1041,1311,1408,617,1036,1298,381,324,115,51,206,40,184,69,73,150,89,111,34,165,188,128,216,157,119,61,139,204,6,46,188,141,139,131,225,73,140,60,145,182,135,9,91,94,38,148,52,262,91,26,116,164,24,10,36,157,247,225,24,186,167,50,58,14,40,116,186,180,185,106,138,211,61,1513,360,286,160,467,1165,1553,1520,218,916,443,783,1549,153,224,455,327,1545,813,1282,647,1480,679,1144,1330,427,418,473,438,420,464,460,442,431,424,450,432,408,416,445,427,419,444,437,432,434,433,457,421,438,439,427,475,416,459,462,422,1027,1425,355,63,1355,1845,329,530,1729,998,1150,356,53,1370,1290,248,1692,854,1802,19,1562,1244,663,1533,770,797,927,63,60,56,76,65,65,73,59,69,55,58,178,262,110,49,154,233,29,258,251,32,228,231,109,34,366,835,517,464,1270,368,100,1232,210,701,617,211,583,1190,179,1292,7,7,2,2,4,5,7,6,9,1,5,3,6,5,8,6,8,4,12,5,8,8,11,4,8,5,4]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>client_id<\\/th>\\n      <th>trans_id<\\/th>\\n      <th>value<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-11-13-data-composition-with-rmultinom/data-composition-with-rmultinom_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2020-12-29T11:39:18+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-10-09-data-simulation/",
    "title": "Simulate variables and data",
    "description": "The purpose of this post is to enable readers to create data from scratch which they can use for their analyses or visualizations.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2020-10-09",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nPackages\r\nManual values\r\nCategorical variables with sample()\r\nNumerical variables\r\nDistributions\r\nCombining variables in a dataframe\r\nExporting\r\n\r\nPackages\r\nMost of the functions that we are using here are part of base R.\r\nWe will need some functions from the {dplyr} and {ggplot2} packages for quick visualizations, but these are optional.\r\n\r\n\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\n\r\n\r\n\r\nImportant to make your data creation reproducible (i.e. if you run it again, it gives the same result) is the set.seed() function. As we are creating instances of random variables we assure with this function that every time the same sequence of random variables is generated. You can use any number you like inside this function.\r\n\r\n\r\nset.seed(64)\r\n\r\n\r\n\r\nManual values\r\nLet’s start with the most simple but most time-consuming way. Type everything manually and save it in a vector:\r\n\r\n\r\nclient_gen <- c(\"Millenial\",\"Gen X\",\"Millenial\",\r\n                \"Baby Boomer\",\"Gen X\",\"Millenial\",\"Gen X\")\r\n\r\ndata.frame(id=1:7,client_gen)\r\n\r\n\r\n  id  client_gen\r\n1  1   Millenial\r\n2  2       Gen X\r\n3  3   Millenial\r\n4  4 Baby Boomer\r\n5  5       Gen X\r\n6  6   Millenial\r\n7  7       Gen X\r\n\r\nCategorical variables with sample()\r\nFor categorical variables, we can save some time using the sample function. You specify first the possible values and then how many of these values you would like to pick. If you want to allow values to be picked more than once, make sure to set replace=TRUE.\r\n\r\n\r\nclient_gen <- sample(c(\"Millenial\",\"Gen X\",\"Baby Boomer\"),7,replace=TRUE)\r\n\r\ndata.frame(id=1:7,client_gen)\r\n\r\n\r\n  id  client_gen\r\n1  1 Baby Boomer\r\n2  2   Millenial\r\n3  3   Millenial\r\n4  4   Millenial\r\n5  5       Gen X\r\n6  6   Millenial\r\n7  7       Gen X\r\n\r\nThe sample function is quite flexible and we can tweak the prob parameter, for example to say that we want (approximately) half of the population to be Baby Boomers. The effect will be visible if we produce larger amounts of data.\r\n\r\n\r\nclient_gen <- sample(c(\"Millenial\",\"Gen X\",\"Baby Boomer\"), 1000, replace=TRUE, prob=c(0.25,0.25,0.5))\r\n\r\nqplot(client_gen)\r\n\r\n\r\n\r\n\r\nNumerical variables\r\nThe same sample() function works with numbers.\r\n\r\n\r\nclient_age <- sample(1:100,size=7,replace=TRUE)\r\n\r\ndata.frame(id=1:7,client_age)\r\n\r\n\r\n  id client_age\r\n1  1          4\r\n2  2         42\r\n3  3         33\r\n4  4         62\r\n5  5         76\r\n6  6         65\r\n7  7         81\r\n\r\nIn both cases above, each number had the same probability of being selected. If we would like some numbers to be more likely to be selected, we can specify this with prob.\r\nThe probability values will be automatically scaled to 1. If I would like to have 50% of the population to have the age of 27, I can specify the weight. (Note: rep(1,5) is equivalent to c(1,1,1,1,1), replicating the number 1 five times.)\r\n\r\n\r\nclient_age <- sample(1:100,size=1000,replace=TRUE,prob=c(rep(1,26),99,rep(1,73)))\r\n\r\nqplot(client_age==27)\r\n\r\n\r\n\r\n\r\nDistributions\r\nIf you would like to work with probability distributions to create numerical variable, this is also very easy with the base functions of type r+(starting letters of the distribution).\r\nLet’s try the uniform distribution:\r\n\r\n\r\nclient_age <- runif(7,min=1,max=100)\r\n\r\ndata.frame(id=1:7,client_age)\r\n\r\n\r\n  id client_age\r\n1  1   55.10342\r\n2  2   85.19588\r\n3  3   86.47791\r\n4  4   73.91516\r\n5  5   48.15197\r\n6  6   32.90848\r\n7  7   58.76874\r\n\r\nWe can use the round() function to round each value to their next integer.\r\n\r\n\r\nrunif(10000,1,100) %>% round() %>% qplot(binwidth=10)\r\n\r\n\r\n\r\n\r\nBut uniformly distributed variables are not always what we want. In the example above we simulated 10,000 clients and distributes their ages uniformly. Then there are as many 99 year old clients as there are 50 year old clients.\r\nBut we can easily access a whole list of other distribution functions, like the famous Normal distribution (with mean and standard deviation as parameters).\r\n\r\n\r\nrnorm(10000,mean=50,sd=20) %>% qplot()\r\n\r\n\r\n\r\n\r\nIf we want to limit the values to not be smaller than 0 or larger than 100, we can use pmin and pmax.\r\n\r\n\r\nrnorm(10000,mean=50,sd=20) %>% pmax(0) %>% pmin(100) %>% qplot()\r\n\r\n\r\n\r\n\r\nFor many applications (like balance distribution or any data that contains outliers) I like to use the Exponential distribution (with parameter rate and expectation 1/rate).\r\n\r\n\r\nrexp(10000,rate=0.01) %>% qplot()\r\n\r\n\r\n\r\n\r\nIf you want to explore further probability distributions check out this link.\r\nCombining variables in a dataframe\r\nTo create our first simulated dataframe, we can start by simulating the variables separately and then putting them together.\r\n\r\n\r\nset.seed(61)\r\n\r\nk <- 7\r\n\r\nid <- 1:k\r\nname <- c(\"Frank\",\"Dorian\",\"Eva\",\"Elena\",\"Andy\",\"Barbara\",\"Yvonne\")\r\nage <- rnorm(k,mean=30,sd=10) %>% pmax(18) %>% round()\r\nocupation <- sample(c(\"analyst\",\"manager\",\"sr analyst\"),k,replace=T,prob=c(10,2,3))\r\nbalance <- rexp(k,rate=0.001) %>% round(2)\r\nmarried <- sample(c(\"Yes\",\"No\"),k,replace=T,prob=c(0.6,0.4))\r\n\r\ndata <- data.frame(client_id=id,name,age,ocupation,balance,married_flg=married)\r\ndata\r\n\r\n\r\n  client_id    name age  ocupation balance married_flg\r\n1         1   Frank  26 sr analyst  245.96          No\r\n2         2  Dorian  26    analyst 2273.39          No\r\n3         3     Eva  18    manager 2270.47          No\r\n4         4   Elena  34    analyst  373.45          No\r\n5         5    Andy  18    analyst  961.21         Yes\r\n6         6 Barbara  28    analyst   69.32         Yes\r\n7         7  Yvonne  37    analyst 3218.13         Yes\r\n\r\nGreat! We just simulated a dataset which we can use now for visualization or modeling purposes.\r\nExporting\r\nWhen we are happy with our created dataset and want to use it somewhere else we can export it using the base R function.\r\n\r\n\r\nwrite.csv(raw,\"data.csv\")\r\n\r\n\r\n\r\nAlternatively, if this is not fast enough, we can also use the fwrite function from the data.table package which is much faster.\r\n\r\n\r\nlibrary(data.table)\r\nfwrite(raw,\"data.csv\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-10-09-data-simulation/data-simulation_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2020-12-29T11:37:11+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-10-09-fuzzy-merging/",
    "title": "Fuzzy matching",
    "description": "Whenever you have text data that was input manually by a human, there is a chance that it contains errors: Typos, abbreviations or different ways of writing can be challenges for your analysis. Fuzzy matching is a way to find inexact matches that mean the same thing like mcdonalds, McDonalds and McDonald's Company.",
    "author": [
      {
        "name": "Richard Vogg",
        "url": "https://github.com/richardvogg"
      }
    ],
    "date": "2020-10-09",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nPackages\r\nThe data\r\nMain process\r\nResults\r\nNext Steps and other resources\r\n\r\nPackages\r\nThe only packages you need are dplyr and stringdist.\r\n\r\n\r\nlibrary(dplyr)\r\nlibrary(stringdist)\r\n\r\n\r\n\r\nThe data\r\nThis method requires as input two lists. To distinguish them, we will call the one that contains the handtyped input as the “dirty list”. The reference list will be called the “clean list”. In this blogpost I will create the dirty list by hand with a few made-up examples of alternative company names.\r\n\r\n\r\nnames <- c(\"Haliburton\", \"ExxonMobile\",\"ABBOTT LABORATORIES\",\"Marrriott\",\"Self\",\"Activision Blizzard\",\r\n           \"Quest dianotstics\",\"Unemployed\",\"other company\",\"burger king\",\r\n           \"MARRIOT\",\"wall mart\", \"Illumin\", \"3M\",\"NORTHROP TRUMMON\",\"MCCormicks\",\"MARSH MCLEANNON\",\r\n           \"FLO SERVE\", \"Kansas City Southern Fed.\",\"MCDONALD'S\",\"F5 Networks\",\r\n           \"McDonalds\",\"MacKindsey\",\"Oracle\",\"Self-employed\",\"None\",\"Retired\",\r\n           \"f5 networks\",\"Harley Davidson\",\"Harly Davidson\",\"HARLEY DAVIDSEN\",\"DRHorton\",\"D.R. Horten\",\r\n           \"cincinati fin\",\"cincinnatti financials\",\"cincinnati financial\",\"CINCINATTI FINANCE\",\r\n           \"Mohaws Industry\",\"Mowahk Industries\",\"Mohawk Ind\")\r\n\r\nset.seed(64)\r\ndirty_list <- sample(names,50000,replace=T)\r\n\r\n\r\n\r\n\r\ndirty_list\r\nHaliburton\r\nExxonMobile\r\nABBOTT LABORATORIES\r\nMarrriott\r\nSelf\r\nActivision Blizzard\r\nQuest dianotstics\r\nUnemployed\r\nother company\r\nburger king\r\n\r\nAs a clean list we will use the list of S&P500 companies. This can be downloaded or scraped from the internet.\r\n\r\nclean_list\r\n3M Company\r\nAbbott Laboratories\r\nAbbVie Inc.\r\nABIOMED Inc\r\nAccenture plc\r\nActivision Blizzard\r\nAdobe Systems Inc\r\nAdvanced Micro Devices Inc\r\nAdvance Auto Parts\r\nAES Corp\r\n\r\nBefore we start, we will pre-process both lists, remove some common words and transform everything to lower case. If you prefer, you can also use the {stringr} package for this. One comment from my experience: Usually, the construction of the common words to remove is an iterative approach: You would check your final result and see which words are still causing problems. Then you add them to the cleaner function and run the process again until you are satisfied with the results.\r\n\r\n\r\ncleaner <- function(vec) {\r\n  wordremove <- c(\" and \",\" comp \",\" company\",\"companies\",\" corp \",\"corporation\",\" inc \",\"[.]com\")\r\n  output <- vec %>% tolower() %>% \r\n    {gsub(paste(wordremove,collapse='|'),\"\",.)} %>%\r\n    {gsub(\"[[:punct:]]\",\"\",.)} %>%\r\n    {gsub(\"[[:blank:]]\",\"\",.)}\r\n  return(output)\r\n}\r\n\r\ncontrol <- data.frame(original=dirty_list)\r\n\r\nclean_list_cl <- cleaner(clean_list)\r\ndirty_list_cl <- cleaner(dirty_list)\r\n\r\n\r\n\r\nMain process\r\nWe calculate a matrix of string distances. The {stringdist} package has a lot of different methods implemented which can be checked here. After comparing some of the methods I decided to go with the Jaro-Winkler distance as it yields higher similarity for words which start with the same letters.\r\nExample\r\n\r\n\r\nstringdistmatrix(c(\"other\",\"words\",\"otherexample\",\"exapmle\"),\r\n                 c(\"example\",\"other example\",\"word\"),\r\n                 method='jw',p=0.1,useNames=\"strings\")\r\n\r\n\r\n                example other example      word\r\nother        1.00000000    0.12307692 0.5166667\r\nwords        1.00000000    0.48205128 0.0400000\r\notherexample 0.28174603    0.01538462 0.4444444\r\nexapmle      0.03333333    0.55799756 1.0000000\r\n\r\nEach row of the matrix of string distances is one string from the dirty list. We find the minimum in each row, which is equivalent to the best fit from the clean list.\r\n\r\n\r\ndistmatrix <- stringdist::stringdistmatrix(dirty_list_cl,clean_list_cl,method='jw',p=0.1)\r\nbest_fit <- apply(distmatrix,1,which.min) %>% as.integer()\r\nsimilarity <- apply(distmatrix,1,min)\r\n\r\ncontrol$best_fit <- clean_list[best_fit]\r\ncontrol$distance <- round(similarity,3)\r\n\r\n\r\n\r\n\r\noriginal\r\nbest_fit\r\ndistance\r\nMarrriott\r\nMarriott Int’l.\r\n0.089\r\nRetired\r\nResMed\r\n0.203\r\nSelf\r\nSealed Air\r\n0.244\r\nHaliburton\r\nHalliburton Co.\r\n0.054\r\nF5 Networks\r\nF5 Networks\r\n0.000\r\nMarrriott\r\nMarriott Int’l.\r\n0.089\r\nIllumin\r\nIllumina Inc\r\n0.073\r\nMohaws Industry\r\nMohawk Industries\r\n0.113\r\nMARSH MCLEANNON\r\nMarsh & McLennan\r\n0.030\r\nSelf-employed\r\nTeleflex\r\n0.306\r\n\r\nResults\r\nWhen we order the control dataframe by similarity we can find a suitable cutoff value (in this example 0.12) to separate real matches from false positives. This cutoff value depends on the application.\r\n\r\n\r\ncontrol$result <- ifelse(control$distance<=0.12,control$best_fit,NA)\r\n\r\n\r\n\r\n\r\noriginal\r\nbest_fit\r\ndistance\r\nresult\r\nMarrriott\r\nMarriott Int’l.\r\n0.089\r\nMarriott Int’l.\r\nRetired\r\nResMed\r\n0.203\r\nNA\r\nSelf\r\nSealed Air\r\n0.244\r\nNA\r\nHaliburton\r\nHalliburton Co.\r\n0.054\r\nHalliburton Co.\r\nF5 Networks\r\nF5 Networks\r\n0.000\r\nF5 Networks\r\nIllumin\r\nIllumina Inc\r\n0.073\r\nIllumina Inc\r\nMohaws Industry\r\nMohawk Industries\r\n0.113\r\nMohawk Industries\r\nMARSH MCLEANNON\r\nMarsh & McLennan\r\n0.030\r\nMarsh & McLennan\r\nSelf-employed\r\nTeleflex\r\n0.306\r\nNA\r\nMohawk Ind\r\nMohawk Industries\r\n0.088\r\nMohawk Industries\r\nMowahk Industries\r\nMohawk Industries\r\n0.017\r\nMohawk Industries\r\nHarly Davidson\r\nHarley-Davidson\r\n0.014\r\nHarley-Davidson\r\nf5 networks\r\nF5 Networks\r\n0.000\r\nF5 Networks\r\n3M\r\n3M Company\r\n0.000\r\n3M Company\r\nOracle\r\nOracle Corp.\r\n0.080\r\nOracle Corp.\r\n\r\nNext Steps and other resources\r\nImprove performance for large datasets. On Github, I have an implementation of this method with the parallel package which improves performance slightly. But there is definitely more room for improvement.\r\nThere is an interesting video about performance improvement by not calculating the full matrix by Seth Verrinder and Kyle Putnam here.\r\nAndrés Cruz created an Add-in which helps to fine-tune the final result, his slide from LatinR 2019 can be found here.\r\nCheck out David Robinson’s fuzzyjoin package here.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2020-12-29T12:45:38+01:00",
    "input_file": {}
  }
]
